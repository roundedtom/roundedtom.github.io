[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "data",
    "section": "",
    "text": "Data page, stay tuned!"
  },
  {
    "objectID": "posts/2023-08-01-Pandas-Tips-使用query实现优雅的查询/index.html",
    "href": "posts/2023-08-01-Pandas-Tips-使用query实现优雅的查询/index.html",
    "title": "Pandas Tips: 使用query实现优雅的查询",
    "section": "",
    "text": "这篇博客介绍 Pandas query 函数的使用。\nDataFrame.query(expr, *, inplace=False, **kwargs) 函数使用布尔表达式对列进行查询，可以简化我们使用 loc 进行查询的写法。\n\nimport pandas as pd\nimport akshare as ak\n\n\ndata = ak.stock_zh_a_spot_em()\ndata.head()\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n0\n1\n301299\n卓创资讯\n73.80\n20.00\n12.30\n68867.0\n4.661717e+08\n21.89\n73.80\n...\n3.59\n45.91\n65.23\n6.69\n4.428000e+09\n1.107000e+09\n0.00\n0.00\n42.88\n50.31\n\n\n1\n2\n300380\n安硕信息\n23.72\n19.98\n3.95\n165635.0\n3.832872e+08\n17.96\n23.72\n...\n2.23\n13.29\n-62.17\n8.48\n3.315132e+09\n2.955271e+09\n0.00\n0.00\n33.48\n34.01\n\n\n2\n3\n301316\n慧博云通\n35.28\n16.44\n4.98\n243204.0\n8.215963e+08\n15.48\n36.36\n...\n2.83\n60.79\n272.02\n14.93\n1.411235e+10\n1.411551e+09\n-0.93\n-0.62\n56.24\n84.62\n\n\n3\n4\n300803\n指南针\n72.98\n15.86\n9.99\n472593.0\n3.234342e+09\n16.49\n74.40\n...\n2.17\n11.71\n129.84\n16.85\n2.979597e+10\n2.944736e+10\n-0.44\n-0.14\n43.63\n59.62\n\n\n4\n5\n830799\n艾融软件\n9.48\n15.61\n1.28\n65994.0\n5.974540e+07\n14.76\n9.58\n...\n3.25\n5.62\n75.60\n6.17\n1.997327e+09\n1.113238e+09\n0.00\n-0.32\n17.62\n60.14\n\n\n\n\n5 rows × 23 columns\n\n\n\n如上所示，data 数据集是沪深京 A 股行情数据。如果我们要查询股票代码为 300380 的股票，使用 loc 方法我们应该利用逻辑运算传入一个布尔表达式：\n\ndata.loc[data.代码 == \"300380\"]\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n1\n2\n300380\n安硕信息\n23.72\n19.98\n3.95\n165635.0\n3.832872e+08\n17.96\n23.72\n...\n2.23\n13.29\n-62.17\n8.48\n3.315132e+09\n2.955271e+09\n0.0\n0.0\n33.48\n34.01\n\n\n\n\n1 rows × 23 columns\n\n\n\n使用 query，我们可以这样写：\n\ndata.query(\"代码 == '300380'\")\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n1\n2\n300380\n安硕信息\n23.72\n19.98\n3.95\n165635.0\n3.832872e+08\n17.96\n23.72\n...\n2.23\n13.29\n-62.17\n8.48\n3.315132e+09\n2.955271e+09\n0.0\n0.0\n33.48\n34.01\n\n\n\n\n1 rows × 23 columns\n\n\n\nquery 函数接受一个查询字符串，然后利用 eval() 函数对该字符串进行计算，获得一个布尔表达式，再利用布尔表达式实现查询。\nquery 本质与 loc 相同，但写法上更清晰、简洁了。同样，query 也接受包含复杂逻辑运算的查询字符串，比如筛选市净率大于 10 ，同时换手率大于 5%的股票：\n\ndata.query(\"市净率 &gt; 10 and 换手率 &gt; 5\")\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n2\n3\n301316\n慧博云通\n35.28\n16.44\n4.98\n243204.0\n8.215963e+08\n15.48\n36.36\n...\n2.83\n60.79\n272.02\n14.93\n1.411235e+10\n1.411551e+09\n-0.93\n-0.62\n56.24\n84.62\n\n\n3\n4\n300803\n指南针\n72.98\n15.86\n9.99\n472593.0\n3.234342e+09\n16.49\n74.40\n...\n2.17\n11.71\n129.84\n16.85\n2.979597e+10\n2.944736e+10\n-0.44\n-0.14\n43.63\n59.62\n\n\n41\n42\n300085\n银之杰\n15.15\n7.83\n1.10\n717622.0\n1.066523e+09\n7.97\n15.30\n...\n2.23\n13.61\n2190.93\n13.54\n1.070560e+10\n7.985455e+09\n1.00\n0.07\n6.32\n62.90\n\n\n57\n58\n300169\n天晟新材\n9.07\n6.96\n0.59\n1223194.0\n1.075750e+09\n14.03\n9.30\n...\n2.12\n40.54\n-52.88\n11.54\n2.956678e+09\n2.736744e+09\n-0.11\n-1.09\n124.50\n119.61\n\n\n73\n74\n601519\n大智慧\n9.80\n6.18\n0.57\n2269647.0\n2.135727e+09\n8.67\n9.84\n...\n1.81\n11.33\n16.23\n10.35\n1.979034e+10\n1.963788e+10\n0.10\n0.62\n23.12\n70.43\n\n\n107\n108\n603000\n人民网\n33.33\n5.11\n1.62\n900203.0\n2.976598e+09\n8.83\n34.14\n...\n1.82\n8.14\n335.03\n10.77\n3.685268e+10\n3.685268e+10\n-0.24\n0.03\n49.53\n99.46\n\n\n165\n166\n300033\n同花顺\n202.36\n4.36\n8.46\n151911.0\n3.033564e+09\n5.98\n203.60\n...\n1.56\n5.59\n118.43\n17.01\n1.087887e+11\n5.495009e+10\n0.29\n0.65\n16.46\n110.55\n\n\n195\n196\n002703\n浙江世宝\n18.28\n4.10\n0.72\n988900.0\n1.768065e+09\n10.19\n18.90\n...\n1.39\n17.88\n397.86\n10.30\n1.443470e+10\n1.010994e+10\n0.33\n0.33\n131.39\n97.20\n\n\n200\n201\n002316\n亚联发展\n5.87\n4.08\n0.23\n597904.0\n3.513069e+08\n8.51\n6.04\n...\n1.55\n18.98\n-117.32\n45.51\n2.307614e+09\n1.849094e+09\n-0.17\n-0.17\n36.83\n67.24\n\n\n216\n217\n300116\n保力新\n1.85\n3.93\n0.07\n3001463.0\n5.501457e+08\n8.43\n1.91\n...\n1.24\n7.31\n-224.78\n28.38\n8.187344e+09\n7.592120e+09\n-0.54\n-0.54\n18.59\n12.80\n\n\n392\n393\n300364\n中文在线\n15.94\n2.91\n0.45\n359913.0\n5.705417e+08\n5.23\n16.18\n...\n1.78\n5.54\n-78.15\n10.42\n1.163524e+10\n1.036182e+10\n0.06\n-0.06\n-29.93\n60.69\n\n\n610\n611\n300264\n佳创视讯\n6.81\n2.10\n0.14\n288241.0\n1.955477e+08\n3.90\n6.91\n...\n2.06\n8.09\n-60.95\n19.70\n2.934140e+09\n2.427766e+09\n-0.15\n-0.15\n7.24\n12.94\n\n\n787\n788\n002647\n仁东控股\n6.46\n1.73\n0.11\n520722.0\n3.352200e+08\n4.88\n6.58\n...\n1.97\n9.30\n-28.71\n23.19\n3.617191e+09\n3.617191e+09\n0.00\n-0.31\n9.86\n-4.01\n\n\n1297\n1298\n002269\n美邦服饰\n2.02\n1.00\n0.02\n1593140.0\n3.243042e+08\n6.50\n2.10\n...\n1.05\n6.34\n28.95\n17.46\n5.075250e+09\n5.075250e+09\n0.50\n0.00\n16.76\n0.00\n\n\n1378\n1379\n000908\n景峰医药\n3.28\n0.92\n0.03\n1327803.0\n4.356034e+08\n11.69\n3.52\n...\n4.97\n16.98\n564.21\n16.13\n2.885660e+09\n2.564876e+09\n0.00\n0.00\n15.49\n3.14\n\n\n1467\n1468\n688525\n佰维存储\n68.23\n0.84\n0.57\n35769.0\n2.428135e+08\n4.29\n69.50\n...\n1.11\n9.78\n-58.25\n12.79\n2.936136e+10\n2.495715e+09\n0.04\n0.59\n-7.86\n324.84\n\n\n1721\n1722\n000721\n西安饮食\n14.84\n0.61\n0.09\n638512.0\n9.559054e+08\n4.41\n15.28\n...\n1.04\n14.59\n-68.41\n16.80\n8.516888e+09\n6.492528e+09\n0.20\n-0.13\n24.60\n-14.22\n\n\n2056\n2057\n001337\n四川黄金\n33.65\n0.39\n0.13\n47121.0\n1.583902e+08\n1.67\n33.86\n...\n0.71\n7.85\n57.12\n11.68\n1.413300e+10\n2.019000e+09\n-0.06\n-0.03\n-10.86\n388.39\n\n\n3063\n3064\n002229\n鸿博股份\n37.60\n0.00\n0.00\n820189.0\n3.127857e+09\n7.63\n39.48\n...\n1.59\n16.63\n-256.67\n11.84\n1.873774e+10\n1.854298e+10\n0.21\n-0.19\n80.86\n465.41\n\n\n3347\n3348\n000638\n万方发展\n6.92\n-0.14\n-0.01\n161058.0\n1.116545e+08\n2.31\n7.04\n...\n0.63\n5.22\n-145.75\n12.06\n2.145308e+09\n2.136720e+09\n0.14\n-0.14\n18.49\n-2.12\n\n\n4294\n4295\n301205\n联特科技\n119.71\n-0.70\n-0.84\n31659.0\n3.829029e+08\n2.85\n122.80\n...\n1.12\n9.76\n146.62\n10.93\n1.553165e+10\n3.882914e+09\n-0.23\n-0.41\n43.66\n471.68\n\n\n5165\n5166\n002188\n中天服务\n7.03\n-1.95\n-0.14\n123300.0\n8.737047e+07\n4.04\n7.28\n...\n0.81\n5.12\n61.35\n16.00\n2.056546e+09\n1.693409e+09\n-0.42\n-0.14\n15.82\n-1.82\n\n\n5320\n5321\n000980\n众泰汽车\n4.54\n-2.78\n-0.13\n3177677.0\n1.477481e+09\n5.57\n4.77\n...\n0.91\n7.41\n-30.50\n10.18\n2.289317e+10\n1.946503e+10\n0.00\n0.22\n50.33\n6.57\n\n\n5356\n5357\n600322\n天房发展\n2.57\n-3.02\n-0.08\n1192838.0\n3.113317e+08\n10.57\n2.80\n...\n1.19\n10.79\n-5.06\n52.99\n2.841649e+09\n2.841649e+09\n0.00\n0.39\n32.47\n13.72\n\n\n5482\n5483\n000890\n法尔胜\n4.97\n-6.93\n-0.37\n784183.0\n3.950609e+08\n5.43\n5.21\n...\n1.45\n18.69\n-42.15\n152.54\n2.084935e+09\n2.084870e+09\n-0.20\n-0.20\n14.78\n29.09\n\n\n\n\n25 rows × 23 columns\n\n\n\nquery 也支持传入变量，使用 @ 传入：\n\npbr = 10\ntr = 5\ndata.query(\"市净率 &gt; @pbr & 换手率 &gt; @tr\")\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n2\n3\n301316\n慧博云通\n35.28\n16.44\n4.98\n243204.0\n8.215963e+08\n15.48\n36.36\n...\n2.83\n60.79\n272.02\n14.93\n1.411235e+10\n1.411551e+09\n-0.93\n-0.62\n56.24\n84.62\n\n\n3\n4\n300803\n指南针\n72.98\n15.86\n9.99\n472593.0\n3.234342e+09\n16.49\n74.40\n...\n2.17\n11.71\n129.84\n16.85\n2.979597e+10\n2.944736e+10\n-0.44\n-0.14\n43.63\n59.62\n\n\n41\n42\n300085\n银之杰\n15.15\n7.83\n1.10\n717622.0\n1.066523e+09\n7.97\n15.30\n...\n2.23\n13.61\n2190.93\n13.54\n1.070560e+10\n7.985455e+09\n1.00\n0.07\n6.32\n62.90\n\n\n57\n58\n300169\n天晟新材\n9.07\n6.96\n0.59\n1223194.0\n1.075750e+09\n14.03\n9.30\n...\n2.12\n40.54\n-52.88\n11.54\n2.956678e+09\n2.736744e+09\n-0.11\n-1.09\n124.50\n119.61\n\n\n73\n74\n601519\n大智慧\n9.80\n6.18\n0.57\n2269647.0\n2.135727e+09\n8.67\n9.84\n...\n1.81\n11.33\n16.23\n10.35\n1.979034e+10\n1.963788e+10\n0.10\n0.62\n23.12\n70.43\n\n\n107\n108\n603000\n人民网\n33.33\n5.11\n1.62\n900203.0\n2.976598e+09\n8.83\n34.14\n...\n1.82\n8.14\n335.03\n10.77\n3.685268e+10\n3.685268e+10\n-0.24\n0.03\n49.53\n99.46\n\n\n165\n166\n300033\n同花顺\n202.36\n4.36\n8.46\n151911.0\n3.033564e+09\n5.98\n203.60\n...\n1.56\n5.59\n118.43\n17.01\n1.087887e+11\n5.495009e+10\n0.29\n0.65\n16.46\n110.55\n\n\n195\n196\n002703\n浙江世宝\n18.28\n4.10\n0.72\n988900.0\n1.768065e+09\n10.19\n18.90\n...\n1.39\n17.88\n397.86\n10.30\n1.443470e+10\n1.010994e+10\n0.33\n0.33\n131.39\n97.20\n\n\n200\n201\n002316\n亚联发展\n5.87\n4.08\n0.23\n597904.0\n3.513069e+08\n8.51\n6.04\n...\n1.55\n18.98\n-117.32\n45.51\n2.307614e+09\n1.849094e+09\n-0.17\n-0.17\n36.83\n67.24\n\n\n216\n217\n300116\n保力新\n1.85\n3.93\n0.07\n3001463.0\n5.501457e+08\n8.43\n1.91\n...\n1.24\n7.31\n-224.78\n28.38\n8.187344e+09\n7.592120e+09\n-0.54\n-0.54\n18.59\n12.80\n\n\n392\n393\n300364\n中文在线\n15.94\n2.91\n0.45\n359913.0\n5.705417e+08\n5.23\n16.18\n...\n1.78\n5.54\n-78.15\n10.42\n1.163524e+10\n1.036182e+10\n0.06\n-0.06\n-29.93\n60.69\n\n\n610\n611\n300264\n佳创视讯\n6.81\n2.10\n0.14\n288241.0\n1.955477e+08\n3.90\n6.91\n...\n2.06\n8.09\n-60.95\n19.70\n2.934140e+09\n2.427766e+09\n-0.15\n-0.15\n7.24\n12.94\n\n\n787\n788\n002647\n仁东控股\n6.46\n1.73\n0.11\n520722.0\n3.352200e+08\n4.88\n6.58\n...\n1.97\n9.30\n-28.71\n23.19\n3.617191e+09\n3.617191e+09\n0.00\n-0.31\n9.86\n-4.01\n\n\n1297\n1298\n002269\n美邦服饰\n2.02\n1.00\n0.02\n1593140.0\n3.243042e+08\n6.50\n2.10\n...\n1.05\n6.34\n28.95\n17.46\n5.075250e+09\n5.075250e+09\n0.50\n0.00\n16.76\n0.00\n\n\n1378\n1379\n000908\n景峰医药\n3.28\n0.92\n0.03\n1327803.0\n4.356034e+08\n11.69\n3.52\n...\n4.97\n16.98\n564.21\n16.13\n2.885660e+09\n2.564876e+09\n0.00\n0.00\n15.49\n3.14\n\n\n1467\n1468\n688525\n佰维存储\n68.23\n0.84\n0.57\n35769.0\n2.428135e+08\n4.29\n69.50\n...\n1.11\n9.78\n-58.25\n12.79\n2.936136e+10\n2.495715e+09\n0.04\n0.59\n-7.86\n324.84\n\n\n1721\n1722\n000721\n西安饮食\n14.84\n0.61\n0.09\n638512.0\n9.559054e+08\n4.41\n15.28\n...\n1.04\n14.59\n-68.41\n16.80\n8.516888e+09\n6.492528e+09\n0.20\n-0.13\n24.60\n-14.22\n\n\n2056\n2057\n001337\n四川黄金\n33.65\n0.39\n0.13\n47121.0\n1.583902e+08\n1.67\n33.86\n...\n0.71\n7.85\n57.12\n11.68\n1.413300e+10\n2.019000e+09\n-0.06\n-0.03\n-10.86\n388.39\n\n\n3063\n3064\n002229\n鸿博股份\n37.60\n0.00\n0.00\n820189.0\n3.127857e+09\n7.63\n39.48\n...\n1.59\n16.63\n-256.67\n11.84\n1.873774e+10\n1.854298e+10\n0.21\n-0.19\n80.86\n465.41\n\n\n3347\n3348\n000638\n万方发展\n6.92\n-0.14\n-0.01\n161058.0\n1.116545e+08\n2.31\n7.04\n...\n0.63\n5.22\n-145.75\n12.06\n2.145308e+09\n2.136720e+09\n0.14\n-0.14\n18.49\n-2.12\n\n\n4294\n4295\n301205\n联特科技\n119.71\n-0.70\n-0.84\n31659.0\n3.829029e+08\n2.85\n122.80\n...\n1.12\n9.76\n146.62\n10.93\n1.553165e+10\n3.882914e+09\n-0.23\n-0.41\n43.66\n471.68\n\n\n5165\n5166\n002188\n中天服务\n7.03\n-1.95\n-0.14\n123300.0\n8.737047e+07\n4.04\n7.28\n...\n0.81\n5.12\n61.35\n16.00\n2.056546e+09\n1.693409e+09\n-0.42\n-0.14\n15.82\n-1.82\n\n\n5320\n5321\n000980\n众泰汽车\n4.54\n-2.78\n-0.13\n3177677.0\n1.477481e+09\n5.57\n4.77\n...\n0.91\n7.41\n-30.50\n10.18\n2.289317e+10\n1.946503e+10\n0.00\n0.22\n50.33\n6.57\n\n\n5356\n5357\n600322\n天房发展\n2.57\n-3.02\n-0.08\n1192838.0\n3.113317e+08\n10.57\n2.80\n...\n1.19\n10.79\n-5.06\n52.99\n2.841649e+09\n2.841649e+09\n0.00\n0.39\n32.47\n13.72\n\n\n5482\n5483\n000890\n法尔胜\n4.97\n-6.93\n-0.37\n784183.0\n3.950609e+08\n5.43\n5.21\n...\n1.45\n18.69\n-42.15\n152.54\n2.084935e+09\n2.084870e+09\n-0.20\n-0.20\n14.78\n29.09\n\n\n\n\n25 rows × 23 columns\n\n\n\n需要注意的是，对于非有效的 Python 变量名，可以用反引号（``）来使用。比如，如果查询列名为 Python 关键字，列名以数字开头等等：\n\ndata.query(\"`5分钟涨跌` &gt; 2\")\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n21\n22\n002670\n国盛金控\n10.87\n10.02\n0.99\n1185508.0\n1.220417e+09\n9.82\n10.87\n...\n2.43\n7.30\n116.41\n1.91\n2.103437e+10\n1.764582e+10\n0.93\n2.74\n31.44\n46.69\n\n\n173\n174\n000609\n中迪投资\n6.05\n4.31\n0.25\n355969.0\n2.107389e+08\n7.59\n6.19\n...\n1.20\n12.19\n-17.65\n3.31\n1.810556e+09\n1.767139e+09\n3.07\n3.07\n27.37\n-6.92\n\n\n273\n274\n001227\n兰州银行\n3.29\n3.46\n0.11\n2066487.0\n6.604521e+08\n6.92\n3.34\n...\n1.60\n7.47\n9.74\n0.58\n1.873884e+10\n9.107180e+09\n0.61\n3.13\n9.30\n-9.86\n\n\n669\n670\n603536\n惠发食品\n9.88\n1.96\n0.19\n426145.0\n4.303417e+08\n11.46\n10.66\n...\n6.82\n17.42\n-36.52\n5.05\n2.417066e+09\n2.417066e+09\n0.71\n2.60\n52.94\n23.81\n\n\n2123\n2124\n301505\n苏州规划\n68.62\n0.35\n0.24\n74915.0\n5.152134e+08\n10.92\n72.58\n...\n1.04\n38.00\n387.25\n6.27\n6.038560e+09\n1.352884e+09\n0.18\n3.09\n160.42\n160.42\n\n\n\n\n5 rows × 23 columns\n\n\n\n此外，根据官方文档，DataFrame 实例的 DataFrame.index 和 DataFrame.columns 属性也被放置在查询命名空间中，因此我们可以把表的索引当作列进行查询。如果索引命名了，可以使用索引的名称在查询中标识它，如果没有命名可以使用 index。比如，我们查询 data 数据集中索引为 0 的数据：\n\ndata.index\n\nRangeIndex(start=0, stop=5491, step=1)\n\n\n\ndata.query(\"index == 0\")\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n0\n1\n301299\n卓创资讯\n73.8\n20.0\n12.3\n68867.0\n4.661717e+08\n21.89\n73.8\n...\n3.59\n45.91\n65.23\n6.69\n4.428000e+09\n1.107000e+09\n0.0\n0.0\n42.88\n50.31\n\n\n\n\n1 rows × 23 columns\n\n\n\n列名的命名空间下的方法也可以在查询字符串中使用。比如，我们查询股票名称中包含银行的股票：\n\ndata.query(\"@data.名称.str.contains('银行')\")\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n140\n141\n601528\n瑞丰银行\n6.12\n4.62\n0.27\n473989.0\n2.803784e+08\n6.84\n6.16\n...\n1.93\n6.01\n8.22\n0.77\n1.200843e+10\n4.828292e+09\n0.00\n0.82\n6.07\n29.11\n\n\n273\n274\n001227\n兰州银行\n3.29\n3.46\n0.11\n2066487.0\n6.604521e+08\n6.92\n3.34\n...\n1.60\n7.47\n9.74\n0.58\n1.873884e+10\n9.107180e+09\n0.61\n3.13\n9.30\n-9.86\n\n\n533\n534\n601577\n长沙银行\n8.40\n2.31\n0.19\n126677.0\n1.058156e+08\n2.56\n8.43\n...\n1.69\n0.61\n4.27\n0.62\n3.378105e+10\n1.736789e+10\n0.24\n0.12\n6.87\n31.05\n\n\n642\n643\n601860\n紫金银行\n3.04\n2.01\n0.06\n1491979.0\n4.473756e+08\n3.36\n3.06\n...\n0.82\n4.25\n7.23\n0.66\n1.112937e+10\n1.066369e+10\n0.66\n1.00\n13.01\n22.09\n\n\n754\n755\n601658\n邮储银行\n5.07\n1.81\n0.09\n1068495.0\n5.420461e+08\n2.41\n5.13\n...\n1.09\n0.16\n4.78\n0.69\n5.027467e+11\n3.403105e+11\n0.20\n0.40\n-1.17\n16.28\n\n\n1002\n1003\n601998\n中信银行\n5.95\n1.36\n0.08\n328951.0\n1.952749e+08\n2.21\n6.01\n...\n0.80\n0.10\n3.80\n0.52\n2.913528e+11\n2.028040e+11\n0.34\n0.34\n-16.32\n27.96\n\n\n1006\n1007\n600036\n招商银行\n35.15\n1.36\n0.47\n559887.0\n1.967354e+09\n2.25\n35.50\n...\n1.02\n0.27\n5.71\n1.07\n8.864776e+11\n7.251074e+11\n0.34\n0.26\n7.62\n-1.04\n\n\n1219\n1220\n601916\n浙商银行\n2.78\n1.09\n0.03\n1486583.0\n4.107013e+08\n1.45\n2.78\n...\n1.02\n0.69\n3.39\n0.51\n7.635169e+10\n5.989353e+10\n0.72\n0.72\n-1.42\n8.17\n\n\n1223\n1224\n603323\n苏农银行\n4.65\n1.09\n0.05\n183906.0\n8.525758e+07\n1.30\n4.66\n...\n0.88\n1.19\n5.86\n0.59\n8.384290e+09\n7.178346e+09\n0.22\n0.22\n-0.85\n2.88\n\n\n1291\n1292\n600928\n西安银行\n4.01\n1.01\n0.04\n446377.0\n1.771269e+08\n2.77\n4.03\n...\n1.08\n1.32\n6.77\n0.61\n1.782222e+10\n1.354336e+10\n0.75\n1.01\n-12.64\n19.35\n\n\n1298\n1299\n002807\n江阴银行\n4.05\n1.00\n0.04\n234650.0\n9.476750e+07\n1.50\n4.07\n...\n0.93\n1.08\n7.09\n0.62\n8.796812e+09\n8.785079e+09\n0.00\n0.25\n2.53\n6.86\n\n\n1320\n1321\n002966\n苏州银行\n7.23\n0.98\n0.07\n254350.0\n1.842539e+08\n1.40\n7.28\n...\n1.67\n0.71\n5.11\n0.75\n2.651050e+10\n2.576672e+10\n0.00\n0.28\n0.84\n-2.95\n\n\n1330\n1331\n601128\n常熟银行\n7.28\n0.97\n0.07\n137774.0\n9.975656e+07\n1.39\n7.29\n...\n0.71\n0.52\n6.28\n0.91\n1.995362e+10\n1.924374e+10\n0.14\n0.14\n0.55\n-0.27\n\n\n1333\n1334\n601665\n齐鲁银行\n4.18\n0.97\n0.04\n192115.0\n8.002992e+07\n1.21\n4.19\n...\n0.99\n0.83\n4.71\n0.66\n1.914836e+10\n9.696622e+09\n0.24\n0.24\n0.97\n5.03\n\n\n1335\n1336\n601818\n光大银行\n3.14\n0.96\n0.03\n948768.0\n2.970643e+08\n1.29\n3.15\n...\n1.07\n0.20\n3.75\n0.44\n1.855286e+11\n1.457174e+11\n0.32\n0.32\n-2.48\n9.03\n\n\n1409\n1410\n002142\n宁波银行\n28.36\n0.89\n0.25\n350928.0\n1.004189e+09\n3.77\n29.09\n...\n0.98\n0.54\n7.10\n1.20\n1.872778e+11\n1.850048e+11\n0.14\n0.28\n5.66\n-11.24\n\n\n1435\n1436\n601997\n贵阳银行\n5.78\n0.87\n0.05\n266014.0\n1.533668e+08\n1.22\n5.80\n...\n0.96\n0.75\n3.29\n0.40\n2.113282e+10\n2.062897e+10\n0.52\n0.52\n1.40\n11.37\n\n\n1458\n1459\n601166\n兴业银行\n16.65\n0.85\n0.14\n432148.0\n7.205170e+08\n1.70\n16.80\n...\n0.94\n0.21\n3.44\n0.53\n3.458918e+11\n3.458918e+11\n0.12\n0.12\n3.29\n1.52\n\n\n1465\n1466\n002936\n郑州银行\n2.39\n0.84\n0.02\n896346.0\n2.139654e+08\n2.95\n2.42\n...\n0.93\n1.34\n4.57\n0.52\n2.173010e+10\n1.599653e+10\n0.00\n0.00\n7.17\n11.68\n\n\n1609\n1610\n600908\n无锡银行\n5.69\n0.71\n0.04\n93411.0\n5.296709e+07\n1.42\n5.71\n...\n0.77\n0.50\n5.59\n0.72\n1.223984e+10\n1.062139e+10\n0.35\n0.35\n2.34\n12.23\n\n\n1616\n1617\n601187\n厦门银行\n5.76\n0.70\n0.04\n107438.0\n6.153116e+07\n2.45\n5.81\n...\n0.67\n0.90\n5.27\n0.70\n1.520138e+10\n6.861415e+09\n0.35\n0.35\n3.23\n5.88\n\n\n1628\n1629\n600015\n华夏银行\n5.82\n0.69\n0.04\n169188.0\n9.833719e+07\n1.56\n5.86\n...\n0.83\n0.13\n3.96\n0.36\n9.262488e+10\n7.462804e+10\n0.17\n0.34\n2.11\n21.00\n\n\n1656\n1657\n600000\n浦发银行\n7.61\n0.66\n0.05\n246799.0\n1.875023e+08\n1.46\n7.65\n...\n1.00\n0.08\n3.53\n0.38\n2.233701e+11\n2.233701e+11\n0.13\n0.00\n3.12\n9.34\n\n\n1763\n1764\n601009\n南京银行\n8.63\n0.58\n0.05\n146409.0\n1.261561e+08\n1.28\n8.66\n...\n1.04\n0.16\n4.11\n0.72\n8.926642e+10\n7.950495e+10\n0.00\n0.12\n-1.15\n-12.74\n\n\n1779\n1780\n002948\n青岛银行\n3.51\n0.57\n0.02\n188059.0\n6.581560e+07\n1.43\n3.52\n...\n0.84\n0.60\n5.61\n0.69\n2.042945e+10\n1.091510e+10\n0.29\n0.29\n4.46\n9.69\n\n\n1784\n1785\n601288\n农业银行\n3.57\n0.56\n0.02\n2066464.0\n7.379460e+08\n1.41\n3.60\n...\n0.94\n0.06\n4.37\n0.56\n1.249439e+12\n1.139702e+12\n0.28\n0.28\n5.31\n32.71\n\n\n1873\n1874\n600016\n民生银行\n4.02\n0.50\n0.02\n758438.0\n3.045515e+08\n1.50\n4.04\n...\n1.29\n0.21\n3.09\n0.34\n1.760053e+11\n1.425577e+11\n0.50\n0.50\n1.26\n24.07\n\n\n1881\n1882\n601939\n建设银行\n6.06\n0.50\n0.03\n616958.0\n3.739653e+08\n1.49\n6.11\n...\n1.04\n0.64\n4.27\n0.54\n1.515067e+12\n5.813757e+10\n0.17\n0.00\n-2.73\n15.65\n\n\n1897\n1898\n601229\n上海银行\n6.19\n0.49\n0.03\n185581.0\n1.146588e+08\n0.97\n6.20\n...\n0.90\n0.13\n3.64\n0.44\n8.793927e+10\n8.571674e+10\n0.00\n0.16\n3.51\n12.34\n\n\n1901\n1902\n601963\n重庆银行\n8.32\n0.48\n0.04\n31049.0\n2.578411e+07\n1.21\n8.35\n...\n0.94\n0.45\n4.88\n0.64\n2.890833e+10\n5.752542e+09\n0.12\n0.36\n7.08\n30.20\n\n\n1982\n1983\n601169\n北京银行\n4.66\n0.43\n0.02\n368826.0\n1.717469e+08\n1.08\n4.68\n...\n0.99\n0.17\n3.29\n0.42\n9.852631e+10\n9.852631e+10\n0.22\n0.22\n4.25\n16.50\n\n\n2028\n2029\n000001\n平安银行\n12.38\n0.41\n0.05\n894323.0\n1.106321e+09\n2.60\n12.53\n...\n0.99\n0.46\n4.11\n0.65\n2.402453e+11\n2.402407e+11\n0.16\n0.24\n-1.43\n-3.88\n\n\n2276\n2277\n601988\n中国银行\n3.88\n0.26\n0.01\n1194744.0\n4.630856e+08\n1.55\n3.91\n...\n0.93\n0.06\n4.95\n0.55\n1.142225e+12\n8.177702e+11\n0.52\n0.26\n-4.90\n32.42\n\n\n2351\n2352\n601398\n工商银行\n4.73\n0.21\n0.01\n1482475.0\n7.027839e+08\n1.69\n4.78\n...\n0.98\n0.05\n4.67\n0.54\n1.685802e+12\n1.275266e+12\n0.21\n0.21\n0.00\n17.08\n\n\n2426\n2427\n601328\n交通银行\n5.72\n0.18\n0.01\n625151.0\n3.581830e+08\n1.58\n5.78\n...\n0.96\n0.16\n4.31\n0.50\n4.247828e+11\n2.245149e+11\n0.18\n0.18\n2.88\n30.89\n\n\n2496\n2497\n600919\n江苏银行\n7.26\n0.14\n0.01\n1205236.0\n8.765527e+08\n1.38\n7.32\n...\n1.19\n0.78\n3.31\n0.50\n1.126687e+11\n1.120762e+11\n0.00\n0.00\n1.97\n6.76\n\n\n2580\n2581\n600926\n杭州银行\n12.07\n0.08\n0.01\n169713.0\n2.048641e+08\n2.40\n12.23\n...\n1.12\n0.32\n4.22\n0.87\n7.157853e+10\n6.472832e+10\n0.42\n0.58\n-1.55\n-4.81\n\n\n3346\n3347\n601838\n成都银行\n13.84\n-0.14\n-0.02\n173413.0\n2.414914e+08\n2.60\n14.10\n...\n0.74\n0.46\n5.22\n0.97\n5.278453e+10\n5.267222e+10\n0.14\n0.22\n8.72\n-4.75\n\n\n\n\n38 rows × 23 columns"
  },
  {
    "objectID": "posts/2023-10-17-决策树算法/index.html",
    "href": "posts/2023-10-17-决策树算法/index.html",
    "title": "决策树算法",
    "section": "",
    "text": "信息量是对信息的度量，其大小与概率有关，概率越小，事件发生带来的信息量越大。因此信息量是概率的减函数，故选择 logp(x_i)^{-1} 来衡量信息量。\n信息熵是信息量的期望，衡量事件发生带来的平均信息。\n信息熵也用来评估样本集合的纯度。如果样本集合有很多类别，则样本的纯度就比较低，信息熵就越大；如果样本的集合的类别比较少，则样本的纯度就比较高，信息熵就越小。\n信息熵公式：\n\nH(X) = -\\sum_{i=1}^{n}p(x_i)logp(x_i)\n\n对联合分布 p(x,y)，Y 对 X 的条件熵是 Y 的条件分布的熵对 X 的数学期望。其公式为：\n\n\\begin{split}\nH(Y/X) &= \\sum_{i=1}^{n}p(x_i)(-\\sum_{j=1}^{m}p(y_j/x)logp(y_j/x)) \\\\\n&= -\\sum_{x \\in X} \\sum_{y \\in Y} p(x,y)logp(y/x)\n\\end{split}\n\n给定条件下的条件熵会变小，因为条件给了新的信息，系统的不确定性会减小。信息熵与条件熵的差值即为信息增益。\n信息增益法则的缺陷在于利用信息增益会倾向于选择特征取值较多的节点。特征取值较多，条件熵越小，信息增益越大。考虑极限情况，假设采用样本编号作为分类特征，那么每个编号唯一确定一个样本，条件熵为 0，信息增益最大。但这样的分类方式显然没有意义，不具备泛化能力。\n采用信息增益率作为评判属性分类的标准：\n\nGain\\_ratio(D, a) = \\frac{Gain(D,a)}{IV(a)}  \\\\\nIV(a) = -\\sum_{v=1}^{V}\\frac{D^v}{D}log\\frac{D^v}{D}\n\nIV(a) 被称为特征 a 的固有值，计算方式与信息熵的计算方式类似，衡量的是特征 a 的纯度。如果特征 a 的取值很多，那么 a 的纯度就很低，IV(a) 的取值就越大，最后得到的信息增益率就越低。\nIV(a) 是一个惩罚项，对类别较多的特征增加一个惩罚因子。采用信息增益率作为判定划分特征的方法被称为 C4.5。在实际中，C4.5 先通过一遍筛选，将信息增益低于平均水平的属性剔除掉，之后从剩下的属性中选择信息增益率最高的。"
  },
  {
    "objectID": "posts/2023-01-30-手把手教你做事件研究-公告爬取/index.html",
    "href": "posts/2023-01-30-手把手教你做事件研究-公告爬取/index.html",
    "title": "手把手教你做事件研究-公告爬取",
    "section": "",
    "text": "这篇博客（视频）记录从巨潮资讯爬取区块链技术投资相关的公告数据。 \n\nimport logging\nimport time\n\nimport numpy as np\nimport pandas as pd\nimport requests\n\nfrom concurrent.futures import ThreadPoolExecutor\n\n\ndef get_json(pagenum, s):\n    \"\"\"获取 json 数据\n\n    Args:\n        pagenum (str): page number\n        s (requests.Session): Session object\n\n    Returns:\n        res.json(): json data\n    \"\"\"\n    url = 'http://www.cninfo.com.cn/new/fulltextSearch/full?'\n    \n    headers = {\n        \"Accept-Encoding\": \"gzip\",\n        \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36\",\n        \"Connection\": \"keep-alive\",\n    }\n    \n    payload = {\n        'searchkey': '区块链',\n        'sdate': '2009-01-01',\n        'edate': '2022-01-01',\n        'isfulltext': 'true',\n        'sortName': 'pubdate',\n        'sortType': 'asc',\n        'type': 'shj',\n    }\n    \n    payload['pageNum'] = str(pagenum)\n    \n    try:\n        res = s.get(url, headers=headers, params=payload)\n    except Exception as e:\n        logging.warning(e)\n    \n\n    return res.json()\n\n\nwith requests.Session() as s:\n    page_one = pd.DataFrame(get_json(1, s)['announcements'])\n\n\npage_one.head()\n\n\n\n\n\n\n\n\nid\nsecCode\nsecName\norgId\nannouncementId\nannouncementTitle\nannouncementTime\nadjunctUrl\nadjunctSize\nadjunctType\nstorageTime\ncolumnId\npageColumn\nannouncementType\nassociateAnnouncement\nimportant\nbatchNum\nannouncementContent\norgName\nannouncementTypeName\n\n\n\n\n0\nNone\n000631\n顺发恒业\ngssz0000631\n49624621\n*ST 兰宝：重大资产出售、发行股份购买资产暨关联交易报告书（修订稿）\n1235773830000\nfinalpage/2009-02-28/49624621.PDF\n1749\nPDF\nNone\n01030101||010612\nSZZB\n01010501||01010701||010112||01170110\nNone\nNone\nNone\n（二）公司业绩持续下滑，且无改善迹象 由于个别银行发现公司资金&lt;em&gt;链&lt;/em&gt;紧张，逐步...\nNone\nNone\n\n\n1\nNone\n600596\n新安股份\ngssh0600596\n49988949\n新安股份：2008年年度报告\n1236637800000\nfinalpage/2009-03-10/49988949.PDF\n1711\nPDF\nNone\n01030103||01030404||010612||010613\nSHZB\n01010501||010113||01030101\nNone\nNone\nNone\n3.新安包装公司搬迁事项 因新安江桥东&lt;em&gt;区块&lt;/em&gt;旧城改造，新安包装公司于本期从老...\nNone\nNone\n\n\n2\nNone\n600267\n海正药业\ngssh0600267\n50367093\n海正药业：2008年年度股东大会会议资料\n1237501800000\nfinalpage/2009-03-20/50367093.PDF\n346\nPDF\nNone\n01030103||010612\nSHZB\n01010501||010113||011906\nNone\nNone\nNone\n100.00% 141,278 100.00% 115,132 100.00% 公司凭借原料...\nNone\nNone\n\n\n3\nNone\n002244\n滨江集团\n9900004730\n50327309\n滨江集团：2008年年度报告\n1237501800000\nfinalpage/2009-03-20/50327309.PDF\n867\nPDF\nNone\n01010302||01010306||01010410||01010411||010301...\nSZZB\n01010503||010112||010114||01030101\nNone\nNone\nNone\n江干科技经济园区地块开发协议书》（江科园协字【2006】035 号），约定就“S08、09、...\nNone\nNone\n\n\n4\nNone\n000301\n东方盛虹\ngssz0000301\n50432137\n东方市场：2008年年度报告\n1237847400000\nfinalpage/2009-03-24/50432137.PDF\n369\nPDF\nNone\n01030101||01030402||010612||010613\nSZZB\n01010501||010112||01030101\nNone\nNone\nNone\n公司将采取措施进一步完善产业&lt;em&gt;链&lt;/em&gt;，继续减少关联交易。\nNone\nNone\n\n\n\n\n\n\n\n\ncolumn = page_one.columns\n\n\ndef get_data_array(pagenum, s):\n    announcements_list = get_json(pagenum, s)['announcements']\n    return pd.DataFrame(announcements_list).values\n\n\npages = range(1, 1106)\nres =  []\nwith ThreadPoolExecutor(max_workers=10) as pool:\n    with requests.Session() as s:\n        futures = [pool.submit(get_data_array, pagenum, s) for pagenum in pages]\n        for future in futures:\n            res.extend(future.result())\n\n\nres_df = pd.DataFrame(res, columns=column)\n\n\nres_df.head()\n\n\n\n\n\n\n\n\nid\nsecCode\nsecName\norgId\nannouncementId\nannouncementTitle\nannouncementTime\nadjunctUrl\nadjunctSize\nadjunctType\nstorageTime\ncolumnId\npageColumn\nannouncementType\nassociateAnnouncement\nimportant\nbatchNum\nannouncementContent\norgName\nannouncementTypeName\n\n\n\n\n0\nNone\n000631\n顺发恒业\ngssz0000631\n49624621\n*ST 兰宝：重大资产出售、发行股份购买资产暨关联交易报告书（修订稿）\n1235773830000\nfinalpage/2009-02-28/49624621.PDF\n1749\nPDF\nNone\n01030101||010612\nSZZB\n01010501||01010701||010112||01170110\nNone\nNone\nNone\n（二）公司业绩持续下滑，且无改善迹象 由于个别银行发现公司资金&lt;em&gt;链&lt;/em&gt;紧张，逐步...\nNone\nNone\n\n\n1\nNone\n600596\n新安股份\ngssh0600596\n49988949\n新安股份：2008年年度报告\n1236637800000\nfinalpage/2009-03-10/49988949.PDF\n1711\nPDF\nNone\n01030103||01030404||010612||010613\nSHZB\n01010501||010113||01030101\nNone\nNone\nNone\n3.新安包装公司搬迁事项 因新安江桥东&lt;em&gt;区块&lt;/em&gt;旧城改造，新安包装公司于本期从老...\nNone\nNone\n\n\n2\nNone\n600267\n海正药业\ngssh0600267\n50367093\n海正药业：2008年年度股东大会会议资料\n1237501800000\nfinalpage/2009-03-20/50367093.PDF\n346\nPDF\nNone\n01030103||010612\nSHZB\n01010501||010113||011906\nNone\nNone\nNone\n100.00% 141,278 100.00% 115,132 100.00% 公司凭借原料...\nNone\nNone\n\n\n3\nNone\n002244\n滨江集团\n9900004730\n50327309\n滨江集团：2008年年度报告\n1237501800000\nfinalpage/2009-03-20/50327309.PDF\n867\nPDF\nNone\n01010302||01010306||01010410||01010411||010301...\nSZZB\n01010503||010112||010114||01030101\nNone\nNone\nNone\n江干科技经济园区地块开发协议书》（江科园协字【2006】035 号），约定就“S08、09、...\nNone\nNone\n\n\n4\nNone\n000301\n东方盛虹\ngssz0000301\n50432137\n东方市场：2008年年度报告\n1237847400000\nfinalpage/2009-03-24/50432137.PDF\n369\nPDF\nNone\n01030101||01030402||010612||010613\nSZZB\n01010501||010112||01030101\nNone\nNone\nNone\n公司将采取措施进一步完善产业&lt;em&gt;链&lt;/em&gt;，继续减少关联交易。\nNone\nNone\n\n\n\n\n\n\n\n\nres_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 11050 entries, 0 to 11049\nData columns (total 20 columns):\n #   Column                 Non-Null Count  Dtype \n---  ------                 --------------  ----- \n 0   id                     0 non-null      object\n 1   secCode                11050 non-null  object\n 2   secName                11050 non-null  object\n 3   orgId                  11050 non-null  object\n 4   announcementId         11050 non-null  object\n 5   announcementTitle      11050 non-null  object\n 6   announcementTime       11050 non-null  int64 \n 7   adjunctUrl             11050 non-null  object\n 8   adjunctSize            11050 non-null  int64 \n 9   adjunctType            11050 non-null  object\n 10  storageTime            0 non-null      object\n 11  columnId               11050 non-null  object\n 12  pageColumn             11050 non-null  object\n 13  announcementType       11050 non-null  object\n 14  associateAnnouncement  910 non-null    object\n 15  important              0 non-null      object\n 16  batchNum               0 non-null      object\n 17  announcementContent    11050 non-null  object\n 18  orgName                0 non-null      object\n 19  announcementTypeName   0 non-null      object\ndtypes: int64(2), object(18)\nmemory usage: 1.7+ MB\n\n\n\nraw_data = res_df.drop(\n    columns=['id', 'announcementId', 'adjunctSize', 'adjunctType', 'storageTime', 'columnId', 'pageColumn',\n             'announcementType', 'associateAnnouncement', 'important', 'batchNum', 'orgName', 'announcementTypeName'],\n)\n\n\nraw_data\n\n\n\n\n\n\n\n\nsecCode\nsecName\norgId\nannouncementTitle\nannouncementTime\nadjunctUrl\nannouncementContent\n\n\n\n\n0\n000631\n顺发恒业\ngssz0000631\n*ST 兰宝：重大资产出售、发行股份购买资产暨关联交易报告书（修订稿）\n1235773830000\nfinalpage/2009-02-28/49624621.PDF\n（二）公司业绩持续下滑，且无改善迹象 由于个别银行发现公司资金&lt;em&gt;链&lt;/em&gt;紧张，逐步...\n\n\n1\n600596\n新安股份\ngssh0600596\n新安股份：2008年年度报告\n1236637800000\nfinalpage/2009-03-10/49988949.PDF\n3.新安包装公司搬迁事项 因新安江桥东&lt;em&gt;区块&lt;/em&gt;旧城改造，新安包装公司于本期从老...\n\n\n2\n600267\n海正药业\ngssh0600267\n海正药业：2008年年度股东大会会议资料\n1237501800000\nfinalpage/2009-03-20/50367093.PDF\n100.00% 141,278 100.00% 115,132 100.00% 公司凭借原料...\n\n\n3\n002244\n滨江集团\n9900004730\n滨江集团：2008年年度报告\n1237501800000\nfinalpage/2009-03-20/50327309.PDF\n江干科技经济园区地块开发协议书》（江科园协字【2006】035 号），约定就“S08、09、...\n\n\n4\n000301\n东方盛虹\ngssz0000301\n东方市场：2008年年度报告\n1237847400000\nfinalpage/2009-03-24/50432137.PDF\n公司将采取措施进一步完善产业&lt;em&gt;链&lt;/em&gt;，继续减少关联交易。\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n11045\n600382\n*ST广珠\ngssh0600382\n*ST广珠：西部证券股份有限公司关于广东明珠集团股份有限公司重大资产出售及购买资产暨关联交易...\n1640707200000\nfinalpage/2021-12-29/1212047512.PDF\n、探矿权、采矿权规定方面，相关法律法规主要有《中华人民共和国矿产资源法》及其实施细则、《矿产...\n\n\n11046\n300164\n通源石油\n9900016228\n通源石油：关于2021年以简易程序向特定对象发行股票募集资金使用可行性分析报告（修订稿）\n1640776515000\nfinalpage/2021-12-29/1212055672.PDF\n公司是以油气田增产为核心的油服企业，业务涵盖钻井、定向、完井压裂、测井、射孔、带压作业、连续...\n\n\n11047\n300164\n通源石油\n9900016228\n通源石油：关于2021年以简易程序向特定对象发行股票方案论证分析报告（修订稿）\n1640776515000\nfinalpage/2021-12-29/1212055670.PDF\n公司是以油气田增产为核心的国际油服企业，业务涵盖钻井、定向、完井压裂、测井、射孔、带压作业、...\n\n\n11048\n300164\n通源石油\n9900016228\n通源石油：2021年以简易程序向特定对象发行股票预案（修订稿）\n1640776516000\nfinalpage/2021-12-29/1212055680.PDF\n公司是以油气田增产为核心的油服企业，业务涵盖钻井、定向、完井压裂、测井、射孔、带压作业、连续...\n\n\n11049\n300605\n恒锋信息\n9900030876\n恒锋信息：向不特定对象发行可转换公司债券之发行保荐书\n1640780703000\nfinalpage/2021-12-29/1212056530.PDF\n（二）技术创新风险 目前中国处于互联网、物联网、大数据、人工智能、&lt;em&gt;区块&lt;/em&gt;&lt;e...\n\n\n\n\n11050 rows × 7 columns\n\n\n\n\n# 去除 announcementTitle 和 announcementContent 里的 &lt;em&gt; 标签\ndef drop_em(c): \n    return c.replace('&lt;em&gt;', '').replace('&lt;/em&gt;', '')\n\ndata_drop_em = raw_data.copy()\ndata_drop_em.loc[:, 'announcementTitle'] = data_drop_em.loc[:, 'announcementTitle'].apply(lambda c : drop_em(c))\ndata_drop_em.loc[:, 'announcementContent'] = data_drop_em.loc[:, 'announcementContent'].apply(lambda c : drop_em(c))\n\n\ndata_drop_em.head()\n\n\n\n\n\n\n\n\nsecCode\nsecName\norgId\nannouncementTitle\nannouncementTime\nadjunctUrl\nannouncementContent\n\n\n\n\n0\n000631\n顺发恒业\ngssz0000631\n*ST 兰宝：重大资产出售、发行股份购买资产暨关联交易报告书（修订稿）\n1235773830000\nfinalpage/2009-02-28/49624621.PDF\n（二）公司业绩持续下滑，且无改善迹象 由于个别银行发现公司资金链紧张，逐步停止转贷并收缩银根...\n\n\n1\n600596\n新安股份\ngssh0600596\n新安股份：2008年年度报告\n1236637800000\nfinalpage/2009-03-10/49988949.PDF\n3.新安包装公司搬迁事项 因新安江桥东区块旧城改造，新安包装公司于本期从老厂区（新安江街道桥...\n\n\n2\n600267\n海正药业\ngssh0600267\n海正药业：2008年年度股东大会会议资料\n1237501800000\nfinalpage/2009-03-20/50367093.PDF\n100.00% 141,278 100.00% 115,132 100.00% 公司凭借原料...\n\n\n3\n002244\n滨江集团\n9900004730\n滨江集团：2008年年度报告\n1237501800000\nfinalpage/2009-03-20/50327309.PDF\n江干科技经济园区地块开发协议书》（江科园协字【2006】035 号），约定就“S08、09、...\n\n\n4\n000301\n东方盛虹\ngssz0000301\n东方市场：2008年年度报告\n1237847400000\nfinalpage/2009-03-24/50432137.PDF\n公司将采取措施进一步完善产业链，继续减少关联交易。\n\n\n\n\n\n\n\n\n# 将时间戳转化为日期\ndef transform_date(timeStamp):\n    timeStamp = int(str(timeStamp)[:-3])\n    timeArray = time.localtime(timeStamp)\n    return time.strftime(\"%Y-%m-%d\", timeArray)\n\ndata_time_transformed = data_drop_em.copy()\ndata_time_transformed.loc[:, 'announcementTime'] = data_time_transformed.loc[:, 'announcementTime'].apply(lambda c: transform_date(c))\ndata_time_transformed.head()\n\n\n\n\n\n\n\n\nsecCode\nsecName\norgId\nannouncementTitle\nannouncementTime\nadjunctUrl\nannouncementContent\n\n\n\n\n0\n000631\n顺发恒业\ngssz0000631\n*ST 兰宝：重大资产出售、发行股份购买资产暨关联交易报告书（修订稿）\n2009-02-28\nfinalpage/2009-02-28/49624621.PDF\n（二）公司业绩持续下滑，且无改善迹象 由于个别银行发现公司资金链紧张，逐步停止转贷并收缩银根...\n\n\n1\n600596\n新安股份\ngssh0600596\n新安股份：2008年年度报告\n2009-03-10\nfinalpage/2009-03-10/49988949.PDF\n3.新安包装公司搬迁事项 因新安江桥东区块旧城改造，新安包装公司于本期从老厂区（新安江街道桥...\n\n\n2\n600267\n海正药业\ngssh0600267\n海正药业：2008年年度股东大会会议资料\n2009-03-20\nfinalpage/2009-03-20/50367093.PDF\n100.00% 141,278 100.00% 115,132 100.00% 公司凭借原料...\n\n\n3\n002244\n滨江集团\n9900004730\n滨江集团：2008年年度报告\n2009-03-20\nfinalpage/2009-03-20/50327309.PDF\n江干科技经济园区地块开发协议书》（江科园协字【2006】035 号），约定就“S08、09、...\n\n\n4\n000301\n东方盛虹\ngssz0000301\n东方市场：2008年年度报告\n2009-03-24\nfinalpage/2009-03-24/50432137.PDF\n公司将采取措施进一步完善产业链，继续减少关联交易。\n\n\n\n\n\n\n\n\n# 拼接公告 url\ndef url_join(c):\n    return ''.join(['http://static.cninfo.com.cn/', c])\n\ndata_url_joined = data_time_transformed.copy()\ndata_url_joined.loc[:, 'adjunctUrl'] = data_url_joined.loc[:, 'adjunctUrl'].apply(lambda c: url_join(c))\ndata_url_joined.head()\n\n\n\n\n\n\n\n\nsecCode\nsecName\norgId\nannouncementTitle\nannouncementTime\nadjunctUrl\nannouncementContent\n\n\n\n\n0\n000631\n顺发恒业\ngssz0000631\n*ST 兰宝：重大资产出售、发行股份购买资产暨关联交易报告书（修订稿）\n2009-02-28\nhttp://static.cninfo.com.cn/finalpage/2009-02-...\n（二）公司业绩持续下滑，且无改善迹象 由于个别银行发现公司资金链紧张，逐步停止转贷并收缩银根...\n\n\n1\n600596\n新安股份\ngssh0600596\n新安股份：2008年年度报告\n2009-03-10\nhttp://static.cninfo.com.cn/finalpage/2009-03-...\n3.新安包装公司搬迁事项 因新安江桥东区块旧城改造，新安包装公司于本期从老厂区（新安江街道桥...\n\n\n2\n600267\n海正药业\ngssh0600267\n海正药业：2008年年度股东大会会议资料\n2009-03-20\nhttp://static.cninfo.com.cn/finalpage/2009-03-...\n100.00% 141,278 100.00% 115,132 100.00% 公司凭借原料...\n\n\n3\n002244\n滨江集团\n9900004730\n滨江集团：2008年年度报告\n2009-03-20\nhttp://static.cninfo.com.cn/finalpage/2009-03-...\n江干科技经济园区地块开发协议书》（江科园协字【2006】035 号），约定就“S08、09、...\n\n\n4\n000301\n东方盛虹\ngssz0000301\n东方市场：2008年年度报告\n2009-03-24\nhttp://static.cninfo.com.cn/finalpage/2009-03-...\n公司将采取措施进一步完善产业链，继续减少关联交易。\n\n\n\n\n\n\n\n\ndata_url_joined.to_csv('./data/raw_data.csv', index=False, encoding='utf_8_sig')"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html",
    "href": "posts/2020-02-03-golang-learning-notes/index.html",
    "title": "Golang学习笔记",
    "section": "",
    "text": "这篇博客记录 Golang 的学习笔记。"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#数组的定义",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#数组的定义",
    "title": "Golang学习笔记",
    "section": "1.1 数组的定义",
    "text": "1.1 数组的定义\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    // 使用var关键字定义\n    var a1 [4]int\n    fmt.Println(a1)\n    // ---&gt; [0 0 0 0]\n\n    var a2 = [4]int{}\n    fmt.Println(a2)\n    // ---&gt; [0 0 0 0]\n\n    // 使用{}传入值\n    var a3 = [4]int{9, 5, 2, 7}\n    fmt.Println(a3)\n    // ---&gt; [9 5 2 7]\n\n    // 使用...，编译器会自动推断数组的长度\n    a4 := [...]int{9, 5, 2, 7}\n    fmt.Println(a4, len(a4), cap(a4))\n    // ---&gt; [9 5 2 7] 4 4\n\n    // 使用：指明传入值的索引位置\n    a5 := [...]string{1:\"Luffy\", 4:\"Hancock\"}\n    fmt.Println(a5)\n    // ---&gt; [ Luffy   Hancock]\n\n    a5[0] = \"Nami\"\n    fmt.Println(a5)\n    // ---&gt; [Nami Luffy   Hancock]\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#数组的访问",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#数组的访问",
    "title": "Golang学习笔记",
    "section": "1.2 数组的访问",
    "text": "1.2 数组的访问\n数组通过下标索引来访问，语法与 python 类似。\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    a5 := [...]int{9, 5, 2, 7}\n    fmt.Printf(\"%p, %v\\n\", &a5, a5)\n    // ---&gt; 0xc0000ae000, [9 5 2 7]\n\n    a5[0] = 100\n    fmt.Printf(\"%p, %v\\n\", &a5, a5)\n    // ---&gt; 0xc0000ae000, [100 5 2 7]\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#数组的遍历",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#数组的遍历",
    "title": "Golang学习笔记",
    "section": "1.3 数组的遍历",
    "text": "1.3 数组的遍历\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    a6 := [...]string {\"Luffy\", \"Zoro\", \"Hancock\", \"Nami\", \"Robin\"}\n\n    for i:=0; i&lt;len(a6); i++ {\n        fmt.Println(a6[i])\n    }\n    // ---&gt; Luffy\n    // ---&gt; Zoro\n    // ---&gt; Hancock\n    // ---&gt; Nami\n    // ---&gt; Robin\n\n    // 使用range\n    for i,v := range a6 {\n        fmt.Println(i, v)\n    }\n    // ---&gt; 0 Luffy\n    // ---&gt; 1 Zoro\n    // ---&gt; 2 Hancock\n    // ---&gt; 3 Nami\n    // ---&gt; 4 Robin\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#多维数组",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#多维数组",
    "title": "Golang学习笔记",
    "section": "1.4 多维数组",
    "text": "1.4 多维数组\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    a7 := [3][4]int{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}}\n    fmt.Println(a7)\n    // ---&gt; [[1 2 3 4] [5 6 7 8] [9 10 11 12]]\n\n    a8 := [2][3][4]int{\n        {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}},\n        {{13, 14, 15, 16}, {17, 18, 19, 20}, {21, 22, 23, 24}},\n    }\n    fmt.Println(a8)\n    // ---&gt; [[[1 2 3 4] [5 6 7 8] [9 10 11 12]]\n    // ---&gt; [[13 14 15 16] [17 18 19 20] [21 22 23 24]]]\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#切片的定义",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#切片的定义",
    "title": "Golang学习笔记",
    "section": "2.1 切片的定义",
    "text": "2.1 切片的定义\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n\n    var s1 []int\n    fmt.Printf(\"%T, %v\\n\", s1, s1)\n    fmt.Println(len(s1), cap(s1)) // 打印长度和容量\n    // ---&gt; []int, []\n    // ---&gt; 0 0\n\n    var s2 = []int{1, 2, 3, 4, 5}\n    fmt.Printf(\"%T, %v\\n\", s2, s2)\n    fmt.Println(len(s2), cap(s2))\n    // ---&gt; []int, [1 2 3 4 5]\n    // ---&gt; 5 5\n\n    s3 := make([]int, 3, 5)\n    fmt.Println(s3, len(s3), cap(s3))\n    // ---&gt; [0 0 0] 3 5\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#切片的访问",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#切片的访问",
    "title": "Golang学习笔记",
    "section": "2.2 切片的访问",
    "text": "2.2 切片的访问\n\n当向切片中添加数据时，若添加的数量总和超过切片的容量，切片会自动扩容，且容量成倍增加\n切片扩容本质是指向了一个新的数组，原来的数组被系统自动回收\n\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n\n    s1 := make([]int, 0, 4)\n    fmt.Printf(\"%v, %p\\n\", s1, s1)\n    fmt.Printf(\"length:%d, capacity:%d\\n\", len(s1), cap(s1))\n    // ---&gt; [], 0xc0000b2000\n    // ---&gt; length:0, capacity:4\n\n    s1 = append(s1, 1, 2)\n    fmt.Printf(\"%v, %p\\n\", s1, s1)\n    fmt.Printf(\"length:%d, capacity:%d\\n\", len(s1), cap(s1))\n    // ---&gt; [1 2], 0xc0000b2000\n    // ---&gt; length:2, capacity:4\n    // 添加元素未超过容量，内存地址不变，依然是原来的数组\n\n    s1 = append(s1, 3, 4, 5)\n    fmt.Printf(\"%v, %p\\n\", s1, s1)\n    fmt.Printf(\"length:%d, capacity:%d\\n\", len(s1), cap(s1))\n    // ---&gt; [1 2 3 4 5], 0xc0000b6000\n    // ---&gt; length:5, capacity:8\n    // 添加元素超过容量，切片指向新的数组，容量成倍增加\n\n}\n从数组创建切片类似 python 的切片操作，使用 [a:b]，前闭后开。\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n\n    s1 := [8]int{1, 2, 3, 4, 5, 6, 7, 8}\n    s2 := s1[:]\n    fmt.Printf(\"%v, %p， %p\\n\", s2, &s1, s2)\n    fmt.Println(len(s2), cap(s2))\n    // ---&gt; [1 2 3 4 5 6 7 8], 0xc0000ae000， 0xc0000ae000\n    // ---&gt; 8 8\n\n    s3 := s1[0:3]\n    fmt.Printf(\"%v, %p, %p\\n\", s3, &s1, s3)\n    fmt.Println(len(s3), cap(s3))\n    // ---&gt; [1 2 3], 0xc0000ae000, 0xc0000ae000\n    // ---&gt; 3 8\n\n    s4 := s1[3:6]\n    fmt.Printf(\"%v, %p, %p\\n\", s4, &s1, s4)\n    fmt.Println(len(s4), cap(s4))\n    // ---&gt; [4 5 6], 0xc0000ae000, 0xc0000ae018\n    // ---&gt; 3 5\n    // 切片的长度即为截取的数组的长度，容量是从截取起始位置到数组末尾的长度\n    // 数组的地址是数组中首个元素的地址，s4由于截取的起始索引为3，所以s4的地址与s1不同\n}\n切片本质上是一种特殊的指针，存储的是底层数组的地址。\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n\n    s1 := [8]int{1, 2, 3, 4, 5, 6, 7, 8}\n    s2 := s1[:6]\n    s1[0] = 100\n    fmt.Printf(\"%p, %p\\n\", &s1, s2)\n    fmt.Println(s1, s2)\n    // ---&gt; 0xc00001e140, 0xc00001e140\n    // ---&gt; [100 2 3 4 5 6 7 8] [100 2 3 4 5 6]\n    // 切片指向底层数组，底层数组改变，切片相应改变\n\n    s2[3] = 50\n    fmt.Printf(\"%p, %p\\n\", &s1, s2)\n    fmt.Println(s1, s2)\n    // ---&gt; 0xc00001e140, 0xc00001e140\n    // ---&gt; [100 2 3 50 5 6 7 8] [100 2 3 50 5 6]\n    // 切片改变，也会导致底层数组改变\n\n    s2 = append(s2, 25)\n    fmt.Printf(\"%p, %p\\n\", &s1, s2)\n    fmt.Println(s1, s2)\n    // ---&gt; 0xc00001e140, 0xc00001e140\n    // ---&gt; [100 2 3 50 5 6 25 8] [100 2 3 50 5 6 25]\n\n}\n切片是引用类型。\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n\n    s1 := []int{1, 2, 3, 4}\n    s2 := s1\n    fmt.Println(s1, s2)\n    fmt.Printf(\"s1底层数组的地址:%p, s1的地址:%p\\n\", &s1, s1)\n    fmt.Printf(\"s2底层数组的地址:%p, s2的地址:%p\\n\", &s2, s2)\n    // ---&gt; [1 2 3 4] [1 2 3 4]\n    // ---&gt; s1底层数组的地址:0xc00000c060, s1的地址:0xc0000144a0\n    // ---&gt; s2底层数组的地址:0xc00000c080, s2的地址:0xc0000144a0\n    // s1，s2指向同一个底层数组\n\n    s1[0] = 100\n    fmt.Println(s1, s2)\n    fmt.Printf(\"s1底层数组的地址:%p, s1的地址:%p\\n\", &s1, s1)\n    fmt.Printf(\"s2底层数组的地址:%p, s2的地址:%p\\n\", &s2, s2)\n    // ---&gt; [100 2 3 4] [100 2 3 4]\n    // ---&gt; s1底层数组的地址:0xc00000c060, s1的地址:0xc0000144a0\n    // ---&gt; s2底层数组的地址:0xc00000c080, s2的地址:0xc0000144a0\n    // 改变s1，s2同时也会改变\n\n    s2[3] = 50\n    fmt.Println(s1, s2)\n    fmt.Printf(\"s1底层数组的地址:%p, s1的地址:%p\\n\", &s1, s1)\n    fmt.Printf(\"s2底层数组的地址:%p, s2的地址:%p\\n\", &s2, s2)\n    // ---&gt; [100 2 3 50] [100 2 3 50]\n    // ---&gt; s1底层数组的地址:0xc00000c060, s1的地址:0xc0000144a0\n    // ---&gt; s2底层数组的地址:0xc00000c080, s2的地址:0xc0000144a0\n    // 改变s2，s1同时也会改变\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#map-的定义",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#map-的定义",
    "title": "Golang学习笔记",
    "section": "3.1 map 的定义",
    "text": "3.1 map 的定义\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    var m1 map[string]int\n    fmt.Printf(\"%T, %v\\n\", m1, m1)\n    // ---&gt; map[string]int, map[]\n    // 这种定义方式，m1并未初始化，是nil类型，不能直接赋值\n    m1[\"Jay\"] = 1\n    // ---&gt; panic: assignment to entry in nil map\n\n    var m2 = map[string]int{\"Jay\": 1, \"Edison\": 2, \"Luffy\": 3}\n    fmt.Printf(\"%T, %v\\n\", m2, m2)\n    // ---&gt; map[string]int, map[Edison:2 Jay:1 Luffy:3]\n\n    m3 := map[string]int{\"Jay\": 1, \"Edison\": 2, \"Luffy\": 3}\n    fmt.Printf(\"%T, %v\\n\", m3, m3)\n    // ---&gt; map[string]int, map[Edison:2 Jay:1 Luffy:3]\n\n    // 使用make函数\n    m4 := make(map[string]int)\n    fmt.Printf(\"%T, %v\\n\", m4, m4)\n    // ---&gt; map[string]int, map[]\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#map-的访问",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#map-的访问",
    "title": "Golang学习笔记",
    "section": "3.2 map 的访问",
    "text": "3.2 map 的访问\nmap 使用 key 进行访问与赋值\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    m5 := make(map[int]string)\n    m5[1] = \"Jay\"\n    m5[2] = \"Edison\"\n    m5[3] = \"Luffy\"\n    m5[4] = \"Perl\"\n    m5[5] = \"Mads\"\n    m5[6] = \"Joker\"\n    fmt.Println(m5)\n    // map[1:Jay 2:Edison 3:Luffy 4:Perl 5:Mads 6:Joker]\n\n    fmt.Println(m5[3])\n    // Luffy\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#map-的遍历",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#map-的遍历",
    "title": "Golang学习笔记",
    "section": "3.3 map 的遍历",
    "text": "3.3 map 的遍历\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    m6 := map[string]string{\"name\":\"Luffy\", \"sex\":\"male\", \"age\":\"18\", \"address\":\"East blue\"}\n    for k,v := range m6 {\n        fmt.Printf(\"%s : %s\\n\", k, v)\n    }\n}\n// ---&gt; name : Luffy\n// ---&gt; sex : male\n// ---&gt; age : 18\n// ---&gt; address : East blue"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#指针的定义",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#指针的定义",
    "title": "Golang学习笔记",
    "section": "4.1 指针的定义",
    "text": "4.1 指针的定义\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    var p1 *[4]int\n    fmt.Println(p1)\n    // ---&gt; &lt;nil&gt; // &lt;nil&gt;表示空指针\n    a := [4]int{1, 2, 3, 4}\n    p1 = &a // &为取地址符\n    fmt.Println(p1)\n    // ---&gt; &[1 2 3 4]\n    fmt.Printf(\"%p, %p\\n\", p1, &p1) // 第一个占位符表示p1保存的地址，第二个占位符表示p1自身的地址\n    // ---&gt; 0xc0000b0000, 0xc0000a8018\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#指针的访问",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#指针的访问",
    "title": "Golang学习笔记",
    "section": "4.2 指针的访问",
    "text": "4.2 指针的访问\ngo 语言中使用 * 来取指针所保存的内存地址指向的变量值。\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    var p2 *[4]string\n    a2 := [4]string {\"Luffy\", \"Hancock\", \"Zoro\", \"Nami\"}\n\n    p2 = &a2\n    fmt.Println(*p2)\n    // ---&gt; [Luffy Hancock Zoro Nami]\n\n    (*p2)[0] = \"Robin\"\n    fmt.Println(p2)\n    // ---&gt; &[Robin Hancock Zoro Nami]\n    fmt.Println(a2)\n    // ---&gt; [Robin Hancock Zoro Nami]\n\n    p2[2] = \"Shanks\" // 简化写法\n    fmt.Println(p2)\n    // ---&gt; &[Robin Hancock Shanks Nami]\n    fmt.Println(a2)\n    // ---&gt; [Robin Hancock Shanks Nami]\n\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#指针的指针",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#指针的指针",
    "title": "Golang学习笔记",
    "section": "4.3 指针的指针",
    "text": "4.3 指针的指针\n指针的指针，顾名思义，该指针中保存的是另一个指针的地址。\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    var ptr *[4]int\n    var pptr **[4]int\n\n    a := [4]int{1, 2, 3, 4}\n    ptr = &a\n    pptr = &ptr\n\n    fmt.Println(a)\n    // ---&gt; [1 2 3 4]\n    fmt.Println(ptr, *ptr)\n    // ---&gt; &[1 2 3 4] [1 2 3 4]\n    fmt.Println(pptr, *pptr)\n    // ---&gt; 0xc0000a8018 &[1 2 3 4]\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#函数的定义",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#函数的定义",
    "title": "Golang学习笔记",
    "section": "5.1 函数的定义",
    "text": "5.1 函数的定义\nfunc funcName(p1 type, p2 type)(v1 type, v2 type) {\n    // 函数体\n    return v1, v2\n}\n\n// eg:\nfunc add(num1, num2 int)int {\n    return num1+num2\n}\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Printf(\"%T, %p\\n\", print, print)\n    // ---&gt; func(), 0x48eb50 // 函数体的地址\n\n    var x func()\n    x = print // 将print的值（函数体的地址）赋值给x\n    x()\n    // ---&gt; Nami is alse good!\n}\n\nfunc print() {\n    fmt.Println(\"Nami is alse good!\")\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#函数的参数",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#函数的参数",
    "title": "Golang学习笔记",
    "section": "5.2 函数的参数",
    "text": "5.2 函数的参数\n\n5.2.1 可变参数\n\n可变参数本质上是一个切片\n在参数列表中，可变参数应放在最后\n可变参数至多只能有一个\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    add1()\n    // ---&gt; []int\n    // 可变参数实质上是一个slice\n\n    s := []int{1, 2, 3, 4, 5, 6}\n    x := add2(s...) // 使用...提取slice中的元素\n    fmt.Println(x)\n    // ---&gt; 21\n}\n\nfunc add1(num ...int) {\n    fmt.Printf(\"%T\\n\", num)\n}\n\nfunc add2(num ...int) int {\n    sum := 0\n    for _, v := range num {\n        sum = sum + v\n    }\n\n    return sum\n}\n\n\n5.2.2 参数传递\n值传递，值传递传递的是参数的副本。值类型的数据默认都是值传递：基本数据类型、array、struct。\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    arr := [4]int{1, 2, 3, 4}\n    fmt.Printf(\"%p, %v\\n\", &arr, arr)\n    // ---&gt; 0xc0000ae000, [1 2 3 4]\n\n    change(arr)\n    // ---&gt; 0xc0000ae060\n    // ---&gt; [10000 2 3 4]\n\n    fmt.Println(arr)\n    // ---&gt; [1 2 3 4]\n}\n\nfunc change(a [4]int) {\n    fmt.Printf(\"%p\\n\", &a)\n    a[0] = 10000\n    fmt.Println(a)\n}\n引用传递，引用传递传递的是参数的地址。引用类型的数据默认都是引用传递：slice、map、chan。\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    slice := []int{1, 2, 3, 4}\n    fmt.Println(slice)\n    // ---&gt; [1 2 3 4]\n\n    change(slice)\n    // ---&gt; [10000 2 3 4]\n\n    fmt.Println(slice)\n    // ---&gt; [10000 2 3 4]\n}\n\nfunc change(s []int) {\n    s[0] = 10000\n    fmt.Println(s)\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#递归函数",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#递归函数",
    "title": "Golang学习笔记",
    "section": "5.3 递归函数",
    "text": "5.3 递归函数\nfunc fibonacci(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return fibonacci(n-1) + fibonacci(n-2)\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#defer-语句",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#defer-语句",
    "title": "Golang学习笔记",
    "section": "5.4 defer 语句",
    "text": "5.4 defer 语句\ndefer 语句可以用来延迟一个函数或者方法的执行。当存在多个延迟调用时，它们被添加到一个堆栈中，遵循后进先出的原则执行。\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    defer print()\n    defer print2()\n    fmt.Println(\"Hancock is good!\")\n    // ---&gt; Hancock is good!\n    // ---&gt; Robin is good! // LIFO\n    // ---&gt; Nami is also good!\n}\n\nfunc print() {\n    fmt.Println(\"Nami is also good!\")\n}\n\nfunc print2() {\n    fmt.Println(\"Robin is good!\")\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#匿名函数",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#匿名函数",
    "title": "Golang学习笔记",
    "section": "5.5 匿名函数",
    "text": "5.5 匿名函数\n\n匿名函数可以作为另一个函数的参数，也叫回调函数\n匿名函数可以作为另一个函数的返回值，也叫闭包结构\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    func () {\n        fmt.Println(\"Hancock!\")\n    }()\n    // ---&gt; Hancock!\n\n    fun1 := func () {\n        fmt.Println(\"Nami!\")\n    }\n    fun1()\n    // ---&gt; Nami!\n\n    // 带参数与返回值的匿名函数\n    res := func (a, b int) int {\n        return a+b\n    }(1, 2)\n    fmt.Println(res)\n    // ---&gt; 3\n}\n作为一个函数参数的函数就叫做回调函数。\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    res := opr(1, 2, add)\n    fmt.Println(res)\n    // ---&gt; 3\n}\n\nfunc add(a, b int) int {\n    return a + b\n}\n\nfunc opr(a, b int, fun func(int,int)int) int {\n    return fun(a, b)\n}\n使用匿名函数作为回调函数。\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    add := func(a, b int) int {\n        return a + b\n    }\n    res := opr(1, 2, add)\n    fmt.Println(res)\n    // ---&gt; 3\n\n    res2 := opr(1, 2, func(a, b int) int {\n        return a + b\n    })\n    fmt.Println(res2)\n    // ---&gt; 3\n}\n\nfunc opr(a, b int, fun func(int, int) int) int {\n    return fun(a, b)\n}\n一个外层函数有内层函数，内层函数会操作外层函数的局部变量（外层函数的参数，或者外层函数定义的局部变量），并且该外层函数的返回值就是这个内层函数，那么这个内层函数和外层函数的局部变量就统称为闭包结构。\n闭包中局部变量的生命周期会发生改变。正常的局部变量会随着外层函数的调用而创建，随着外层函数的结束而销毁。但是闭包结构中外层函数的局部变量不会随着外层函数的结束而销毁，因为内层函数还要继续使用。\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    fmt.Printf(\"%p\\n\", increment)\n    // ---&gt; 0x48f0f0 // 函数名所指向的函数体的地址\n    res1 := increment()\n    fmt.Printf(\"%p, %p\\n\", res1, &res1)\n    // ---&gt; 0x48f190, 0xc00000e030 // 内层函数体的地址， res1变量的地址\n    fmt.Println(res1())\n    // ---&gt; 1\n    fmt.Println(res1())\n    // ---&gt; 2\n    fmt.Println(res1())\n    // ---&gt; 3\n\n    res2 := increment()\n    fmt.Println(res2())\n    // ---&gt; 1\n    fmt.Println(res2())\n    // ---&gt; 2\n\n    fmt.Println(res1())\n    // ---&gt; 4\n\n    var fun func() func() int\n    fun = increment\n    fmt.Printf(\"%p\\n\", fun)\n    // ---&gt; 0x48f0f0\n    fmt.Printf(\"%p\\n\", &fun)\n    // ---&gt; 0xc00000e038\n\n    fun2 := increment\n    fmt.Printf(\"%p\\n\", fun2)\n    // ---&gt; 0x48f0f0\n    fmt.Printf(\"%p\\n\", &fun2)\n    // ---&gt; 0xc00000e040\n\n}\n\nfunc increment() func() int {\n    i := 0 //这个外层函数的局部变量，是内层函数的全局变量\n    return func() int {\n        i++\n        return i\n    }\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#结构体的定义",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#结构体的定义",
    "title": "Golang学习笔记",
    "section": "6.1 结构体的定义",
    "text": "6.1 结构体的定义\n// 结构体使用type和struct关键字来进行声明\ntype Person struct {\n    name string\n    sex string\n    age int\n    address string\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#结构体的初始化与访问",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#结构体的初始化与访问",
    "title": "Golang学习笔记",
    "section": "6.2 结构体的初始化与访问",
    "text": "6.2 结构体的初始化与访问\n// 结构体使用.操作符来进行访问\n// 使用var关键字初始化\nvar P1 Person\np1.name = \"Jay\"\np1.sex = \"male\"\np1.age = \"41\"\np1.address = \"Taibei\"\n\n// 类似简短声明\np2 := Person{}\np2.name = \"Zoro\"\np2.sex = \"male\"\np2.age = \"20\"\np2.address = \"East Blue\"\n\n// 按照field:value的方式提供初始化的值\np3 := Person{\n    name ： \"Luffy\",\n    sex ： \"male\",\n    age ： 18,\n    address : \"East Blue\",\n}\n\n// 按照顺序提供初始化的值\np4 := Person{\"Hancock\", \"female\", 29, \"East Blue\"}\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    p1 := Person{\n        name:    \"Hancock\",\n        sex:     \"female\",\n        age:     29,\n        address: \"East Blue\",\n    }\n\n    fmt.Println(p1)\n    // ---&gt; {Hancock female 29 East Blue}\n    // 结构体使用.操作符来进行访问\n    p1.age = 31\n    fmt.Println(p1)\n    // ---&gt; {Hancock female 31 East Blue}\n}\n\ntype Person struct {\n    name    string\n    sex     string\n    age     int\n    address string\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#结构体指针",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#结构体指针",
    "title": "Golang学习笔记",
    "section": "6.3 结构体指针",
    "text": "6.3 结构体指针\npackage main\n\nimport(\n    \"fmt\"\n)\n\nfunc main() {\n    p1 := Person {\n        name : \"Hancock\",\n        sex : \"female\",\n        age : 29,\n        address : \"East Blue\",\n    }\n\n    var pp1 *Person\n    pp1 = &p1\n    fmt.Printf(\"%p, %T\\n\", pp1, pp1)\n    // ---&gt; 0xc0000240c0, *main.Person\n    fmt.Println(*pp1)\n    // ---&gt; {Hancock female 29 East Blue}\n\n    // 使用指针修改数据\n    (*pp1).name = \"Nami\"\n    fmt.Println(pp1, p1)\n    // ---&gt; &{Nami female 29 East Blue} {Nami female 29 East Blue}\n    // 简写\n    pp1.name = \"Robin\"\n    fmt.Println(pp1, p1)\n    // ---&gt; &{Robin female 29 East Blue} {Robin female 29 East Blue}\n\n    // 使用new函数创建指针\n    // new函数指向了新开辟的内存空间，里面存储的是0值\n    pp2 := new(Person)\n    fmt.Printf(\"%T\\n\", pp2)\n    // ---&gt; *main.Person\n    fmt.Println(pp2)\n    // ---&gt; &{  0 }\n\n    pp2.name = \"Luffy\"\n    pp2.sex = \"male\"\n    pp2.age = 18\n    pp2.address = \"East Blue\"\n    fmt.Println(pp2)\n    // ---&gt; &{Luffy male 18 East Blue}\n}\n\ntype Person struct {\n    name string\n    sex string\n    age int\n    address string\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#匿名结构体与匿名字段",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#匿名结构体与匿名字段",
    "title": "Golang学习笔记",
    "section": "6.4 匿名结构体与匿名字段",
    "text": "6.4 匿名结构体与匿名字段\npackage main\n\nimport(\n    \"fmt\"\n)\n\nfunc main() {\n    // 匿名结构体\n    p1 := struct {\n        name string\n        sex string\n        age int\n        address string\n    } {\n        name : \"Hancock\",\n        sex : \"female\",\n        age : 29,\n        address : \"East Blue\",\n    }\n    fmt.Println(p1)\n    // ---&gt; {Hancock female 29 East Blue}\n\n    // 结构体使用匿名字段时，默认使用字段类型作为field，因此字段类型不能重复\n    p2 := Person {\"Hancock\", 29}\n    fmt.Println(p2)\n    // ---&gt; {Hancock 29}\n    fmt.Println(p2.string)\n    // ---&gt; Hancock\n\n    // 同时使用匿名结构体和匿名字段\n    p3 := struct {\n        string\n        int\n    } {\n        \"Hancock\",\n        29,\n    }\n    fmt.Println(p3)\n    // ---&gt; {Hancock 29}\n    fmt.Println(p3.string)\n    // ---&gt; Hancock\n}\n\ntype Person struct {\n    string\n    int\n}"
  },
  {
    "objectID": "posts/2020-02-03-golang-learning-notes/index.html#结构体嵌套",
    "href": "posts/2020-02-03-golang-learning-notes/index.html#结构体嵌套",
    "title": "Golang学习笔记",
    "section": "6.5 结构体嵌套",
    "text": "6.5 结构体嵌套\npackage main\n\nimport(\n    \"fmt\"\n)\n\nfunc main() {\n    p1 := Person {\n        name : Name {\n            firstName : \"Hancock\",\n            lastName : \"Boa\",\n        },\n        sex : \"female\",\n        age : 29,\n        address : \"East Blue\",\n    }\n\n    fmt.Printf(\"姓：%s，名：%s，性别：%s，年龄：%d，地址：%s\\n\", p1.name.lastName, p1.name.firstName, p1.sex, p1.age, p1.address)\n    // ---&gt; 姓：Boa，名：Hancock，性别：female，年龄：29，地址：East Blue\n}\n\ntype Name struct {\n    firstName string\n    lastName string\n}\n\ntype Person struct {\n    name Name\n    sex string\n    age int\n    address string\n}\n由于结构体是值类型，因此在嵌套时也可以选择嵌套结构体指针，可以保持数据的一致性，同时节省内存。\npackage main\n\nimport(\n    \"fmt\"\n)\n\nfunc main() {\n    n1 := Name {\n        firstName : \"Hancock\",\n        lastName : \"Boa\",\n    }\n\n    p1 := Person {\n        name : &n1,\n        sex : \"female\",\n        age : 29,\n        address : \"East Blue\",\n    }\n\n    fmt.Printf(\"姓：%s，名：%s，性别：%s，年龄：%d，地址：%s\\n\", p1.name.lastName, p1.name.firstName, p1.sex, p1.age, p1.address)\n    // ---&gt; 姓：Boa，名：Hancock，性别：female，年龄：29，地址：East Blue\n\n    p1.name.lastName = \"Monkey D\"\n    fmt.Println(n1)\n    // 修改p1，n1同时改变，数据保持一致\n    // ---&gt; {Hancock Monkey D}\n}\n\ntype Name struct {\n    firstName string\n    lastName string\n}\n\ntype Person struct {\n    name *Name // 传入指针\n    sex string\n    age int\n    address string\n}\n假如说结构体中同时包含匿名字段与非匿名字段，特别的，当匿名字段为指针时，在实例化结构体时要给匿名字段加上字段名，且该字段名就是指针对应的类型，否则会报错 mixture of field:value and value initializers 。\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    hancock := Person{\n        name:   \"Hancock\",\n        age:    29,\n        gender: \"female\",\n    }\n    var han *Person = &hancock\n    hanworker := Worker{\n        Person: han, // 要用指针对应的类型作为字段名\n        skill:  \"bj\",\n        salary: 200,\n    }\n\n    fmt.Println(hanworker)\n}\n\ntype Person struct {\n    name   string\n    age    int\n    gender string\n}\n\ntype Worker struct {\n    *Person\n    skill  string\n    salary int\n}"
  },
  {
    "objectID": "posts/2023-08-03-Pandas-Tips-使用merge实现关系型合并/index.html",
    "href": "posts/2023-08-03-Pandas-Tips-使用merge实现关系型合并/index.html",
    "title": "Pandas Tips: 使用merge实现关系型合并",
    "section": "",
    "text": "Pandas 中提供了 merge 函数实现关系型合并。\ndf1.merge(df2, how='inner', on=None, left_on=None, right_on=None, \n         left_index=False, right_index=False, sort=False, \n         suffixes=('_x', '_y'), copy=None, indicator=False, validate=None)\n主要参数含义：\n\ndf2：待合并的 DataFrame 或者 Series\nhow：合并方式\n\nleft：左连接，合并后显示 df1 的所有行\nright：右连接，合并后显示 df2 的所有行\nouter：外连接，合并后显示 df1、df2 的所有行\ninner：内连接，合并后显示 df1、df2 的共有行\ncross：交叉连接，合并后显示 df1、df2 的笛卡尔积\n\non：列名或者索引名，df1 和 df2 合并的键\nleft_on、right_on：当 df1 和 df2 待合并的键在表中的名称不一样时，可分别指定\nleft_index、right_index：布尔变量，是否使用索引进行合并\nsuffixes：列表类型。如果两张表中有相同的列名，suffixes 为合并表的列名提供了后缀\n\n\nimport numpy as np\nimport pandas as pd\n\n\n# create some toy data\ndf1 = pd.DataFrame({'Date': pd.date_range('2023-08-01', periods=5),\n                    'Company': ['A', 'B', 'C', 'D', 'E'],\n                    'Close': [20, 23, 21, 22, 20]})\ndf2 = pd.DataFrame({'Date': pd.date_range('2023-08-03', periods=5),\n                    'Firm': ['C', 'D', 'E', 'F', 'G'],\n                    'Volume': [100, 101, 120, 110, 105]})\n\n\ndf1\n\n\n\n\n\n\n\n\nDate\nCompany\nClose\n\n\n\n\n0\n2023-08-01\nA\n20\n\n\n1\n2023-08-02\nB\n23\n\n\n2\n2023-08-03\nC\n21\n\n\n3\n2023-08-04\nD\n22\n\n\n4\n2023-08-05\nE\n20\n\n\n\n\n\n\n\n\ndf2\n\n\n\n\n\n\n\n\nDate\nFirm\nVolume\n\n\n\n\n0\n2023-08-03\nC\n100\n\n\n1\n2023-08-04\nD\n101\n\n\n2\n2023-08-05\nE\n120\n\n\n3\n2023-08-06\nF\n110\n\n\n4\n2023-08-07\nG\n105\n\n\n\n\n\n\n\nmerge 默认使用内连接（inner），如果不指定合并的键，默认使用两张表中共同的列作合并，df1 和 df2 共同的列是 date，合并后显示共有的 date：\n\ndf1.merge(df2)\n\n\n\n\n\n\n\n\nDate\nCompany\nClose\nFirm\nVolume\n\n\n\n\n0\n2023-08-03\nC\n21\nC\n100\n\n\n1\n2023-08-04\nD\n22\nD\n101\n\n\n2\n2023-08-05\nE\n20\nE\n120\n\n\n\n\n\n\n\n使用 left_on 和 right_on 参数可以指定两张表做合并的键，下面指定使用 df1 中的 Company 和 df2 中的 Firm 来做合并：\n\ndf1.merge(df2, \n          left_on='Company', \n          right_on='Firm')\n\n\n\n\n\n\n\n\nDate_x\nCompany\nClose\nDate_y\nFirm\nVolume\n\n\n\n\n0\n2023-08-03\nC\n21\n2023-08-03\nC\n100\n\n\n1\n2023-08-04\nD\n22\n2023-08-04\nD\n101\n\n\n2\n2023-08-05\nE\n20\n2023-08-05\nE\n120\n\n\n\n\n\n\n\n由于 df1 和 df2 中都有 Date 这一列，为了加以区分，Pandas 自动给两张表中的 Date 加了后缀，我们可以使用 suffixes 参数来自定义后缀：\n\ndf1.merge(df2,\n          left_on='Company', \n          right_on='Firm',\n          suffixes=['_1', '_2'])\n\n\n\n\n\n\n\n\nDate_1\nCompany\nClose\nDate_2\nFirm\nVolume\n\n\n\n\n0\n2023-08-03\nC\n21\n2023-08-03\nC\n100\n\n\n1\n2023-08-04\nD\n22\n2023-08-04\nD\n101\n\n\n2\n2023-08-05\nE\n20\n2023-08-05\nE\n120\n\n\n\n\n\n\n\n但是既然两张表里都有 Date 这一列，最好的方式是使用多键合并：\n\ndf1.merge(df2, \n          left_on=['Date', 'Company'], \n          right_on=['Date','Firm'])\n\n\n\n\n\n\n\n\nDate\nCompany\nClose\nFirm\nVolume\n\n\n\n\n0\n2023-08-03\nC\n21\nC\n100\n\n\n1\n2023-08-04\nD\n22\nD\n101\n\n\n2\n2023-08-05\nE\n20\nE\n120\n\n\n\n\n\n\n\n使用 how 参数可以指定合并的方式，left 表示左连接，合并后显示 df1 的所有行，df2 中没有 2023-08-01 和 2023-08-02 两天，则对应的 Firm 和 Volume 显示为空值。\n\ndf1.merge(df2, how='left')\n\n\n\n\n\n\n\n\nDate\nCompany\nClose\nFirm\nVolume\n\n\n\n\n0\n2023-08-01\nA\n20\nNaN\nNaN\n\n\n1\n2023-08-02\nB\n23\nNaN\nNaN\n\n\n2\n2023-08-03\nC\n21\nC\n100.0\n\n\n3\n2023-08-04\nD\n22\nD\n101.0\n\n\n4\n2023-08-05\nE\n20\nE\n120.0\n\n\n\n\n\n\n\nright 表示右连接，合并后显示 df2 的所有行：\n\ndf1.merge(df2, how='right')\n\n\n\n\n\n\n\n\nDate\nCompany\nClose\nFirm\nVolume\n\n\n\n\n0\n2023-08-03\nC\n21.0\nC\n100\n\n\n1\n2023-08-04\nD\n22.0\nD\n101\n\n\n2\n2023-08-05\nE\n20.0\nE\n120\n\n\n3\n2023-08-06\nNaN\nNaN\nF\n110\n\n\n4\n2023-08-07\nNaN\nNaN\nG\n105\n\n\n\n\n\n\n\nouter 表示外连接，合并后显示 df1 和 df2 的所有行：\n\ndf1.merge(df2, how='outer')\n\n\n\n\n\n\n\n\nDate\nCompany\nClose\nFirm\nVolume\n\n\n\n\n0\n2023-08-01\nA\n20.0\nNaN\nNaN\n\n\n1\n2023-08-02\nB\n23.0\nNaN\nNaN\n\n\n2\n2023-08-03\nC\n21.0\nC\n100.0\n\n\n3\n2023-08-04\nD\n22.0\nD\n101.0\n\n\n4\n2023-08-05\nE\n20.0\nE\n120.0\n\n\n5\n2023-08-06\nNaN\nNaN\nF\n110.0\n\n\n6\n2023-08-07\nNaN\nNaN\nG\n105.0\n\n\n\n\n\n\n\ncross 表示交叉合并，合并后显示 df1 和 df2 的笛卡尔积：\n\ndf1.merge(df2, how='cross')\n\n\n\n\n\n\n\n\nDate_x\nCompany\nClose\nDate_y\nFirm\nVolume\n\n\n\n\n0\n2023-08-01\nA\n20\n2023-08-03\nC\n100\n\n\n1\n2023-08-01\nA\n20\n2023-08-04\nD\n101\n\n\n2\n2023-08-01\nA\n20\n2023-08-05\nE\n120\n\n\n3\n2023-08-01\nA\n20\n2023-08-06\nF\n110\n\n\n4\n2023-08-01\nA\n20\n2023-08-07\nG\n105\n\n\n5\n2023-08-02\nB\n23\n2023-08-03\nC\n100\n\n\n6\n2023-08-02\nB\n23\n2023-08-04\nD\n101\n\n\n7\n2023-08-02\nB\n23\n2023-08-05\nE\n120\n\n\n8\n2023-08-02\nB\n23\n2023-08-06\nF\n110\n\n\n9\n2023-08-02\nB\n23\n2023-08-07\nG\n105\n\n\n10\n2023-08-03\nC\n21\n2023-08-03\nC\n100\n\n\n11\n2023-08-03\nC\n21\n2023-08-04\nD\n101\n\n\n12\n2023-08-03\nC\n21\n2023-08-05\nE\n120\n\n\n13\n2023-08-03\nC\n21\n2023-08-06\nF\n110\n\n\n14\n2023-08-03\nC\n21\n2023-08-07\nG\n105\n\n\n15\n2023-08-04\nD\n22\n2023-08-03\nC\n100\n\n\n16\n2023-08-04\nD\n22\n2023-08-04\nD\n101\n\n\n17\n2023-08-04\nD\n22\n2023-08-05\nE\n120\n\n\n18\n2023-08-04\nD\n22\n2023-08-06\nF\n110\n\n\n19\n2023-08-04\nD\n22\n2023-08-07\nG\n105\n\n\n20\n2023-08-05\nE\n20\n2023-08-03\nC\n100\n\n\n21\n2023-08-05\nE\n20\n2023-08-04\nD\n101\n\n\n22\n2023-08-05\nE\n20\n2023-08-05\nE\n120\n\n\n23\n2023-08-05\nE\n20\n2023-08-06\nF\n110\n\n\n24\n2023-08-05\nE\n20\n2023-08-07\nG\n105"
  },
  {
    "objectID": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html",
    "href": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html",
    "title": "Numpy Notes: Python data analysis",
    "section": "",
    "text": "NumPy, short for Numerical Python, has such advantages:\nPure Python leaves many details to runtime environment:\nNumPy is fast.\nimport numpy as np\n# speed test for numpy\nmy_arr = np.arange(1000_000)\nmy_list = list(range(1000_000))\n%%time\nmy_arr2 = my_arr * 2\n\nWall time: 2.99 ms\n%%time\nmy_list2 = [x * 2 for x in my_list]\n\nWall time: 114 ms"
  },
  {
    "objectID": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#creating-ndarrays",
    "href": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#creating-ndarrays",
    "title": "Numpy Notes: Python data analysis",
    "section": "1.1 Creating ndarrays",
    "text": "1.1 Creating ndarrays\n\n1.1.1 array function.\narray function accepts any sequence-like object (list, list of lists, other arrays, etc) and produces a new NumPy array containing the passed data. Unless explicitly specified, np.array tries to infer a good data type for the array that it creates. The data type is stored in a special dtype metadata object.\n\n# passing list\narr1 = np.array([1, 2, 3, 4])\nprint(arr1)\nprint(arr1.shape)\nprint(arr1.dtype)\nprint(arr1.ndim)\n\n[1 2 3 4]\n(4,)\nint32\n1\n\n\n\n# passing list of lists\narr2 = np.array([[1, 2, 3],\n                 [4, 5, 6]])\nprint(arr2)\nprint(arr2.shape)\nprint(arr2.dtype)\nprint(arr2.ndim)\n\n[[1 2 3]\n [4 5 6]]\n(2, 3)\nint32\n2\n\n\n\n# passing array\narr3 = np.array(arr2)\nprint(arr3)\nprint(arr3.shape)\nprint(arr3.dtype)\nprint(arr3.ndim)\n\n[[1 2 3]\n [4 5 6]]\n(2, 3)\nint32\n2\n\n\n\n\n1.1.2 zeros,ones,empty,arange etc\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\narray\nConvert input data (list, tuple, array, or other sequence type) to an ndarray either by inferring a dtype or explicitly specifying a dtype; copies the input data by default\n\n\nasarray\nConvert input to ndarray, but do not copy if the input is already an ndarray\n\n\narange\nLike the built-in range but returns an ndarray instead of a list\n\n\nones\nProduce an array of all 1s with the given shape and dtype\n\n\nones_like\nTakes another array and produces a ones array of the same shape and dtype\n\n\nzeros\nLike ones but producing arrays of 0s instead\n\n\nzeros_like\nLike ones_like but producing arrays of 0s instead\n\n\nempty\nCreate new arrays by allocating new memory, but do not populate with any values\n\n\nempty_like\nLike ones_like but do not populate with any values\n\n\nfull\nProduce an array of the given shape and dtype with all values set to the indicated “fill value”\n\n\nfull_like\nfull_like takes another array and produces a filled array of the same shape and dtype\n\n\neye, identity\nCreate a square NxN identity matrix\n\n\n\n\n# np.zeros\nnp.zeros(4)\n\narray([0., 0., 0., 0.])\n\n\n\n# np.ones\nnp.ones((2, 3))\n\narray([[1., 1., 1.],\n       [1., 1., 1.]])\n\n\n\n# np.empty return uninitialized \"garbage\" values, which can later be populated with data\nnp.empty((2, 3, 2))\n\narray([[[0.59905431, 1.08465416],\n        [0.95319914, 1.93616798],\n        [0.92951762, 0.81376066]],\n\n       [[0.87067676, 0.05844408],\n        [0.61867604, 0.78530194],\n        [0.93464763, 0.74309266]]])\n\n\n\n# arange ia an array-valued version of the build-in Python range function\nnp.arange(10)\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
  },
  {
    "objectID": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#data-types-for-ndarrays",
    "href": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#data-types-for-ndarrays",
    "title": "Numpy Notes: Python data analysis",
    "section": "1.2 Data Types for ndarrays",
    "text": "1.2 Data Types for ndarrays\nThe data type or dtype is a special object containing the information (or metadata, data about data) the ndarray needs to interpret a chunk of memory as a particular type of data. In most cases dtype provide a mapping directly onto an underlying disk or memory representation, which makes it easy to read and write binary streams of data to disk and also to connect to code written in a low-level language like C or Fortran."
  },
  {
    "objectID": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#arithmetic-with-numpy-arrays",
    "href": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#arithmetic-with-numpy-arrays",
    "title": "Numpy Notes: Python data analysis",
    "section": "1.3 Arithmetic with NumPy Arrays",
    "text": "1.3 Arithmetic with NumPy Arrays\nVectorization - Any arithmetic operations between equal-size arrays applies the operation element-wise.\n\narr = np.random.randn(3, 4)\narr\n\narray([[ 0.07338553,  0.8116425 , -2.17800941, -0.32029061],\n       [ 0.41584223, -1.32481565, -1.3783163 ,  0.26723131],\n       [-0.31385858,  1.30899248,  1.13523462, -0.68452327]])\n\n\n\narr * 2\n\narray([[ 0.14677106,  1.62328501, -4.35601882, -0.64058122],\n       [ 0.83168445, -2.64963129, -2.75663261,  0.53446262],\n       [-0.62771717,  2.61798496,  2.27046924, -1.36904654]])\n\n\n\narr - arr\n\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n\n\n\n1 / arr\n\narray([[13.62666475,  1.23206953, -0.45913484, -3.1221646 ],\n       [ 2.4047582 , -0.754822  , -0.72552287,  3.74207649],\n       [-3.18614831,  0.76394633,  0.88087518, -1.46087072]])\n\n\nBroadcasting - Operations between differently sized arrays."
  },
  {
    "objectID": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#basic-indexing-and-slicing",
    "href": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#basic-indexing-and-slicing",
    "title": "Numpy Notes: Python data analysis",
    "section": "1.4 Basic Indexing and Slicing",
    "text": "1.4 Basic Indexing and Slicing\nOne-dimensional array indexing and slicing act similarly to Python lists.\n\n# indexing\narr = np.arange(10)\nprint(arr)\nprint(arr[0])\n\n[0 1 2 3 4 5 6 7 8 9]\n0\n\n\n\n# slicing\nprint(arr[1:4])\n\n[1 2 3]\n\n\nArray slices are views on the original array, which means any modification to the view will be reflected in the source array. This design intends to obtain high performance and save memory.\n\narr = np.arange(10)\narr\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\narr[1:5] = 10\narr\n\narray([ 0, 10, 10, 10, 10,  5,  6,  7,  8,  9])\n\n\nFor higher dimensional arrays, we can access every individual element recursively. First, indexing moves along axis 0 as the “rows” of the array and then axis 1 as the “columns”.\n\narr = np.arange(9).reshape(3,3)\narr\n\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n\n\n\n# indexing along axis 0\narr[1]\n\narray([3, 4, 5])\n\n\n\n# recursively indexing\narr[1][0]\n\n3\n\n\n\n# easy and equivalent way\narr[1, 0]\n\n3\n\n\n\n# indexing with slices, slice along axis 0\narr[:2]\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\n# recursively indexing with slices\narr[:2, :2]\n\narray([[0, 1],\n       [3, 4]])"
  },
  {
    "objectID": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#boolean-indexing",
    "href": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#boolean-indexing",
    "title": "Numpy Notes: Python data analysis",
    "section": "1.5 Boolean Indexing",
    "text": "1.5 Boolean Indexing\nSelecting data from an array by boolean indexing always creates a copy of the data.\n\narr = np.array([[\"Bob\", 1, 2, 3],\n                [\"Luffy\", 2, 3, 4],\n                [\"Joe\", 6, 7, 8]])\narr\n\narray([['Bob', '1', '2', '3'],\n       ['Luffy', '2', '3', '4'],\n       ['Joe', '6', '7', '8']], dtype='&lt;U11')\n\n\n\nnames = arr[:, 0]\nnames\n\narray(['Bob', 'Luffy', 'Joe'], dtype='&lt;U11')\n\n\n\nluffy_selected = (names == \"Luffy\")\nluffy_selected\n\narray([False,  True, False])\n\n\n\n# boolean indexing slice along axis 0, select 'true' rows\narr[luffy_selected]\n\narray([['Luffy', '2', '3', '4']], dtype='&lt;U11')\n\n\n\n# select everything except luffy, use != or negate the condition using ~\narr[names != \"Luffy\"]\n\narray([['Bob', '1', '2', '3'],\n       ['Joe', '6', '7', '8']], dtype='&lt;U11')\n\n\n\narr[~luffy_selected]\n\narray([['Bob', '1', '2', '3'],\n       ['Joe', '6', '7', '8']], dtype='&lt;U11')\n\n\n\n# select two of the three names to combine multiple boolean conditions, use boolean arithmetic operators like & and |\nmask = (names==\"Bob\")|(names==\"Joe\")\nmask\n\narray([ True, False,  True])\n\n\n\narr[mask]\n\narray([['Bob', '1', '2', '3'],\n       ['Joe', '6', '7', '8']], dtype='&lt;U11')"
  },
  {
    "objectID": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#fancy-indexing",
    "href": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#fancy-indexing",
    "title": "Numpy Notes: Python data analysis",
    "section": "1.6 Fancy Indexing",
    "text": "1.6 Fancy Indexing\n\nFancy indexing is a term adopted by NumPy to describe indexing using integer arrays.\nThe result of fancy indexing is always one-dimensional.\nFancy indexing always copies the data into a new array.\n\n\n# create a 8x4 array\narr = np.empty((8, 4))\nfor i in range(8):\n    arr[i] = i\narr\n\narray([[0., 0., 0., 0.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [4., 4., 4., 4.],\n       [5., 5., 5., 5.],\n       [6., 6., 6., 6.],\n       [7., 7., 7., 7.]])\n\n\n\n# fancy indexing by passing a list\narr[[4, 3, 5, 6]]\n\narray([[4., 4., 4., 4.],\n       [3., 3., 3., 3.],\n       [5., 5., 5., 5.],\n       [6., 6., 6., 6.]])\n\n\n\n# passing multiple index arrays selects a one-dimensional array of elements corresponding to each tuple of indices\n# select (1,0), (5,3), (7,1), (2,2)\narr = np.arange(32).reshape(8,4)\narr[[1, 5, 7, 2], [0, 3, 1, 2]]\n\narray([ 4, 23, 29, 10])\n\n\n\n# trying to select a rectangular region\narr[[1, 5, 7, 2]][:, [0, 3, 1, 2]]\n\narray([[ 4,  7,  5,  6],\n       [20, 23, 21, 22],\n       [28, 31, 29, 30],\n       [ 8, 11,  9, 10]])"
  },
  {
    "objectID": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#transposing-arrays-and-swapping-axes",
    "href": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#transposing-arrays-and-swapping-axes",
    "title": "Numpy Notes: Python data analysis",
    "section": "1.7 Transposing Arrays and Swapping Axes",
    "text": "1.7 Transposing Arrays and Swapping Axes\nTransposing is a special form of reshaping that similiarly returns a view on the underlying data without copying anything. Arrays have the transpose method and also the special T attribute.\n\narr = np.arange(6).reshape(2,3)\narr\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\narr.T\n\narray([[0, 3],\n       [1, 4],\n       [2, 5]])"
  },
  {
    "objectID": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#expressing-conditional-logic-as-array-operations",
    "href": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#expressing-conditional-logic-as-array-operations",
    "title": "Numpy Notes: Python data analysis",
    "section": "3.1 Expressing Conditional Logic as Array Operations",
    "text": "3.1 Expressing Conditional Logic as Array Operations\n\n# list comprehension edition for conditional logic\nxarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])\nyarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])\ncond = np.array([True, False, True, True, False])\n\n\nresult = [(x if c else y) for x,y,c in zip(xarr, yarr, cond)]\nresult\n\n[1.1, 2.2, 1.3, 1.4, 2.5]\n\n\n\n# np.where edition for conditional logic\nresult = np.where(cond, xarr, yarr)\nresult\n\narray([1.1, 2.2, 1.3, 1.4, 2.5])"
  },
  {
    "objectID": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#mathematical-and-statiscal-methods",
    "href": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#mathematical-and-statiscal-methods",
    "title": "Numpy Notes: Python data analysis",
    "section": "3.2 Mathematical and Statiscal Methods",
    "text": "3.2 Mathematical and Statiscal Methods\nA set of mathematical functions that compute statistics about an entire array or about the data along an axis are accessible as methods of the array class and the top-level NumPy function.\n\narr = np.random.randn(5, 4)\narr\n\narray([[-0.32270463, -2.47923282,  0.51142065,  1.64402202],\n       [-1.11875424, -0.50816377, -0.24412379, -0.35906071],\n       [-0.80848479, -1.5290442 ,  0.33861759, -1.84812779],\n       [-0.38523178, -1.14234316,  1.07015372, -0.7025341 ],\n       [-0.742273  ,  0.62327938, -0.24617117, -0.87927529]])\n\n\n\n# find the mean of an array\narr.mean()\n\n-0.45640159378569933\n\n\n\n# using the top-level NumPy function to find the mean of an array\nnp.mean(arr)\n\n-0.45640159378569933\n\n\n\n# computing the mean over the axis 0\narr.mean(axis=0)\n\narray([-0.67548969, -1.00710091,  0.2859794 , -0.42899517])\n\n\n\nnp.mean(arr, axis=0)\n\narray([-0.67548969, -1.00710091,  0.2859794 , -0.42899517])"
  },
  {
    "objectID": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#methods-for-boolean-arrays",
    "href": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#methods-for-boolean-arrays",
    "title": "Numpy Notes: Python data analysis",
    "section": "3.3 Methods for Boolean Arrays",
    "text": "3.3 Methods for Boolean Arrays\nBoolean values are coerced to 1 (True) and 0 (False) in the preceding methods. Thus, sum is often used as a means of counting True values in a boolean array.\n\narr = np.random.randn(100)\n(arr &gt; 0).sum() # Number of positive values\n\n51\n\n\nThere are two additional methods, any and all, useful especially for boolean arrays. any tests whether one or more values in an array is True, while all checks if every value is True.\n\nbools = np.array([False, False, True, False])\n\n\nbools.any()\n\nTrue\n\n\n\nbools.all()\n\nFalse"
  },
  {
    "objectID": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#sorting",
    "href": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#sorting",
    "title": "Numpy Notes: Python data analysis",
    "section": "3.4 Sorting",
    "text": "3.4 Sorting\nNumPy arrays can be sorted in-place with the sort method.\n\narr = np.random.randn(6)\narr\n\narray([-0.64050099,  0.37239892,  0.48466042,  0.0832035 , -0.24079602,\n       -0.62832189])\n\n\n\narr.sort()\n\n\narr\n\narray([-0.64050099, -0.62832189, -0.24079602,  0.0832035 ,  0.37239892,\n        0.48466042])\n\n\nWe can sort each one-dimensional section of values in a multidimensional array in-place along an axis by passing the axis number to sort.\n\narr = np.random.randn(5, 3)\narr\n\narray([[ 0.22066993,  1.28272713, -2.80933259],\n       [ 1.24150303,  0.6821006 ,  0.21857812],\n       [ 0.38492004,  2.30910114,  0.354785  ],\n       [-0.99229831, -0.81723761,  0.19111813],\n       [ 0.46279363,  0.11871894,  0.7152068 ]])\n\n\n\narr.sort(1)\n\n\narr\n\narray([[-2.80933259,  0.22066993,  1.28272713],\n       [ 0.21857812,  0.6821006 ,  1.24150303],\n       [ 0.354785  ,  0.38492004,  2.30910114],\n       [-0.99229831, -0.81723761,  0.19111813],\n       [ 0.11871894,  0.46279363,  0.7152068 ]])\n\n\nThe top-level method np.sort returns a sorted copy of an array instead of modifying the array in-place. A quick-and-dirty way to compute the quantiles of an array is to sort it and select the value at a particular rank.\n\nlarge_arr = np.random.randn(1000)\nlarge_arr.sort()\nlarge_arr[int(0.05 * len(large_arr))] # 5% quantile\n\n-1.5942713719535697"
  },
  {
    "objectID": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#unique-and-other-set-logic",
    "href": "posts/2021-09-20-Numpy-notes-Python-data-analysis/index.html#unique-and-other-set-logic",
    "title": "Numpy Notes: Python data analysis",
    "section": "3.5 Unique and Other Set Logic",
    "text": "3.5 Unique and Other Set Logic\n\n# np.unique returns the sorted unique values in an array\nnumbers = np.array([1, 2, 3, 3, 4, 4, 6])\nnp.unique(numbers)\n\narray([1, 2, 3, 4, 6])\n\n\n\n# pure python edition\nsorted(set(numbers))\n\n[1, 2, 3, 4, 6]"
  },
  {
    "objectID": "posts/2023-12-29-独立均值独立与线性不相关/index.html",
    "href": "posts/2023-12-29-独立均值独立与线性不相关/index.html",
    "title": "独立、均值独立与线性不相关",
    "section": "",
    "text": "两个随机变量 x 和 y，满足 f(x) \\times f(y) = f(x,y)，则称随机变量 x 和 y 独立。从图像上来理解，就是对任意的 x，f_{Y|X}(y|x) 都是相同的，所以 x 不会带来任何新的信息。\n\n\n\n独立"
  },
  {
    "objectID": "posts/2023-12-29-独立均值独立与线性不相关/index.html#引理-1迭代期望法则",
    "href": "posts/2023-12-29-独立均值独立与线性不相关/index.html#引理-1迭代期望法则",
    "title": "独立、均值独立与线性不相关",
    "section": "引理 1：迭代期望法则",
    "text": "引理 1：迭代期望法则\n\nE[Y] = E[E[Y|X]]\n\n证明：\n\n\\begin{split}\nE[E[Y|X]] &= \\int{\\int{y f_{Y|X}(y|x)dy}f_X(x)dx} \\\\\n&= \\int{\\int{y \\frac{f_{X,Y}(x,y)}{f_{X}(x)} dy}f_X(x)dx} \\\\\n&= \\int{\\int{y f_{X,Y}(x,y)dy}dx} \\\\\n&= \\int{\\int{f_{X,Y}(x,y)dx}ydy} \\\\\n&= \\int{y f_{Y}(y)dy} \\\\\n&= E[Y]\n\\end{split}"
  },
  {
    "objectID": "posts/2023-12-29-独立均值独立与线性不相关/index.html#引理-2协方差与条件期望法则",
    "href": "posts/2023-12-29-独立均值独立与线性不相关/index.html#引理-2协方差与条件期望法则",
    "title": "独立、均值独立与线性不相关",
    "section": "引理 2：协方差与条件期望法则",
    "text": "引理 2：协方差与条件期望法则\n\nCov[X,Y] = Cov[X, E[Y|X]]\n\n证明：\n\n\\begin{split}\nCov[X, E[Y|X]] &= E[XE[Y|X]] - E[X]E[E[Y|X]] \\\\\n&= \\int{xf_{X}(x) \\int{yf_{Y|X}(y|x)dy}dx} - E[X]E[Y] \\\\\n&= \\int{xf_{X}(x) \\int{y \\frac{f_{X,Y}(x,y)}{f_{X}(x)}dy}dx} - E[X]E[Y] \\\\\n&= \\int{\\int{xy f_{X,Y}(x,y)dy}dx} - E[X]E[Y] \\\\\n&= E[XY] - E[X]E[Y] \\\\\n&= Cov[X,Y]\n\\end{split}"
  },
  {
    "objectID": "posts/2023-12-29-独立均值独立与线性不相关/index.html#由均值独立推出线性不相关",
    "href": "posts/2023-12-29-独立均值独立与线性不相关/index.html#由均值独立推出线性不相关",
    "title": "独立、均值独立与线性不相关",
    "section": "由均值独立推出线性不相关",
    "text": "由均值独立推出线性不相关\n\n\\begin{split}\nCov(X,Y) &= E[XY] - E[X]E[Y] \\\\\n&= E[E[XY|X]] - E[X]E[Y] \\\\\n&= E[XE[Y|X]] - E[X]E[Y] \\\\\n&= E[XE[Y]] - E[X]E[Y] \\\\\n&= E[X]E[Y] - E[X]E[Y] \\\\\n&= 0\n\\end{split}"
  },
  {
    "objectID": "posts/2023-01-27-爬虫踩坑-ConnectionResetError-10054/index.html",
    "href": "posts/2023-01-27-爬虫踩坑-ConnectionResetError-10054/index.html",
    "title": "爬虫踩坑-ConnectionResetError(100504)",
    "section": "",
    "text": "在爬巨潮资讯公告数据时遇到报错："
  },
  {
    "objectID": "posts/2023-01-27-爬虫踩坑-ConnectionResetError-10054/index.html#原始代码",
    "href": "posts/2023-01-27-爬虫踩坑-ConnectionResetError-10054/index.html#原始代码",
    "title": "爬虫踩坑-ConnectionResetError(100504)",
    "section": "1 原始代码",
    "text": "1 原始代码\n\nimport logging\nimport time\n\nimport pandas as pd\nimport requests\nfrom tqdm import tqdm\n\n\ndef get_json(pagenum):\n    url = 'http://www.cninfo.com.cn/new/fulltextSearch/full?'\n    \n    headers = {\n        \"Accept-Encoding\": \"gzip\",\n        \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36\",\n    }\n    \n    payload = {\n        'searchkey': '区块链',\n        'sdate': '2009-01-01',\n        'edate': '2022-12-31',\n        'isfulltext': 'true',\n        'sortName': 'pubdate',\n        'sortType': 'asc',\n        'type': 'shj',\n    }\n    \n    payload['pageNum'] = str(pagenum)\n    \n    try:\n        res = requests.get(url, headers=headers, params=payload)\n#         res.close()\n    except Exception as e:\n        logging.warning(e)\n        \n    return res.json()\n\n\n# 查看第一页数据\npd.DataFrame(get_json(1)['announcements']).head()\n\n\n\n\n\n\n\n\nid\nsecCode\nsecName\norgId\nannouncementId\nannouncementTitle\nannouncementTime\nadjunctUrl\nadjunctSize\nadjunctType\nstorageTime\ncolumnId\npageColumn\nannouncementType\nassociateAnnouncement\nimportant\nbatchNum\nannouncementContent\norgName\nannouncementTypeName\n\n\n\n\n0\nNone\n000631\n顺发恒业\ngssz0000631\n49624621\n*ST 兰宝：重大资产出售、发行股份购买资产暨关联交易报告书（修订稿）\n1235773830000\nfinalpage/2009-02-28/49624621.PDF\n1749\nPDF\nNone\n01030101||010612\nSZZB\n01010501||01010701||010112||01170110\nNone\nNone\nNone\n（二）公司业绩持续下滑，且无改善迹象 由于个别银行发现公司资金&lt;em&gt;链&lt;/em&gt;紧张，逐步...\nNone\nNone\n\n\n1\nNone\n600596\n新安股份\ngssh0600596\n49988949\n新安股份：2008年年度报告\n1236637800000\nfinalpage/2009-03-10/49988949.PDF\n1711\nPDF\nNone\n01030103||01030404||010612||010613\nSHZB\n01010501||010113||01030101\nNone\nNone\nNone\n3.新安包装公司搬迁事项 因新安江桥东&lt;em&gt;区块&lt;/em&gt;旧城改造，新安包装公司于本期从老...\nNone\nNone\n\n\n2\nNone\n600267\n海正药业\ngssh0600267\n50367093\n海正药业：2008年年度股东大会会议资料\n1237501800000\nfinalpage/2009-03-20/50367093.PDF\n346\nPDF\nNone\n01030103||010612\nSHZB\n01010501||010113||011906\nNone\nNone\nNone\n100.00% 141,278 100.00% 115,132 100.00% 公司凭借原料...\nNone\nNone\n\n\n3\nNone\n002244\n滨江集团\n9900004730\n50327309\n滨江集团：2008年年度报告\n1237501800000\nfinalpage/2009-03-20/50327309.PDF\n867\nPDF\nNone\n01010302||01010306||01010410||01010411||010301...\nSZZB\n01010503||010112||010114||01030101\nNone\nNone\nNone\n江干科技经济园区地块开发协议书》（江科园协字【2006】035 号），约定就“S08、09、...\nNone\nNone\n\n\n4\nNone\n000301\n东方盛虹\ngssz0000301\n50432137\n东方市场：2008年年度报告\n1237847400000\nfinalpage/2009-03-24/50432137.PDF\n369\nPDF\nNone\n01030101||01030402||010612||010613\nSZZB\n01010501||010112||01030101\nNone\nNone\nNone\n公司将采取措施进一步完善产业&lt;em&gt;链&lt;/em&gt;，继续减少关联交易。\nNone\nNone\n\n\n\n\n\n\n\n\n# 获取列名\ncolumn = pd.DataFrame(get_json(1)['announcements']).columns\n\n\n# 获取每页数据（DataFrame）格式\ndef get_df_data(pagenum):\n    announcements_list = get_json(pagenum)['announcements']\n    return pd.DataFrame(announcements_list)\n\n\ndef all_data(pagenum, res):\n    df_data = get_df_data(pagenum)\n    if len(df_data) &gt; 0:\n        res.extend(df_data.values)\n\n\nres = []\nfor page in tqdm(range(1, 500)):\n    all_data(page, res)\n\n 24%|████████████████████▎                                                                | 119/499 [00:26&lt;01:34,  4.03it/s]WARNING:root:('Connection aborted.', ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None))\n 24%|████████████████████▎                                                                | 119/499 [00:36&lt;01:56,  3.28it/s]\n\n\n\n---------------------------------------------------------------------------\nUnboundLocalError                         Traceback (most recent call last)\n~\\AppData\\Local\\Temp/ipykernel_20364/2801816917.py in &lt;module&gt;\n      1 res = []\n      2 for page in tqdm(range(1, 500)):\n----&gt; 3     all_data(page, res)\n\n~\\AppData\\Local\\Temp/ipykernel_20364/1866910109.py in all_data(pagenum, res)\n      1 def all_data(pagenum, res):\n----&gt; 2     df_data = get_df_data(pagenum)\n      3     if len(df_data) &gt; 0:\n      4         res.extend(df_data.values)\n\n~\\AppData\\Local\\Temp/ipykernel_20364/1464953047.py in get_df_data(pagenum)\n      1 # 获取每页数据（DataFrame）格式\n      2 def get_df_data(pagenum):\n----&gt; 3     announcements_list = get_json(pagenum)['announcements']\n      4     return pd.DataFrame(announcements_list)\n\n~\\AppData\\Local\\Temp/ipykernel_20364/565530397.py in get_json(pagenum)\n     26         logging.warning(e)\n     27 \n---&gt; 28     return res.json()\n\nUnboundLocalError: local variable 'res' referenced before assignment\n\n\n\n根据错误提示，连接被远程主机强制关闭了， get_json 函数中，requests.get 未成功获取响应报文，故 return res.json() 报错 UnboundLocalError。"
  },
  {
    "objectID": "posts/2023-01-27-爬虫踩坑-ConnectionResetError-10054/index.html#故障分析",
    "href": "posts/2023-01-27-爬虫踩坑-ConnectionResetError-10054/index.html#故障分析",
    "title": "爬虫踩坑-ConnectionResetError(100504)",
    "section": "2 故障分析",
    "text": "2 故障分析\n谷歌了一下，有以下两种解释：\n\n服务器-客户端超时分歧\n\n\nThis can be caused by the two sides of the connection disagreeing over whether the connection timed out or not during a keepalive. (Your code tries to reused the connection just as the server is closing it because it has been idle for too long.) You should basically just retry the operation over a new connection. (I’m surprised your library doesn’t do this automatically.)\n\n代码尝试复用旧的 TCP 连接，但服务器认为该连接闲置太久，已经先行关闭了该连接。对于这个解释，我查看了一下 requests 的文档，发现每一次 requests.get 请求，都是调用了 requests.request('GET', url, **kwargs) 方法，而该方法定义如下：\ndef request(method, url, **kwargs):\n    # By using the 'with' statement we are sure the session is closed, thus we\n    # avoid leaving sockets open which can trigger a ResourceWarning in some\n    # cases, and look like a memory leak in others.\n    with sessions.Session() as session:\n        return session.request(method=method, url=url, **kwargs)\n可以发现，事实上每一次 get 请求都是短连接，因为 requests.request 方法使用 with 语句会自动关闭 session。事实上，如果在 requests 中要实现长连接应该使用 Session 对象。那么，既然每次调用 get 方法都会关闭连接，也就不存在服务器-客户端超时分歧的问题了。\n有回答建议使用 res.close()，既然 requests.request 方法使用 with 语句自动关闭 session，原则上我们应该不用显示调用 res.close()。事实上，官方文档也是这么建议的。\n\nclose(): Releases the connection back to the pool. Once this method has been called the underlying raw object must not be accessed again. Note: Should not normally need to be called explicitly.\n\n\n被服务器识别为恶意访问\n\n\nThe web server actively rejected your connection. That’s usually because it is congested, has rate limiting or thinks that you are launching a denial of service attack. If you get this from a server, you should sleep a bit before trying again. In fact, if you don’t sleep before retry, you are a denial of service attack. The polite thing to do is implement a progressive sleep of, say, (1,2,4,8,16,32) seconds.\n\n由于请求太频繁，被服务器识别为恶意访问，因此强制断开连接。尝试在请求后 time.sleep(random.random()*2)，有改善，但请求一段时间后，连接仍会断开。"
  },
  {
    "objectID": "posts/2023-01-27-爬虫踩坑-ConnectionResetError-10054/index.html#解决方法",
    "href": "posts/2023-01-27-爬虫踩坑-ConnectionResetError-10054/index.html#解决方法",
    "title": "爬虫踩坑-ConnectionResetError(100504)",
    "section": "3 解决方法",
    "text": "3 解决方法\n根据故障分析，判断是被服务器识别为恶意访问。解决方法是使用 Session 对象，通过复用 TCP 连接，从而减少创建/关闭多个 TCP 连接的开销（包括响应时间、CPU 资源、减少拥堵等），同时提升爬虫代码的性能。\n\ndef get_json(pagenum, s):\n    url = 'http://www.cninfo.com.cn/new/fulltextSearch/full?'\n    \n    headers = {\n        \"Accept-Encoding\": \"gzip\",\n        \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36\",\n        \"Connection\": \"keep-alive\",\n    }\n    \n    payload = {\n        'searchkey': '区块链',\n        'sdate': '2009-01-01',\n        'edate': '2022-12-31',\n        'isfulltext': 'true',\n        'sortName': 'pubdate',\n        'sortType': 'asc',\n        'type': 'shj',\n    }\n    \n    payload['pageNum'] = str(pagenum)\n    \n    try:\n        res = s.get(url, headers=headers, params=payload)\n    except Exception as e:\n        logging.warning(e)\n        \n    return res.json()\n\n\ndef get_df_data(pagenum, s):\n    announcements_list = get_json(pagenum, s)['announcements']\n    return pd.DataFrame(announcements_list)\n\n\ndef all_data(pagenum, s, res):\n    df_data = get_df_data(pagenum, s)\n    if len(df_data) &gt; 0:\n        res.extend(df_data.values)\n\n\nres = []\nwith requests.Session() as s:\n    for page in tqdm(range(1, 500)):\n        all_data(page, s, res)\n\n100%|█████████████████████████████████████████████████████████████████████████████████████| 499/499 [01:27&lt;00:00,  5.71it/s]"
  },
  {
    "objectID": "posts/2023-01-27-爬虫踩坑-ConnectionResetError-10054/index.html#参考资料",
    "href": "posts/2023-01-27-爬虫踩坑-ConnectionResetError-10054/index.html#参考资料",
    "title": "爬虫踩坑-ConnectionResetError(100504)",
    "section": "参考资料",
    "text": "参考资料\n\nHttp——Keep-Alive 机制\n图解 HTTP 2.7：持久连接节省通信量\nhttps://stackoverflow.com/questions/27333671/how-to-solve-the-10054-error\nhttps://stackoverflow.com/questions/8814802/python-errno-10054-an-existing-connection-was-forcibly-closed-by-the-remote-h"
  },
  {
    "objectID": "posts/2024-09-07-使用Glob模块快速查找文件/index.html",
    "href": "posts/2024-09-07-使用Glob模块快速查找文件/index.html",
    "title": "使用Glob模块快速查找文件",
    "section": "",
    "text": "在进行数据分析时，常常会遇到需要遍历读取某个文件夹中的文件的情况。以文本分析为例，我们可能需要依次读取文件夹中的所有 txt 文件，并进行相应处理。\n\n\n\nfolder\n\n\n比如上图中的文件夹，要实现读取上市公司 2018 年管理层讨论与分析的文本，一种方式是使用 os.listdir() 获取所有文件名，然后构造文件路径：\n\nimport os\n\nfile_path = \"./管理层讨论与分析/2018/文本/\"\nfile_name_list = os.listdir(file_path)\n\nfor file in file_name_list:\n    full_path = f\"./管理层讨论与分析/2018/文本/{file}\"\n    with open(full_path, \"r\", encoding='utf-8') as f:\n        annual_content = f.read()\n        pass\n\n但是这样显然不够优雅😁，glob 模块可以很好的解决这个问题！glob 是 Python 标准库中的一个模块，用于查找符合特定模式的文件或目录名。它通过使用 Unix 风格的路径模式匹配规则来搜索文件系统，常用于批量查找符合某种特定条件的文件。比如，要获取 2018 年上市公司管理层讨论与分析的 txt 文件路径，使用 glob 可以这样完成：\n\nimport glob\n\nglob.glob(\"./管理层讨论与分析/2018/文本/*.txt\")\n\n['./管理层讨论与分析/2018/文本/000001_2018-12-31.txt',\n './管理层讨论与分析/2018/文本/000002_2018-12-31.txt',\n './管理层讨论与分析/2018/文本/000002_2018-06-30.txt',\n './管理层讨论与分析/2018/文本/000004_2018-06-30.txt',\n './管理层讨论与分析/2018/文本/000001_2018-06-30.txt']\n\n\n可以发现，glob 大大便利了文件和目录查找 。glob 也支持常用的通配符：\n\n*：匹配任意数量的字符，包括空字符。比如，*.txt 匹配所有 .txt 文件。\n?：匹配单个字符。比如，file?.txt 匹配 file1.txt 和 file2.txt，但不匹配 file10.txt。\n[]：匹配指定字符范围。比如，file[0-9].txt 匹配 file1.txt 到 file9.txt，但不匹配 file10.txt。\n\n\nglob.glob()\nglob() 是 glob 模块中常用的函数之一，另一个是 iglob()。其参数如下：\nglob.glob(pathname, *, root_dir=None, dir_fd=None, recursive=False, include_hidden=False)\nrecursive 参数表示是否递归查找。比如，要查找当前目录下的所有 txt 文件：\n\nglob.glob(\"./管理层讨论与分析/**/*.txt\", recursive=True)\n\n['./管理层讨论与分析/管理层讨论与分析_字段说明.txt',\n './管理层讨论与分析/2020/管理层讨论与分析_字段说明.txt',\n './管理层讨论与分析/2020/文本/000002_2020-12-31.txt',\n './管理层讨论与分析/2020/文本/000001_2020-12-31.txt',\n './管理层讨论与分析/2020/文本/000001_2020-06-30.txt',\n './管理层讨论与分析/2020/文本/000004_2020-06-30.txt',\n './管理层讨论与分析/2020/文本/000002_2020-06-30.txt',\n './管理层讨论与分析/2019/管理层讨论与分析_字段说明.txt',\n './管理层讨论与分析/2019/文本/000001_2019-06-30.txt',\n './管理层讨论与分析/2019/文本/000001_2019-12-31.txt',\n './管理层讨论与分析/2019/文本/000004_2019-06-30.txt',\n './管理层讨论与分析/2019/文本/000002_2019-12-31.txt',\n './管理层讨论与分析/2019/文本/000002_2019-06-30.txt',\n './管理层讨论与分析/2021/管理层讨论与分析_字段说明.txt',\n './管理层讨论与分析/2021/文本/000001_2021-12-31.txt',\n './管理层讨论与分析/2021/文本/000002_2021-12-31.txt',\n './管理层讨论与分析/2021/文本/000005_2021-06-30.txt',\n './管理层讨论与分析/2021/文本/000004_2021-12-31.txt',\n './管理层讨论与分析/2021/文本/000004_2021-06-30.txt',\n './管理层讨论与分析/2022/管理层讨论与分析_字段说明.txt',\n './管理层讨论与分析/2022/文本/000002_2022-06-30.txt',\n './管理层讨论与分析/2022/文本/000004_2022-12-31.txt',\n './管理层讨论与分析/2022/文本/000005_2022-12-31.txt',\n './管理层讨论与分析/2022/文本/000002_2022-12-31.txt',\n './管理层讨论与分析/2022/文本/000001_2022-12-31.txt',\n './管理层讨论与分析/2018/管理层讨论与分析_字段说明.txt',\n './管理层讨论与分析/2018/文本/000001_2018-12-31.txt',\n './管理层讨论与分析/2018/文本/000002_2018-12-31.txt',\n './管理层讨论与分析/2018/文本/000002_2018-06-30.txt',\n './管理层讨论与分析/2018/文本/000004_2018-06-30.txt',\n './管理层讨论与分析/2018/文本/000001_2018-06-30.txt']\n\n\n\n\nglob.iglob()\nglob.iglob(pathname, *, root_dir=None, dir_fd=None, recursive=False, include_hidden=False)\niglob() 与 glob() 类似，但返回的是一个生成器，适合处理文件数量较多的情况，因为它不会一次性将结果加载到内存中。"
  },
  {
    "objectID": "posts/2021-05-22-matplotlib绘图工作流/index.html",
    "href": "posts/2021-05-22-matplotlib绘图工作流/index.html",
    "title": "Matplotlib绘图工作流",
    "section": "",
    "text": "日常工作中经常要用到 matplotlib 来绘图，每次绘图碰到一些细节问题都得谷歌，下次遇到继续谷歌 :) 不知道你是否跟我一样。一方面是自己太懒了，没总结；另一方面，是 matplotlib 实现同一个目标的方式太多了。\n比如设置图片标题，可以使用 plt.title()，也可以使用 ax.set_title()。出现这种情况的原因是 matplotlib 提供了两套接口来实现相同的功能：一套是类 MATLAB 工作风格的接口（方便 MATLAB 党丝滑迁移过来），一套是面向对象风格的接口（面向程序员）。这就造成了很多 matplotlib 初学者两种风格代码混用的情况，比如我 :)\n这篇文章的主要内容如下："
  },
  {
    "objectID": "posts/2021-05-22-matplotlib绘图工作流/index.html#坐标轴",
    "href": "posts/2021-05-22-matplotlib绘图工作流/index.html#坐标轴",
    "title": "Matplotlib绘图工作流",
    "section": "坐标轴",
    "text": "坐标轴\nmatplotlib 的 Axes 是绘图的入口。一旦在图上放置了一个 Axes，就可以使用许多方法向Axes 添加数据。一个 Axes 通常具有一对 Axis Artists，它们定义了数据坐标系，并包括添加注释（如 x 轴和 y 轴标签、标题和图例）的方法。\n\nfig, ax = plt.subplots(figsize=(16, 8), layout='constrained')\nnp.random.seed(19680801)\nt = np.arange(200)\nx = np.cumsum(np.random.randn(200))\ny = np.cumsum(np.random.randn(200))\n\nlinesx = ax.plot(t, x, label='Random walk x')\nlinesy = ax.plot(t, y, label='Random walk y')\n\n# 设置 x 轴标签\nax.set_xlabel('Time [s]')\n# 设置 y 轴标签\nax.set_ylabel('Distance [km]')\n# 设置标题\nax.set_title('Random walk example')\nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n也可以使用 set_xlim 和 set_ylim 方法设置坐标轴的范围，可以使用 set_xscale 和 set_yscale 设置坐标轴的比例尺度。\n\nfig, ax = plt.subplots(figsize=(16, 8), layout='constrained')\nnp.random.seed(19680801)\nt = np.arange(200)\nx = 2**np.cumsum(np.random.randn(200))\nlinesx = ax.plot(t, x)\nax.set_yscale('log')\nax.set_xlim([20, 180])\nplt.show()\n\n\n\n\n\n\n\n\nAxes 类还提供了处理坐标轴刻度及其标签的辅助方法。其中最直接的是 set_xticks 和 set_yticks，它们可以手动设置刻度的位置，以及可选地设置它们的标签。可以使用minorticks_on 或 minorticks_off 来切换次要刻度。\n\nfig, ax = plt.subplots(figsize=(16,8), layout='constrained')\n\nxx = np.arange(0, 2*np.pi, 0.01)\nax.plot(xx, np.sin(xx))\n\nax2 = ax.twinx() \n\n# 设置刻度和标签\nax2.set_yticks([0., .5*np.pi, np.pi, 1.5*np.pi, 2*np.pi],\n               labels=[\"$0$\", r\"$\\frac{1}{2}\\pi$\",\n                       r\"$\\pi$\", r\"$\\frac{3}{2}\\pi$\", r\"$2\\pi$\"])\n# 开启次要刻度\nplt.minorticks_on()\nplt.show()\n\n\n\n\n\n\n\n\n也可以使用 tick_params 调整 Axes 刻度和刻度标签：\n\nfig, ax = plt.subplots(figsize=(16, 8))\nax.plot(np.arange(10))\nax.tick_params(top=True, labeltop=True, color='red', axis='x',\n               labelcolor='green')"
  },
  {
    "objectID": "posts/2021-05-22-matplotlib绘图工作流/index.html#线",
    "href": "posts/2021-05-22-matplotlib绘图工作流/index.html#线",
    "title": "Matplotlib绘图工作流",
    "section": "线",
    "text": "线\nmatplotlib 中的线是一个 line2D 对象，它有很多属性，我们可以通过对属性进行修改实现对线的美化和定制。这里，列出一些比较常用的属性：\n\ncolor 或者 c：线的颜色；\nalpha：透明度；\nlinewidth：线的宽度；\nlinestyle 或者 ls；\n\n- 或者 solid：实线；\n-- 或者 dashed：短划线；\n-. 或者 dashdot：点划线；\n: 或者 dotted：点虚线；\n\nmarker 或则 m：\n\n.：点\no：圆圈\n^：上三角形\n+：加号\nx：X\ns：正方形\n*：五角星\n\n\n下面，我们在代码中来看一下各种属性的使用：\n\n# create some toy data\ndata1, data2, data3, data4 = np.random.randn(4, 100)\n\nfig, ax = plt.subplots(figsize=(16,8), dpi=100)\n\nax.plot(np.cumsum(data1), color='black', linewidth='3', linestyle='-', marker='o', alpha=0.5) \nax.plot(np.cumsum(data2), color='red', linestyle='--', marker='^')\nax.plot(np.cumsum(data3), color='green', linestyle='-.', marker='+')\nax.plot(np.cumsum(data4), color='orange', linestyle=':', marker='x')\n\n\n\n\n\n\n\n\n我们也可以使用对应的方法来设置或者修改属性值。ax.plot() 方法返回一个 line2D 对象列表，我们可以在对应的 line2D 对象上调用方法。比如，我们可以使用 set_linestyle() 方法修改 linestyle 属性，可以使用 set_marker() 方法修改 marker 属性。\n\nfig, ax = plt.subplots(figsize=(16, 8), dpi=100)\n\nl, = ax.plot(np.cumsum(data1))\nl.set_linestyle('--')\nl.set_marker('x')\n\n\n\n\n\n\n\n\n\ndata1, data2, data3, data4 = np.random.randn(4, 100)\n\n\nfig, ax = plt.subplots(figsize=(16, 8))\nx = np.arange(len(data1))\nax.plot(x, np.cumsum(data1), color='blue', linewidth=3, linestyle='--')\nl= ax.plot(x, np.cumsum(data2), color='orange', linewidth=2, linestyle=':')\n# l.set_linestyle(':')"
  },
  {
    "objectID": "posts/2021-05-22-matplotlib绘图工作流/index.html#文字",
    "href": "posts/2021-05-22-matplotlib绘图工作流/index.html#文字",
    "title": "Matplotlib绘图工作流",
    "section": "文字",
    "text": "文字\nmatplotlib 中的文字是一个 matplotlib.text.Text 对象，利用相关的属性我们可以控制文字显示的样式，包括文字位置、显示的字体、字体大小、颜色等等。\n\nalpha：透明度\nfontfamily：FONTNAME, ‘serif’, ‘sans-serif’, ‘cursive’, ‘fantasy’, ‘monospace’\nfontsize：float or ‘xx-small’, ‘x-small’, ‘small’, ‘medium’, ‘large’, ‘x-large’, ‘xx-large’\nfontweight：a numeric value in range 0-1000, ‘ultralight’, ‘light’, ‘normal’, ‘regular’, ‘book’, ‘medium’, ‘roman’, ‘semibold’, ‘demibold’, ‘demi’, ‘bold’, ‘heavy’, ‘extra bold’, ‘black’\nfontstyle：‘normal’, ‘italic’, ‘oblique’\n\n这里放上官方文档的例子：\n\nfig = plt.figure(figsize=(16,8))\nax = fig.add_subplot()\nfig.subplots_adjust(top=0.85)\n\n# Set titles for the figure and the subplot respectively\nfig.suptitle('bold figure suptitle', fontsize=14, fontweight='bold')\nax.set_title('axes title')\n\nax.set_xlabel('xlabel')\nax.set_ylabel('ylabel')\n\n# Set both x- and y-axis limits to [0, 10] instead of default [0, 1]\nax.axis([0, 10, 0, 10])\n\nax.text(3, 8, 'boxed italics text in data coords', style='italic',\n        bbox={'facecolor': 'red', 'alpha': 0.5, 'pad': 10})\n\nax.text(2, 6, r'an equation: $E=mc^2$', fontsize=15)\n\nax.text(3, 2, 'Unicode: Institut für Festkörperphysik')\n\nax.text(0.95, 0.01, 'colored text in axes coords',\n        verticalalignment='bottom', horizontalalignment='right',\n        transform=ax.transAxes,\n        color='green', fontsize=15)\n\nax.plot([2], [1], 'o')\nax.annotate('annotate', xy=(2, 1), xytext=(3, 4),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\nplt.show()"
  },
  {
    "objectID": "posts/2021-05-22-matplotlib绘图工作流/index.html#图例",
    "href": "posts/2021-05-22-matplotlib绘图工作流/index.html#图例",
    "title": "Matplotlib绘图工作流",
    "section": "图例",
    "text": "图例\nAxes.legend(*args, **kwargs)\n\ndata1, data2, data3, data4 = np.random.randn(4, 100)\n\nfig, ax = plt.subplots(figsize=(16,8), dpi=100)\n\nax.plot(np.cumsum(data1), color='black', linewidth='3', linestyle='-', marker='o', label='data1') \nax.plot(np.cumsum(data2), color='red', linestyle='--', marker='^', label='data2')\nax.plot(np.cumsum(data3), color='green', linestyle='-.', marker='+', label='data3')\nax.plot(np.cumsum(data4), color='orange', linestyle=':', marker='x', label='data4')\n\nax.legend(loc='best', frameon=False)\nplt.show()"
  },
  {
    "objectID": "posts/2021-05-22-matplotlib绘图工作流/index.html#spines",
    "href": "posts/2021-05-22-matplotlib绘图工作流/index.html#spines",
    "title": "Matplotlib绘图工作流",
    "section": "Spines",
    "text": "Spines\n\ndata1, data2, data3, data4 = np.random.randn(4, 100)\n\nfig, ax = plt.subplots(figsize=(16,8), dpi=100)\n\nax.plot(np.cumsum(data1), color='black', linewidth='3', linestyle='-', marker='o', label='data1') \nax.plot(np.cumsum(data2), color='red', linestyle='--', marker='^', label='data2')\nax.plot(np.cumsum(data3), color='green', linestyle='-.', marker='+', label='data3')\nax.plot(np.cumsum(data4), color='orange', linestyle=':', marker='x', label='data4')\n\nax.legend(loc='best', frameon=False)\n\n# Remove the plot frame lines. They are unnecessary chartjunk.\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\n\nplt.show()"
  },
  {
    "objectID": "posts/2023-11-09-quarto使用笔记/index.html",
    "href": "posts/2023-11-09-quarto使用笔记/index.html",
    "title": "Quarto使用笔记",
    "section": "",
    "text": "Metadata\nQuarto 文章 metadata 采用 Yaml 语言定义，以下是一个常见的例子：\n---\ntitle: Quarto Notes\nauthor: Tom\ndate: \"2023-11-09\"\ntoc: true # 是否开启文章目录\ntoc-depth: 2 # 目录层级深度，默认3级目录\ntoc-expand: true # 目录是否展开\ncode-block-bg: true # 代码块背景颜色\nhighlight-style: atom-one # 代码块语法高亮风格\ncategories: [博客]\ncode-fold: false # 代码块是否折叠\ncold-line-numbers: true # 代码块是否显示行数\ncode-copy: true # true/false/hover\ndraft: false # 博文是否为草稿，草稿不显示在博客中\nhtml-math-method: katex # latex 引擎，默认是 MathJax\njupyter: python3\n---\n\n\nMarkdown\n图片占比 100%\n![](./quarto.png){width=100%}\n\n\nlatex\n\\begin{split}\nE(X) &= \\int{x\\int{yf_{X,Y}(x,y)dy}dx} \\\\\n&= \\int{xf_{X}(x)dx} \\\\\n&= E(X)\n\\end{split}\n\n\nGit\n# 查看仓库状态\ngit status\n# 查看文件修改情况\ngit diff filename\n# 将文件修改提交到暂存区\ngit add filename\n# 将所有文件提交到暂存区\ngit add -A.\n# 将暂存区的内容提交到当前分支\ngit commit\n# 将内容推送到远程仓库\ngit push -u origin main"
  },
  {
    "objectID": "posts/2023-02-01-手把手教你做事件研究-数据清洗Part2/index.html",
    "href": "posts/2023-02-01-手把手教你做事件研究-数据清洗Part2/index.html",
    "title": "手把手教你做事件研究-数据清洗Part2",
    "section": "",
    "text": "这篇博客（视频）记录区块链技术投资公告效应研究样本的数据清洗过程，主要内容是剔除业绩预告、分红、收购并购、重组以及其他突发事件公告日落在事件窗口期之内样本公司。 \n\nimport logging\nfrom datetime import date, timedelta\n\nimport numpy as np\nimport pandas as pd\nimport requests\n\nlogging.basicConfig(level=logging.INFO)\n\n\ndata = pd.read_csv('./data/tidyed_data.csv', converters={u'secCode':str})\n\n\ndata.head()\n\n\n\n\n\n\n\n\nsecCode\nsecName\norgId\nannouncementTitle\nannouncementTime\nadjunctUrl\nannouncementContent\n\n\n\n\n0\n002152\n广电运通\n9900003423\n广电运通：2016年4月1日投资者关系活动记录表\n2016-04-06\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n9、公司提过有储备区块链技术，是否可以介绍？\n\n\n1\n002177\n御银股份\n9900003781\n御银股份：2016年4月21日投资者关系活动记录表\n2016-04-21\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n4、公司在区块链技术上未来有什么规划？\n\n\n2\n300386\n飞天诚信\n9900023058\n飞天诚信：2016年4月22日投资者关系活动记录表\n2016-04-25\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n公司在区块链部分如何布局?\n\n\n3\n000997\n新 大 陆\ngssz0000997\n新 大 陆：董事会关于本次募集资金使用的可行性分析\n2016-06-03\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n支付行业技术创新和业务创新不断涌现，包括 NFC、条码（二维码）支付、可信服务平台（TSM）...\n\n\n4\n300423\n鲁亿通\n9900028812\n鲁亿通：关于本次交易前12个月内购买、出售资产的说明\n2016-06-09\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n同时，上市公司拟采用定价发行的方式向纪法清、孔剑平、孙奇锋、王麒诚和中信建投-数贝泽华人工智...\n\n\n\n\n\n\n\n\ndata.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 394 entries, 0 to 393\nData columns (total 7 columns):\n #   Column               Non-Null Count  Dtype \n---  ------               --------------  ----- \n 0   secCode              394 non-null    object\n 1   secName              394 non-null    object\n 2   orgId                394 non-null    object\n 3   announcementTitle    394 non-null    object\n 4   announcementTime     394 non-null    object\n 5   adjunctUrl           394 non-null    object\n 6   announcementContent  394 non-null    object\ndtypes: object(7)\nmemory usage: 21.7+ KB\n\n\n\ndef get_json(codedata, seDate):\n    \"\"\"获取 json 数据\n\n    Args:\n        codedata (str): 'code,orgId'\n        seDate (str): '2019-05-03~2019-05-05'\n\n    Returns:\n        res.json(): json data\n    \"\"\"\n    url = 'http://www.cninfo.com.cn/new/hisAnnouncement/query'\n    headers = {\n        \"Accept-Encoding\": \"gzip\",\n        \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36\",\n    }\n    \n    payload = {\n#       'stock': 'code,orgId',\n        'tabName': 'fulltext',\n        'pageSize': '30',\n        'pageNum': '1',\n        'column': 'szse',\n        'category': 'category_yjygjxz_szsh;category_qyfpxzcs_szsh;category_zf_szsh;category_jj_szsh;category_tbclts_szsh;category_tszlq_szsh;category_ndbg_szsh;category_bndbg_szsh;category_yjdbg_szsh;category_sjdbg_szsh;category_sf_szsh;category_pg_szsh;category_gszq_szsh;category_kzzq_szsh;category_gqjl_szsh;category_gqbd_szsh;category_cqdq_szsh;category_qtrz_szsh;category_zj_szsh;',\n        'plate': 'sz',\n#       'seDate': '2019-05-03~2019-05-28',\n        'isHLtitle': 'true',\n    }\n    payload['stock'] = codedata\n    payload['seDate'] = seDate\n    \n    try:\n        res = requests.post(url=url, headers=headers, params=payload)\n        return res.json()\n    except:\n        return\n\n\nget_json('300427,9900023902', '2019-05-07~2019-05-09')['totalAnnouncement']\n\n0\n\n\n\ndef filter_event(codedata, seDate):\n    data = get_json(codedata, seDate)\n    if data is not None:\n        if data['totalAnnouncement'] &gt; 0:\n            return False\n        return True\n    else:\n        logging.info(codedata)\n        return False\n\n\ncodedata = '300427,9900023902'\nseDate = '2019-05-07~2019-05-09'\nfilter_event(codedata, seDate)\n\nTrue\n\n\n\ndata.head()\n\n\n\n\n\n\n\n\nsecCode\nsecName\norgId\nannouncementTitle\nannouncementTime\nadjunctUrl\nannouncementContent\n\n\n\n\n0\n002152\n广电运通\n9900003423\n广电运通：2016年4月1日投资者关系活动记录表\n2016-04-06\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n9、公司提过有储备区块链技术，是否可以介绍？\n\n\n1\n002177\n御银股份\n9900003781\n御银股份：2016年4月21日投资者关系活动记录表\n2016-04-21\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n4、公司在区块链技术上未来有什么规划？\n\n\n2\n300386\n飞天诚信\n9900023058\n飞天诚信：2016年4月22日投资者关系活动记录表\n2016-04-25\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n公司在区块链部分如何布局?\n\n\n3\n000997\n新 大 陆\ngssz0000997\n新 大 陆：董事会关于本次募集资金使用的可行性分析\n2016-06-03\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n支付行业技术创新和业务创新不断涌现，包括 NFC、条码（二维码）支付、可信服务平台（TSM）...\n\n\n4\n300423\n鲁亿通\n9900028812\n鲁亿通：关于本次交易前12个月内购买、出售资产的说明\n2016-06-09\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n同时，上市公司拟采用定价发行的方式向纪法清、孔剑平、孙奇锋、王麒诚和中信建投-数贝泽华人工智...\n\n\n\n\n\n\n\n\nfinal_code = []\nfor code,orgId,time in zip(data.loc[:, 'secCode'], data.loc[:, 'orgId'], data.loc[:, 'announcementTime']):\n    codedata = code + ',' + orgId\n    # [-1,1]\n    start = (date.fromisoformat(time) - timedelta(days=1)).strftime('%Y-%m-%d')\n    end = (date.fromisoformat(time) + timedelta(days=1)).strftime('%Y-%m-%d')\n    sedate = start + '~' + end\n    if filter_event(codedata, seDate):\n        final_code.append(code)\n\n\nlen(final_code)\n\n330\n\n\n\ndef filter_code(c):\n    if c in final_code:\n        return True\n    return False\n\n\nfinal = data.loc[data.loc[:, 'secCode'].apply(lambda c: filter_code(c)), :]\n\n\nfinal\n\n\n\n\n\n\n\n\nsecCode\nsecName\norgId\nannouncementTitle\nannouncementTime\nadjunctUrl\nannouncementContent\n\n\n\n\n0\n002152\n广电运通\n9900003423\n广电运通：2016年4月1日投资者关系活动记录表\n2016-04-06\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n9、公司提过有储备区块链技术，是否可以介绍？\n\n\n1\n002177\n御银股份\n9900003781\n御银股份：2016年4月21日投资者关系活动记录表\n2016-04-21\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n4、公司在区块链技术上未来有什么规划？\n\n\n2\n300386\n飞天诚信\n9900023058\n飞天诚信：2016年4月22日投资者关系活动记录表\n2016-04-25\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n公司在区块链部分如何布局?\n\n\n4\n300423\n鲁亿通\n9900028812\n鲁亿通：关于本次交易前12个月内购买、出售资产的说明\n2016-06-09\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n同时，上市公司拟采用定价发行的方式向纪法清、孔剑平、孙奇锋、王麒诚和中信建投-数贝泽华人工智...\n\n\n5\n000961\n中南建设\ngssz0000961\n中南建设：关于本公司投资上海承泰信息科技股份有限公司的进展公告\n2016-06-23\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n，以区块链技术处理玛娜花园不同版本的个人数据，形成对数据信息的安全保护。\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n388\n300133\n华策影视\n9900013428\n华策影视：关于全资子公司增资扩股暨关联交易的公告\n2021-12-17\nhttp://static.cninfo.com.cn/finalpage/2021-12-...\n影业上海基于节目库搭建的正版影视素材库“华策新视界”已进入正式运营，目前正在推进基于区块链技...\n\n\n389\n300235\n方直科技\n9900011849\n方直科技：关于对深圳证券交易所关注函的回复公告\n2021-12-20\nhttp://static.cninfo.com.cn/finalpage/2021-12-...\n元宇宙是整合多种新技术而产生的新型虚实相融的互联网应用和社会形态，它基于扩展现实技术提供沉浸...\n\n\n390\n300649\n杭州园林\n9900023811\n杭州园林：关于收购参股公司部分股权的公告\n2021-12-24\nhttp://static.cninfo.com.cn/finalpage/2021-12-...\n一般项目：网络技术服务；物联网技术服务；技术服务、技术开发、技术咨询、技术交流、技术转让、技...\n\n\n391\n300533\n冰川网络\n9900027730\n冰川网络：关于全资子公司设立三家子公司并完成工商注册登记的公告\n2021-12-24\nhttp://static.cninfo.com.cn/finalpage/2021-12-...\n人工智能通用应用系统；智能控制系统集成；量子计算技术服务；电竞信息科技；云计算装备技术服务；...\n\n\n392\n301116\n益客食品\n9900028946\n益客食品：法律意见书及补充法律意见书\n2021-12-27\nhttp://static.cninfo.com.cn/finalpage/2021-12-...\n不含特种设备制造）；液气密元件及系统制造；工业自动控制系统装置销售；物料搬运装备销售；非居住...\n\n\n\n\n330 rows × 7 columns\n\n\n\n\nfinal.to_csv('./data/final.csv', index=False, encoding='utf_8_sig')"
  },
  {
    "objectID": "posts/2023-03-15-三门问题/index.html",
    "href": "posts/2023-03-15-三门问题/index.html",
    "title": "三门问题，直觉究竟去了哪里？",
    "section": "",
    "text": "三门问题也被称为蒙提霍尔问题，传言出自于美国的电视游戏节目 Let’s Make a Deal。\n游戏是这样设置的，参赛者会面对三扇门，其中一扇门后面有一辆汽车，另外两扇门后面是两头羊。参赛者自由选择一扇门，然后主持人会开启剩下两扇门中的一扇，露出其中一头羊。这时候，主持人会询问参赛者要不要改变选择。如果是你，你会改变选择么？\n答案是应该改变选择，换剩下那扇门赢得汽车的概率是 \\frac{2}{3}，不换赢得汽车的概率只有 \\frac{1}{3}。 很多人会认为改不改变选择其实无所谓，打开一扇门之后，还剩下两扇门，这两扇门后面有一辆车和一头羊，所以改变选择赢得汽车的概率为 \\frac{1}{2}。而根据答案，改变选择赢得汽车的概率是 \\frac{2}{3}，大于 \\frac{1}{2}，说明主持人打开一扇门露出羊的行为，远比我们想象的提供了更多的信息。\n\n使用条件概率计算\n事实上，这是一个条件概率问题。记参赛者改变选择赢得汽车为事件 A，参赛者第一次选择的那扇门后是汽车为事件 B_{1}，第一次选择的那扇门后是羊为事件 B_{2}，主持人打开的门后面是羊为事件 C。那么我们要求的概率为：\n\nP(A/C) = \\frac{P(AC)}{P(C)}\n\n这里，P(AC) 为主持人打开的门后面是羊，同时参赛者改变选择赢得汽车的概率，我们可以使用全概率公式求解，即分两种情况，参赛者第一次选择的那扇门后是汽车，与参赛者第一次选择的那扇门后是羊：\n\n\\begin{aligned}\nP(AC) &= P(AC/B_{1}) \\times P(B_{1}) + P(AC/B_{2}) \\times P(B_{2}) \\\\\\\nP(AC) &= 0 \\times \\frac{1}{3} + 1 \\times \\frac{2}{3} \\\\\\\nP(AC) &= \\frac{2}{3}\n\\end{aligned}\n\n不难理解，当参赛者第一次选择的门后是车时，此时主持人随意选择一扇门，参赛者改变选择赢得汽车的概率为 0，即 P(AC/B_{1}) 为 0。当参赛者第一次选择的门后是羊时，由于主持人知道剩下的两扇门背后的情况，那么他一定会打开有羊的那扇门，此时参赛者改变选择赢得汽车的概率为 1，即 P(AC/B_{2}) 为 1。由此可以计算出 P(AC)=\\frac{2}{3}。\n同理我们也可以用全概率公式计算 P(C):\n\n\\begin{aligned}\nP(C) &= P(C/B_{1}) \\times P(B_{1}) + P(C/B_{2}) \\times P(B_{2}) \\\\\\\nP(C) &= 1 \\times \\frac{1}{3} + 1 \\times \\frac{2}{3} \\\\\\\nP(C) &= 1\n\\end{aligned}\n\n事实上，无论参赛者第一次选择的门背后是车还是羊，主持人打开的门背后是羊的概率都为 1，因为主持人知道门背后的情况。\n由此我们可以计算出在主持人打开的门后面是羊的情况下，参赛者改变选择赢得汽车的概率为：\n\nP(A/C) = \\frac{\\frac{2}{3}}{1} = \\frac{2}{3}\n\n\n\n如果主持人不了解门后的情况呢？\n通过上面的计算，我们发现主持人打开剩下的一扇门提供了更多的信息，本质上是因为主持人了解门背后的情况。那么，如果我们假设主持人不知道门背后的情况，记事件 C 为主持人打开剩下一扇门，那扇门背后恰好是羊，那么这个时候我们要不要改变选择呢？\n我们依然可以使用条件概率和全概率公式来计算：\n\n\\begin{aligned}\nP(A/C) &= \\frac{P(AC)}{P(C)} \\\\\\\nP(A/C) &= \\frac{P(AC/B_{1}) \\times P(B_{1}) + P(AC/B_{2}) \\times P(B_{2})}{P(C/B_{1}) \\times P(B_{1}) + P(C/B_{2}) \\times P(B_{2})} \\\\\\\nP(A/C) &= \\frac{0 \\times \\frac{1}{3} + \\frac{1}{2} \\times \\frac{2}{3}}{1 \\times \\frac{1}{3} + \\frac{1}{2} \\times \\frac{2}{3}} \\\\\\\nP(A/C) &= \\frac{1}{2}\n\\end{aligned}\n\n正好是 \\frac{1}{2}，符合我们的直觉，参赛者改不改变选择都一样。这里需要注意，此时 P(C) 不为 1，因为主持人不清楚门背后的情况。P(AC/B_{2}) 也不等于 \\frac{2}{3}，因为当参赛者第一次选择的门后是羊时，主持人打开剩下一扇门背后恰好是羊的概率为 \\frac{1}{2}。\n\n\n一个简单的想法\n一个简单的想法是参赛者第一次选到车的概率为 \\frac{1}{3}，车在剩下两扇门的概率为 \\frac{2}{3}。主持人打开一扇门后，这 \\frac{2}{3} 的概率都被挤到剩下那扇门上去了，所以参赛者改变选择赢得汽车的概率为 \\frac{2}{3}。\n另外一个想法是，假设有 1000 扇门，你首先选择了一扇门，然后主持人打开了剩下的 999 扇门中的 998 扇门，门后都是羊。那么这个时候你还会坚持最初的选择么？你会认为自己就是那个上天眷顾的人，一开始就做了正确的选择么😀"
  },
  {
    "objectID": "posts/2023-01-13-爬取新浪财经ESG评级指数/index.html",
    "href": "posts/2023-01-13-爬取新浪财经ESG评级指数/index.html",
    "title": "爬取新浪财经ESG评级指数",
    "section": "",
    "text": "新浪财经的 ESG 评级指数页面分页利用了 JS 进行动态渲染，因为数据量不大，就利用 Selenium 来爬取。 \n\nfrom selenium import webdriver\nfrom selenium.webdriver import ChromeOptions\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.support.wait import WebDriverWait\nfrom selenium.common.exceptions import StaleElementReferenceException\n\nimport time\nimport logging\nimport pandas as pd\n\nfrom tqdm import tqdm\n\n我们利用 CSS 选择器来解析所需数据，然后模拟点击下一页，循环解析。\n这里存在的一个问题是，点击下一页后，JS 渲染需要时间，页面可能还在加载，这时候 browser.find_elements() 会报错 StaleElementReferenceException。一个选择是在每次解析数据前做一个判断，判断所需数据是否已经加载出来了。而由于网站没有反爬措施，另一个选择是暴力循环，直到页面加载出来。\n\ndef parse_data(page):\n    while True:\n        try:\n            # use CSS selectors to locate the data\n            lft_list = [\n                element.text for element in browser.find_elements(\n                    By.CSS_SELECTOR, '#lft-name-list i'\n                )\n            ]\n            esg_score = [\n                element.text for element in browser.find_elements(\n                    By.CSS_SELECTOR, 'div[data-key=\"esg_score\"] li'\n                )\n            ]\n            env_score = [\n                element.text for element in browser.find_elements(\n                    By.CSS_SELECTOR, 'div[data-key=\"env_score\"] li'\n                )\n            ]\n            social_score = [\n                element.text for element in browser.find_elements(\n                    By.CSS_SELECTOR, 'div[data-key=\"social_score\"] li'\n                )\n            ]\n            governance_score = [\n                element.text for element in browser.find_elements(\n                    By.CSS_SELECTOR, 'div[data-key=\"governance_score\"] li'\n                )\n            ]\n\n            data_dic = {\n                    \"lft_list\" : lft_list,\n                    \"esg_score\" : esg_score,\n                    \"env_score\" : env_score,\n                    \"social_score\" : social_score,\n                    \"governance_score\" : governance_score,\n            }\n            \n            if page &lt; 510:\n            # locate the next page button and click\n                button = browser.find_element(By.CSS_SELECTOR, '.pages-rt')\n                button.click()\n            else:\n                pass\n        except Exception as e:\n            # waiting 0.2s for page refresh if the Exception is StaleElementReferenceException,\n            if isinstance(e, StaleElementReferenceException):\n                time.sleep(0.2)\n            else:\n                logging.warning(e)\n                break\n        else:\n            break\n    \n    return data_dic  \n\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s: %(message)s'\n)\n\n# basic settings for headless browser and anti-detection\noption = ChromeOptions()\noption.add_argument('--headless')\noption.add_experimental_option('excludeSwitches', ['enable-automation'])\noption.add_experimental_option('useAutomationExtension', False)\n\nbrowser = webdriver.Chrome(options=option)\nbrowser.execute_cdp_cmd(\n    'Page.addScriptToEvaluateOnNewDocument', {\n    'source': 'Object.defineProperty(navigator, \"webdriver\", {get: () =&gt; undefined})'\n})\n\n{'identifier': '2'}\n\n\n\nwait = WebDriverWait(browser, 5)\nres = []\n\ntry:\n    browser.get('https://finance.sina.com.cn/esg/grade.shtml')\n    wait.until(\n        EC.visibility_of_all_elements_located((By.CSS_SELECTOR, '.lft-bodylist'))\n    )\nexcept Exception as e:\n    logging.warning(e)\n    \nfor page in tqdm(range(1, 511)):\n    data_dic = parse_data(page)\n    res.append(data_dic)\nelse:\n    browser.close()\n    browser.quit()\n\n2023-01-14 20:13:53,283 - WARNING: Message: \n\n100%|████████████████████████████████████████████████████████████████████████████████| 510/510 [14:00&lt;00:00,  1.65s/it]\n\n\n\nESG = pd.DataFrame(\n    columns=['lft_list', 'esg_score', 'env_score', 'social_score', 'governance_score']\n)\nfor data_df in [pd.DataFrame(data_dic) for data_dic in res]:\n    ESG = ESG.append(data_df)\n\n\nESG.head(5).append(ESG.tail(5))\n\n\n\n\n\n\n\n\nlft_list\nesg_score\nenv_score\nsocial_score\ngovernance_score\n\n\n\n\n0\n酒鬼酒\n15.3(D)\n3.4(D-)\n10.3(D)\n38.9(C)\n\n\n1\n耐斯系统\n61.4(B)\n38.9(C)\n60.2(B)\n69.3(B+)\n\n\n2\nSunCoke Energy\n60.6(B)\n68.9(B+)\n56.6(B-)\n55.1(B-)\n\n\n3\n普尔斯玛特\n31.5(C-)\n8.9(D)\n40.8(C)\n41.6(C)\n\n\n4\n新城发展\n53.3(B-)\n30.3(C-)\n43.6(C+)\n86.1(A)\n\n\n6\n华能国际电力股份\n51.1(B-)\n61.2(B)\n41.1(C)\n46.7(C+)\n\n\n7\n安徽皖通高速公路\n44.7(C+)\n51.2(B-)\n41.1(C)\n43.4(C+)\n\n\n8\n民生银行\n47.4(C+)\n37.0(C)\n71.4(B+)\n18.3(D+)\n\n\n9\n中远海能\n57.1(B-)\n61.1(B)\n38.7(C)\n78.8(A-)\n\n\n0\n中国石油化工股份\n58.8(B)\n69.9(B+)\n50.3(B-)\n57.9(B-)\n\n\n\n\n\n\n\n\nESG.to_csv('ESG.csv', index=False)"
  },
  {
    "objectID": "posts/2023-02-02-手把手教你做事件研究-事件研究/index.html",
    "href": "posts/2023-02-02-手把手教你做事件研究-事件研究/index.html",
    "title": "手把手教你做事件研究-CAR计算与显著性检验",
    "section": "",
    "text": "事件研究法基本步骤\n\n定义事件与事件窗口\n研究样本选择与数据准备\n估计正常收益率与计算异常收益率\n累计异常收益率计算与显著性检验\n\n\nimport datetime\nimport logging\n\nimport pandas as pd\nimport numpy as np\n\nimport statsmodels.api as sm\nimport tushare as ts\n\n\n日个股回报率：国泰安数据库（Tushare、Baostock）\n3 因子数据：国泰安数据库\n无风险利率：3 个月定期存款利率\n\n\ndata_2013_2017 = pd.read_csv('./data/日个股回报率文件2013_2017/TRD_Dalyr.csv', dtype={'Stkcd':str})\ndata_2013_2017_1 = pd.read_csv('./data/日个股回报率文件2013_2017/TRD_Dalyr1.csv', dtype={'Stkcd':str})\ndata_2013_2017_2 = pd.read_csv('./data/日个股回报率文件2013_2017/TRD_Dalyr2.csv', dtype={'Stkcd':str})\ndata_2013_2017_3 = pd.read_csv('./data/日个股回报率文件2013_2017/TRD_Dalyr3.csv', dtype={'Stkcd':str})\n\ndata_2018_2022 = pd.read_csv('./data/日个股回报率文件2018_2022/TRD_Dalyr.csv', dtype={'Stkcd':str})\ndata_2018_2022_1 = pd.read_csv('./data/日个股回报率文件2018_2022/TRD_Dalyr1.csv', dtype={'Stkcd':str})\ndata_2018_2022_2 = pd.read_csv('./data/日个股回报率文件2018_2022/TRD_Dalyr2.csv', dtype={'Stkcd':str})\ndata_2018_2022_3 = pd.read_csv('./data/日个股回报率文件2018_2022/TRD_Dalyr3.csv', dtype={'Stkcd':str})\n\n\n# data:按流通市值加权的A股日收益率数据\ndata = pd.concat([data_2013_2017, data_2013_2017_1, data_2013_2017_2, data_2013_2017_3,\n                  data_2018_2022, data_2018_2022_1, data_2018_2022_2, data_2018_2022_3])\n\n\nlen(data)\n\n7012621\n\n\n\ndata.head()\n\n\n\n\n\n\n\n\nStkcd\nTrddt\nDretwd\n\n\n\n\n0\n000001\n2013-01-04\n-0.001873\n\n\n1\n000001\n2013-01-07\n0.019387\n\n\n2\n000001\n2013-01-08\n-0.018405\n\n\n3\n000001\n2013-01-09\n-0.008750\n\n\n4\n000001\n2013-01-10\n0.000631\n\n\n\n\n\n\n\n\ndata = data.rename(columns={'Trddt':'TradingDate'}) # 更改列名，方便后续做比较合并\n\n\n# 整理 3因子数据\nff_factor = pd.read_csv('./data/3factor.csv', skiprows=[1,2], converters= {'TradingDate': pd.to_datetime})\n\n\nff_factor.head(5)\n\n\n\n\n\n\n\n\nMarkettypeID\nTradingDate\nRiskPremium1\nSMB1\nHML1\n\n\n\n\n0\nP9706\n1990-12-19\n2.473374\nNaN\nNaN\n\n\n1\nP9710\n1990-12-19\n2.473374\nNaN\nNaN\n\n\n2\nP9709\n1990-12-19\n2.473374\nNaN\nNaN\n\n\n3\nP9712\n1990-12-19\n2.473374\nNaN\nNaN\n\n\n4\nP9713\n1990-12-19\n2.473374\nNaN\nNaN\n\n\n\n\n\n\n\n\n# 无风险利率数据\nrisk_free_rate = pd.read_excel('./data/定期存款利率_3个月.xlsx', dtype={'指标名称':datetime.date})\n\n\nrisk_free_rate.head(5)\n\n\n\n\n\n\n\n\n指标名称\n定期存款利率:3个月(月)\n\n\n\n\n0\n1989-02-28\n7.56\n\n\n1\n1989-03-31\n7.56\n\n\n2\n1989-04-30\n7.56\n\n\n3\n1989-05-31\n7.56\n\n\n4\n1989-06-30\n7.56\n\n\n\n\n\n\n\n\nr_dict = {}\nfor t,r in zip(risk_free_rate.iloc[:,0], risk_free_rate.iloc[:,1]):\n    t_temp = t + datetime.timedelta(days=10) # 月底公布下月三月定期存款利率，+10天将日期对应到下月\n    r_dict[str(t_temp.year) + str(t_temp.month)] = r/100\n    \nr_list = []\nfor t in ff_factor.iloc[:,1]:\n    r = r_dict[str(t.year)+str(t.month)]\n    r_list.append(r)\n    \nff_factor[['r']] = np.array(r_list).reshape(-1,1) # 将无风险利率添加到 ff 三因子表格内，方便后续回归拟合|\n\n\nff_factor.head(5)\n\n\n\n\n\n\n\n\nMarkettypeID\nTradingDate\nRiskPremium1\nSMB1\nHML1\nr\n\n\n\n\n0\nP9706\n1990-12-19\n2.473374\nNaN\nNaN\n0.0432\n\n\n1\nP9710\n1990-12-19\n2.473374\nNaN\nNaN\n0.0432\n\n\n2\nP9709\n1990-12-19\n2.473374\nNaN\nNaN\n0.0432\n\n\n3\nP9712\n1990-12-19\n2.473374\nNaN\nNaN\n0.0432\n\n\n4\nP9713\n1990-12-19\n2.473374\nNaN\nNaN\n0.0432\n\n\n\n\n\n\n\n\nff_factor['TradingDate'] = ff_factor['TradingDate'].astype(str) # 将时间列转化为字符串类型，方便后续做判断合并\n\n\nsample = pd.read_csv('./data/final.csv', dtype={'secCode':str})\nsample.head()\n\n\n\n\n\n\n\n\nsecCode\nsecName\norgId\nannouncementTitle\nannouncementTime\nadjunctUrl\nannouncementContent\n\n\n\n\n0\n002152\n广电运通\n9900003423\n广电运通：2016年4月1日投资者关系活动记录表\n2016-04-06\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n9、公司提过有储备区块链技术，是否可以介绍？\n\n\n1\n002177\n御银股份\n9900003781\n御银股份：2016年4月21日投资者关系活动记录表\n2016-04-21\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n4、公司在区块链技术上未来有什么规划？\n\n\n2\n300386\n飞天诚信\n9900023058\n飞天诚信：2016年4月22日投资者关系活动记录表\n2016-04-25\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n公司在区块链部分如何布局?\n\n\n3\n300423\n鲁亿通\n9900028812\n鲁亿通：关于本次交易前12个月内购买、出售资产的说明\n2016-06-09\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n同时，上市公司拟采用定价发行的方式向纪法清、孔剑平、孙奇锋、王麒诚和中信建投-数贝泽华人工智...\n\n\n4\n000961\n中南建设\ngssz0000961\n中南建设：关于本公司投资上海承泰信息科技股份有限公司的进展公告\n2016-06-23\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n，以区块链技术处理玛娜花园不同版本的个人数据，形成对数据信息的安全保护。\n\n\n\n\n\n\n\n\npro = ts.pro_api()\n\n# 查询当前所有正常上市交易和退市的股票列表\nstocks_L = pro.stock_basic(exchange='', list_status='L', fields='symbol,name,area,industry,list_date,market')\nstocks_D = pro.stock_basic(exchange='', list_status='D', fields='symbol,name,area,industry,list_date,market')\n\n\nstocks_L.head()\n\n\n\n\n\n\n\n\nsymbol\nname\narea\nindustry\nmarket\nlist_date\n\n\n\n\n0\n000001\n平安银行\n深圳\n银行\n主板\n19910403\n\n\n1\n000002\n万科A\n深圳\n全国地产\n主板\n19910129\n\n\n2\n000004\nST国华\n深圳\n软件服务\n主板\n19910114\n\n\n3\n000005\nST星源\n深圳\n环境保护\n主板\n19901210\n\n\n4\n000006\n深振业A\n深圳\n区域地产\n主板\n19920427\n\n\n\n\n\n\n\n\nstocks_D.head()\n\n\n\n\n\n\n\n\nsymbol\nname\narea\nindustry\nmarket\nlist_date\n\n\n\n\n0\n000003\nPT金田A(退)\nNone\nNone\n主板\n19910703\n\n\n1\n000013\n*ST石化A(退)\nNone\nNone\n主板\n19920506\n\n\n2\n000015\nPT中浩A(退)\nNone\nNone\n主板\n19920625\n\n\n3\n000018\n神城A退(退)\nNone\nNone\n主板\n19920616\n\n\n4\n000024\n招商地产(退)\nNone\nNone\n主板\n19930607\n\n\n\n\n\n\n\n\nstocks = pd.concat([stocks_L, stocks_D])\n\n\n# 构造一个 code:market 字典\ncm_dict = {}\nfor c,m in zip(stocks.loc[:,'symbol'], stocks.loc[:,'market']):\n    cm_dict[c] = m\n    \nmarket_l = []\nfor code in sample.loc[:, 'secCode']:\n    m = cm_dict[code]\n    market_l.append(m)\n\nsample[['market']] = np.array(market_l).reshape(-1, 1)\n\n\nsample.head()\n\n\n\n\n\n\n\n\nsecCode\nsecName\norgId\nannouncementTitle\nannouncementTime\nadjunctUrl\nannouncementContent\nmarket\n\n\n\n\n0\n002152\n广电运通\n9900003423\n广电运通：2016年4月1日投资者关系活动记录表\n2016-04-06\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n9、公司提过有储备区块链技术，是否可以介绍？\n中小板\n\n\n1\n002177\n御银股份\n9900003781\n御银股份：2016年4月21日投资者关系活动记录表\n2016-04-21\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n4、公司在区块链技术上未来有什么规划？\n中小板\n\n\n2\n300386\n飞天诚信\n9900023058\n飞天诚信：2016年4月22日投资者关系活动记录表\n2016-04-25\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n公司在区块链部分如何布局?\n创业板\n\n\n3\n300423\n鲁亿通\n9900028812\n鲁亿通：关于本次交易前12个月内购买、出售资产的说明\n2016-06-09\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n同时，上市公司拟采用定价发行的方式向纪法清、孔剑平、孙奇锋、王麒诚和中信建投-数贝泽华人工智...\n创业板\n\n\n4\n000961\n中南建设\ngssz0000961\n中南建设：关于本公司投资上海承泰信息科技股份有限公司的进展公告\n2016-06-23\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n，以区块链技术处理玛娜花园不同版本的个人数据，形成对数据信息的安全保护。\n主板\n\n\n\n\n\n\n\n\n# MarkettypeID [股票市场类型编码] - P9705：创业板;P9706：综合A股市场（不包含科创板、创业板）;\n# P9707：综合B股市场;P9709：综合A股和创业板; P9710：综合AB股和创业板；P9711：科创板；\n# 构造一个 market:markettypeID 字典\nmm_dict = {'中小板':'P9706', '主板':'P9706', '创业板':'P9705', '科创板':'P9711'}\n\nmarkettypeID = []\nfor m in sample.loc[:,'market']:\n    m_id = mm_dict[m]\n    markettypeID.append(m_id)\n\nsample[['markettypeID']] = np.array(markettypeID).reshape(-1,1)\n\n\nsample\n\n\n\n\n\n\n\n\nsecCode\nsecName\norgId\nannouncementTitle\nannouncementTime\nadjunctUrl\nannouncementContent\nmarket\nmarkettypeID\n\n\n\n\n0\n002152\n广电运通\n9900003423\n广电运通：2016年4月1日投资者关系活动记录表\n2016-04-06\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n9、公司提过有储备区块链技术，是否可以介绍？\n中小板\nP9706\n\n\n1\n002177\n御银股份\n9900003781\n御银股份：2016年4月21日投资者关系活动记录表\n2016-04-21\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n4、公司在区块链技术上未来有什么规划？\n中小板\nP9706\n\n\n2\n300386\n飞天诚信\n9900023058\n飞天诚信：2016年4月22日投资者关系活动记录表\n2016-04-25\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n公司在区块链部分如何布局?\n创业板\nP9705\n\n\n3\n300423\n鲁亿通\n9900028812\n鲁亿通：关于本次交易前12个月内购买、出售资产的说明\n2016-06-09\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n同时，上市公司拟采用定价发行的方式向纪法清、孔剑平、孙奇锋、王麒诚和中信建投-数贝泽华人工智...\n创业板\nP9705\n\n\n4\n000961\n中南建设\ngssz0000961\n中南建设：关于本公司投资上海承泰信息科技股份有限公司的进展公告\n2016-06-23\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n，以区块链技术处理玛娜花园不同版本的个人数据，形成对数据信息的安全保护。\n主板\nP9706\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n325\n300133\n华策影视\n9900013428\n华策影视：关于全资子公司增资扩股暨关联交易的公告\n2021-12-17\nhttp://static.cninfo.com.cn/finalpage/2021-12-...\n影业上海基于节目库搭建的正版影视素材库“华策新视界”已进入正式运营，目前正在推进基于区块链技...\n创业板\nP9705\n\n\n326\n300235\n方直科技\n9900011849\n方直科技：关于对深圳证券交易所关注函的回复公告\n2021-12-20\nhttp://static.cninfo.com.cn/finalpage/2021-12-...\n元宇宙是整合多种新技术而产生的新型虚实相融的互联网应用和社会形态，它基于扩展现实技术提供沉浸...\n创业板\nP9705\n\n\n327\n300649\n杭州园林\n9900023811\n杭州园林：关于收购参股公司部分股权的公告\n2021-12-24\nhttp://static.cninfo.com.cn/finalpage/2021-12-...\n一般项目：网络技术服务；物联网技术服务；技术服务、技术开发、技术咨询、技术交流、技术转让、技...\n创业板\nP9705\n\n\n328\n300533\n冰川网络\n9900027730\n冰川网络：关于全资子公司设立三家子公司并完成工商注册登记的公告\n2021-12-24\nhttp://static.cninfo.com.cn/finalpage/2021-12-...\n人工智能通用应用系统；智能控制系统集成；量子计算技术服务；电竞信息科技；云计算装备技术服务；...\n创业板\nP9705\n\n\n329\n301116\n益客食品\n9900028946\n益客食品：法律意见书及补充法律意见书\n2021-12-27\nhttp://static.cninfo.com.cn/finalpage/2021-12-...\n不含特种设备制造）；液气密元件及系统制造；工业自动控制系统装置销售；物料搬运装备销售；非居住...\n创业板\nP9705\n\n\n\n\n330 rows × 9 columns\n\n\n\n\ndaily_returns = data.loc[data.iloc[:,0] == '002152']\n\n\ndaily_returns\n\n\n\n\n\n\n\n\nStkcd\nTradingDate\nDretwd\n\n\n\n\n676981\n002152\n2013-01-04\n-0.019027\n\n\n676982\n002152\n2013-01-07\n-0.008621\n\n\n676983\n002152\n2013-01-08\n0.011594\n\n\n676984\n002152\n2013-01-09\n0.002865\n\n\n676985\n002152\n2013-01-10\n-0.003571\n\n\n...\n...\n...\n...\n\n\n612679\n002152\n2022-03-10\n0.008427\n\n\n612680\n002152\n2022-03-11\n0.016713\n\n\n612681\n002152\n2022-03-14\n-0.011872\n\n\n612682\n002152\n2022-03-15\n-0.046211\n\n\n612683\n002152\n2022-03-16\n0.023256\n\n\n\n\n2173 rows × 3 columns\n\n\n\n\ndef get_window(code, t, m_id):\n    \"\"\"获取事件期和理论收益率估计期\n\n    Args:\n        code (str): stock code\n        t (str): announcement date\n        m_id (str): MarkettypeID\n\n    Returns:\n        eventWD (DataFrame): event window\n        estimationWD (DataFrame): estimation window\n    \"\"\"\n    # 个股日收益率数据\n    daily_returns = data.loc[data.iloc[:,0] == code]\n    # 交易日数据\n    trading_dates = daily_returns.loc[:, 'TradingDate'] \n    \n    t_1 = (datetime.date.fromisoformat(t) + datetime.timedelta(days=1)).strftime('%Y-%m-%d')\n    t_2 = (datetime.date.fromisoformat(t) + datetime.timedelta(days=2)).strftime('%Y-%m-%d')\n    t_3 = (datetime.date.fromisoformat(t) + datetime.timedelta(days=3)).strftime('%Y-%m-%d')\n    t_4 = (datetime.date.fromisoformat(t) + datetime.timedelta(days=4)).strftime('%Y-%m-%d')\n    t_5 = (datetime.date.fromisoformat(t) + datetime.timedelta(days=5)).strftime('%Y-%m-%d')\n    t_6 = (datetime.date.fromisoformat(t) + datetime.timedelta(days=6)).strftime('%Y-%m-%d')\n    t_7 = (datetime.date.fromisoformat(t) + datetime.timedelta(days=7)).strftime('%Y-%m-%d')\n    \n    # 判断公告日是否为交易日，年假最长 7 天\n    if t in list(trading_dates): \n        i = list(trading_dates).index(t)\n    elif t_1 in list(trading_dates):\n        i = list(trading_dates).index(t_1)\n    elif t_2 in list(trading_dates):\n        i = list(trading_dates).index(t_2)\n    elif t_3 in list(trading_dates):\n        i = list(trading_dates).index(t_3)\n    elif t_4 in list(trading_dates):\n        i = list(trading_dates).index(t_4)\n    elif t_5 in list(trading_dates):\n        i = list(trading_dates).index(t_5)\n    elif t_6 in list(trading_dates):\n        i = list(trading_dates).index(t_6)\n    elif t_7 in list(trading_dates):\n        i = list(trading_dates).index(t_7)\n    else:\n        i = 0\n        \n    # 估计期为 200 天   \n    # 公司上市时间较短时，估计期数据不够\n    if i &gt;= 210:\n        eventWD = daily_returns.iloc[i-1:i+2, :]\n        estimationWD = daily_returns.iloc[i-210:i-10, :]\n        eventWD.insert(0,'MarkettypeID', m_id)\n        estimationWD.insert(0, 'MarkettypeID', m_id)\n        return estimationWD, eventWD\n    else:\n        return\n\n\ndef abnormal_return(estimationWD, eventWD, ff_factor):\n    \"\"\"获取异常收益率\n\n    Args:\n        estimationWD (DataFrame): estimation window\n        eventWD (DataFrame): event window\n        ff_factor (DataFrame): fama-french factors\n\n    Returns:\n        ar (array): abnormal returns\n    \"\"\"\n    \n    estimation_data = pd.merge(estimationWD, ff_factor, how='left', on=['MarkettypeID', 'TradingDate'])\n    event_data = pd.merge(eventWD, ff_factor, how='left', on=['MarkettypeID', 'TradingDate'])\n\n    X = estimation_data.loc[:,['RiskPremium1','SMB1','HML1']].values\n    X = sm.add_constant(X)\n    y = np.array(estimation_data.loc[:,'Dretwd']-estimation_data.loc[:,'r']).reshape(-1,1)\n    model = sm.OLS(y, X)\n    result = model.fit()\n\n    # rr: 理论收益率\n    rr = (np.dot(\n        sm.add_constant(event_data.loc[:,['RiskPremium1','SMB1','HML1']].values),\n        result.params.reshape(-1,1)) \n        + event_data.loc[:,'r'].values.reshape(-1,1))\n\n    # ar: 异常收益率，每只股票在事件期的收益率 array\n    ar = event_data.loc[:,'Dretwd'].values.reshape(-1,1) - rr\n    return ar\n\n\nsample.head()\n\n\n\n\n\n\n\n\nsecCode\nsecName\norgId\nannouncementTitle\nannouncementTime\nadjunctUrl\nannouncementContent\nmarket\nmarkettypeID\n\n\n\n\n0\n002152\n广电运通\n9900003423\n广电运通：2016年4月1日投资者关系活动记录表\n2016-04-06\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n9、公司提过有储备区块链技术，是否可以介绍？\n中小板\nP9706\n\n\n1\n002177\n御银股份\n9900003781\n御银股份：2016年4月21日投资者关系活动记录表\n2016-04-21\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n4、公司在区块链技术上未来有什么规划？\n中小板\nP9706\n\n\n2\n300386\n飞天诚信\n9900023058\n飞天诚信：2016年4月22日投资者关系活动记录表\n2016-04-25\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n公司在区块链部分如何布局?\n创业板\nP9705\n\n\n3\n300423\n鲁亿通\n9900028812\n鲁亿通：关于本次交易前12个月内购买、出售资产的说明\n2016-06-09\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n同时，上市公司拟采用定价发行的方式向纪法清、孔剑平、孙奇锋、王麒诚和中信建投-数贝泽华人工智...\n创业板\nP9705\n\n\n4\n000961\n中南建设\ngssz0000961\n中南建设：关于本公司投资上海承泰信息科技股份有限公司的进展公告\n2016-06-23\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n，以区块链技术处理玛娜花园不同版本的个人数据，形成对数据信息的安全保护。\n主板\nP9706\n\n\n\n\n\n\n\n\nar_l = []\ndelete_code = []\nfor code,t,m_id in zip(sample.loc[:,'secCode'], sample.loc[:,'announcementTime'], sample.loc[:,'markettypeID']):\n    try:\n        estimationWD, eventWD = get_window(code, t, m_id)\n    except:\n        delete_code.append(code)\n        continue\n        \n    ar_array = abnormal_return(estimationWD, eventWD, ff_factor)\n    ar = sum(ar_array)[0]\n    ar_l.append(ar)\n\n\nAR = pd.DataFrame(np.array(ar_l).reshape(-1,1))\n\n\nAR.describe()\n\n\n\n\n\n\n\n\n0\n\n\n\n\ncount\n304.000000\n\n\nmean\n0.014020\n\n\nstd\n0.068285\n\n\nmin\n-0.173427\n\n\n25%\n-0.018811\n\n\n50%\n0.003446\n\n\n75%\n0.032451\n\n\nmax\n0.337091\n\n\n\n\n\n\n\n\nfrom scipy import stats\n\n\nstats.ttest_1samp(ar_l, 0)\n\nTtest_1sampResult(statistic=3.579861379325141, pvalue=0.00040021773286985055)\n\n\n\nstats.wilcoxon(ar_l, len(ar_l)*[0], correction=True,alternative='two-sided')\n\nWilcoxonResult(statistic=19144.0, pvalue=0.008515412037149648)\n\n\n\ndelete_code\n\n['300423',\n '603106',\n '300612',\n '000793',\n '601619',\n '000038',\n '300654',\n '300525',\n '000061',\n '601066',\n '300773',\n '300788',\n '601512',\n '688158',\n '688051',\n '688096',\n '300975',\n '003040',\n '300996',\n '300889',\n '601686',\n '003032',\n '688135',\n '300949',\n '301213',\n '301116']\n\n\n\nlen(delete_code)\n\n26"
  },
  {
    "objectID": "posts/2023-12-31-线性相关与显著性检验/index.html",
    "href": "posts/2023-12-31-线性相关与显著性检验/index.html",
    "title": "多变量线性相关性可视化方法",
    "section": "",
    "text": "from scipy.stats import pearsonr\nimport seaborn as sns\n\n\ndata = sns.load_dataset(\"mpg\")\ndata.head()\n\n\n\n\n\n\n\n\nmpg\ncylinders\ndisplacement\nhorsepower\nweight\nacceleration\nmodel_year\norigin\nname\n\n\n\n\n0\n18.0\n8\n307.0\n130.0\n3504\n12.0\n70\nusa\nchevrolet chevelle malibu\n\n\n1\n15.0\n8\n350.0\n165.0\n3693\n11.5\n70\nusa\nbuick skylark 320\n\n\n2\n18.0\n8\n318.0\n150.0\n3436\n11.0\n70\nusa\nplymouth satellite\n\n\n3\n16.0\n8\n304.0\n150.0\n3433\n12.0\n70\nusa\namc rebel sst\n\n\n4\n17.0\n8\n302.0\n140.0\n3449\n10.5\n70\nusa\nford torino\n\n\n\n\n\n\n\n\n使用 Pandas.DataFrame.corr 计算相关系数矩阵\n使用 pandas.DataFrame.corr 方法计算相关系数矩阵。\n\ncorrelation_matrix = data.corr(numeric_only=True)\n\n\ncorrelation_matrix\n\n\n\n\n\n\n\n\nmpg\ncylinders\ndisplacement\nhorsepower\nweight\nacceleration\nmodel_year\n\n\n\n\nmpg\n1.000000\n-0.775396\n-0.804203\n-0.778427\n-0.831741\n0.420289\n0.579267\n\n\ncylinders\n-0.775396\n1.000000\n0.950721\n0.842983\n0.896017\n-0.505419\n-0.348746\n\n\ndisplacement\n-0.804203\n0.950721\n1.000000\n0.897257\n0.932824\n-0.543684\n-0.370164\n\n\nhorsepower\n-0.778427\n0.842983\n0.897257\n1.000000\n0.864538\n-0.689196\n-0.416361\n\n\nweight\n-0.831741\n0.896017\n0.932824\n0.864538\n1.000000\n-0.417457\n-0.306564\n\n\nacceleration\n0.420289\n-0.505419\n-0.543684\n-0.689196\n-0.417457\n1.000000\n0.288137\n\n\nmodel_year\n0.579267\n-0.348746\n-0.370164\n-0.416361\n-0.306564\n0.288137\n1.000000\n\n\n\n\n\n\n\n\n\n使用 seaborn.heatmap 可视化相关系数矩阵\n\nsns.heatmap(correlation_matrix, annot=True, cmap=\"coolwarm\")\n\n\n\n\n\n\n\n\n\n\n使用 seaborn.pairplot 可视化变量相关性\n\nsns.pairplot(\n    data[\n        [\n            \"mpg\",\n            \"weight\",\n            \"horsepower\",\n            \"acceleration\",\n        ]\n    ]\n)\n\n\n\n\n\n\n\n\n\n\n使用自定义函数同时返回相关系数和显著性检验结果\n\ndef corr_p(df):\n    \"\"\"Generates a tuple containing the correlation coefficients matrix and p-values matrix.\n\n    Args:\n        df (dataframe): input dataframe, each column as a feature, each row as an observation\n\n    Returns:\n        res: tuple with correlation coefficients matrix and p_values matrix\n    \"\"\"\n\n    corr_matrix = df.corr(numeric_only=True)\n\n    p_value_matrix = df.corr(numeric_only=True, method=lambda x, y: pearsonr(x, y)[1])\n\n    res = (corr_matrix, p_value_matrix)\n\n    return res\n\n\ndata_trunc = data[\n    [\n        \"mpg\",\n        \"weight\",\n        \"horsepower\",\n        \"acceleration\",\n    ]\n]\n\n\ncorr_p(data_trunc)\n\n(                   mpg    weight  horsepower  acceleration\n mpg           1.000000 -0.831741   -0.778427      0.420289\n weight       -0.831741  1.000000    0.864538     -0.417457\n horsepower   -0.778427  0.864538    1.000000     -0.689196\n acceleration  0.420289 -0.417457   -0.689196      1.000000,\n                         mpg         weight     horsepower  acceleration\n mpg            1.000000e+00  2.972800e-103   7.031989e-81  1.823092e-18\n weight        2.972800e-103   1.000000e+00  1.364347e-118  3.243794e-18\n horsepower     7.031989e-81  1.364347e-118   1.000000e+00  1.581886e-56\n acceleration   1.823092e-18   3.243794e-18   1.581886e-56  1.000000e+00)"
  },
  {
    "objectID": "posts/2024-02-05-WSL2-OhMyZsh-VSCode开发环境搭建/index.html",
    "href": "posts/2024-02-05-WSL2-OhMyZsh-VSCode开发环境搭建/index.html",
    "title": "WSL2+OhMyZsh+VSCode开发环境搭建",
    "section": "",
    "text": "wsl --install\n\n\n# 查找可用发行版\nwsl --list --online\n\n# 安装发行版\nwsl --install -d Ubuntu-22.04\n\n# 列出已安装的发行版\nwsl --list --verbose\n\n# 设置默认的 Linux 发行版\nwsl --set-default Ubuntu-22.04\n\n# 更新 WSL\nwsl --update\n\n# 检查 WSL 状态\nwsl --status\n\n# 检查 WSL 版本\nwsl --version\n\n# 关闭\nwsl --shutdown\n\n# 终止运行\nwsl --terminate Ubuntu-22.04\n\n# 导出发行版\nwsl --export &lt;Distribution Name&gt; &lt;FileName&gt;\n\n# 导入发行版\nwsl --import &lt;Distribution Name&gt; &lt;InstallLocation&gt; &lt;FileName&gt;"
  },
  {
    "objectID": "posts/2024-02-05-WSL2-OhMyZsh-VSCode开发环境搭建/index.html#wsl-基本命令",
    "href": "posts/2024-02-05-WSL2-OhMyZsh-VSCode开发环境搭建/index.html#wsl-基本命令",
    "title": "WSL2+OhMyZsh+VSCode开发环境搭建",
    "section": "",
    "text": "# 查找可用发行版\nwsl --list --online\n\n# 安装发行版\nwsl --install -d Ubuntu-22.04\n\n# 列出已安装的发行版\nwsl --list --verbose\n\n# 设置默认的 Linux 发行版\nwsl --set-default Ubuntu-22.04\n\n# 更新 WSL\nwsl --update\n\n# 检查 WSL 状态\nwsl --status\n\n# 检查 WSL 版本\nwsl --version\n\n# 关闭\nwsl --shutdown\n\n# 终止运行\nwsl --terminate Ubuntu-22.04\n\n# 导出发行版\nwsl --export &lt;Distribution Name&gt; &lt;FileName&gt;\n\n# 导入发行版\nwsl --import &lt;Distribution Name&gt; &lt;InstallLocation&gt; &lt;FileName&gt;"
  },
  {
    "objectID": "posts/2024-02-05-WSL2-OhMyZsh-VSCode开发环境搭建/index.html#安装-zsh-syntax-highlighting-和-zsh-autosuggestions",
    "href": "posts/2024-02-05-WSL2-OhMyZsh-VSCode开发环境搭建/index.html#安装-zsh-syntax-highlighting-和-zsh-autosuggestions",
    "title": "WSL2+OhMyZsh+VSCode开发环境搭建",
    "section": "安装 zsh-syntax-highlighting 和 zsh-autosuggestions",
    "text": "安装 zsh-syntax-highlighting 和 zsh-autosuggestions\n# 安装 zsh-syntax-highlighting\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n# 安装 zsh-autosuggestions\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n修改 ~/.zshrc：\nplugins=(zsh-syntax-highlighting zsh-autosuggestions)"
  },
  {
    "objectID": "posts/2024-02-05-WSL2-OhMyZsh-VSCode开发环境搭建/index.html#安装-oh-my-zsh",
    "href": "posts/2024-02-05-WSL2-OhMyZsh-VSCode开发环境搭建/index.html#安装-oh-my-zsh",
    "title": "WSL2+OhMyZsh+VSCode开发环境搭建",
    "section": "安装 oh-my-zsh",
    "text": "安装 oh-my-zsh\nsh -c \"$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n关于 oh-my-zsh 的一些常用命令：\n# 更新\nomz update\n\n# 卸载\nuninstall_oh_my_zsh"
  },
  {
    "objectID": "posts/2024-02-05-WSL2-OhMyZsh-VSCode开发环境搭建/index.html#配置-powerlevel10k-主题",
    "href": "posts/2024-02-05-WSL2-OhMyZsh-VSCode开发环境搭建/index.html#配置-powerlevel10k-主题",
    "title": "WSL2+OhMyZsh+VSCode开发环境搭建",
    "section": "配置 powerlevel10k 主题",
    "text": "配置 powerlevel10k 主题\ngit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k\n编辑 ~/.zshrc 配置文件：\nZSH_THEME=\"powerlevel10k/powerlevel10k\"\n根据提示配置主题，后续可通过 p10k configure自由配置。"
  },
  {
    "objectID": "posts/2024-02-05-WSL2-OhMyZsh-VSCode开发环境搭建/index.html#管理多版本-python",
    "href": "posts/2024-02-05-WSL2-OhMyZsh-VSCode开发环境搭建/index.html#管理多版本-python",
    "title": "WSL2+OhMyZsh+VSCode开发环境搭建",
    "section": "管理多版本 Python",
    "text": "管理多版本 Python\nUbuntu 22.04 默认安装了 Python3.10（/usr/bin/python3.10），而我们自己安装了 Python3.12，我们可以使用 update-alternatives 命令管理系统存在的多个版本的 Python。\n# adding the system's default version of Python to update-alternatives\nsudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1\n\n# Set alternative versions for Python3\nsudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 2\n\n# List installed versions of Python visible to update-alternatives\nupdate-alternatives --list python3\n\n# Swapping between versions\nupdate-alternatives --config python3"
  },
  {
    "objectID": "posts/2022-09-15-matplotlib-常用绘图/index.html",
    "href": "posts/2022-09-15-matplotlib-常用绘图/index.html",
    "title": "Matplotlib常用绘图",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\n条形图\n\n# 数据准备\ncustomers = ['ABC', 'DEF', 'GHI', 'JKL', 'MNO']\ncustomers_index = range(len(customers))\nsale_amounts = [127, 90, 201, 111, 232]\n\n\nfig = plt.figure(figsize=(16,9)) # figsize确定像素比\n# plt.style.use('ggplot') 使用 ggplot 风格\nax1 = fig.add_subplot(1, 1, 1) # 创建子图\n# customer_index设置条形图在x轴上的位置；sale_amounts设置条形的高度；align='center'设置x轴标签处于条形中间\nax1.bar(customers_index, sale_amounts, align='center', color='darkblue') \nax1.xaxis.set_ticks_position('bottom') # 设置刻度位置\nax1.yaxis.set_ticks_position('left')\nplt.xticks(customers_index, customers, rotation=0, fontsize='small') # 设置刻度值\nplt.xlabel('Customer Name') # 设置x轴标签\nplt.ylabel('Sale Amount') # 设置y轴标签\nplt.title('Sale Amount per Customer') # 设置图形标题\nplt.savefig('bar_plot.png', dpi=100, bbox_inches='tight') # 保存图片；设置图形分辨率；将图形四周空白部分去掉\nplt.show()\n\n\n\n\n\n\n\n\n\n\n直方图\n\n# 数据准备\nmu1, mu2, sigma = 100, 130, 15\nx1 = mu1 + sigma * np.random.randn(10000)\nx2 = mu2 + sigma * np.random.randn(10000)\n\n\nfig = plt.figure(figsize=(16, 9))\nplt.style.use('ggplot')\nax1 = fig.add_subplot(1, 1, 1)\n\nn, bins, patches = ax1.hist(x1, bins=50, color='darkgreen')\nn, bins, patches = ax1.hist(x2, bins=50, color='orange', alpha=0.5)\n\nax1.xaxis.set_ticks_position('bottom')\nax1.yaxis.set_ticks_position('left')\nplt.xlabel('Bins')\nplt.ylabel('Number of Values in Bin')\nfig.suptitle('Histograms', fontsize=14, fontweight='bold')\nax1.set_title('Two Frequency Distributions')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n折线图\n\n# 数据准备\nplot_data1 = np.random.randn(50).cumsum()\nplot_data2 = np.random.randn(50).cumsum()\nplot_data3 = np.random.randn(50).cumsum()\nplot_data4 = np.random.randn(50).cumsum()\n\n\nfig = plt.figure(figsize=(16, 9))\nax1 = fig.add_subplot(1, 1, 1)\nax1.plot(plot_data1, marker=r'o', color=u'blue', linestyle='-', label='Blue Solid')\nax1.plot(plot_data2, marker=r'+', color=u'red', linestyle='--', label='Red Dashed')\nax1.plot(plot_data3, marker=r'*', color=u'green', linestyle='-', label='Green Dash Dot')\nax1.plot(plot_data4, marker=r's', color=u'orange', linestyle=':', label='Orange Dotted')\nax1.xaxis.set_ticks_position('bottom')\nax1.yaxis.set_ticks_position('left')\nax1.set_title('Line Plots: Markers, Colors, and Linestyles')\nplt.xlabel('Draw')\nplt.ylabel('Random Number')\nplt.legend(loc='best')"
  },
  {
    "objectID": "posts/2022-05-01-Plotting-with-Pandas/index.html",
    "href": "posts/2022-05-01-Plotting-with-Pandas/index.html",
    "title": "Plotting with Pandas",
    "section": "",
    "text": "在数据分析过程中，我们常常碰到需要快速绘图的场景。比如，在回归分析前看一下 y 和 x 的散点图。对于这类需求，pandas 提供了一个 pandas.DataFrame.plot 方法可以方便快捷地实现可视化。pandas.DataFrame.plot 方法是对 matplotlib.axes.Axes.plot 的封装，所以在调用该方法前，我们需要导入 matplotlib 包。 \n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n首先我们生成一个 10\\times4 的 DataFrame，在接下来的绘图中，我们都使用该数据作为示例。\n\nNote: np.random.randn(x, y) 返回来自标准正态分布的样本，样本量为 x \\times y。 pd.date_range() 返回固定频率的时间索引。\n\n\nts = pd.DataFrame(np.random.randn(10, 4), index = pd.date_range('1/1/2022', periods = 10), columns=['A','B','C','D'])\nts = ts.cumsum()\nts.head()\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n2022-01-01\n-0.275063\n-0.555619\n-0.299752\n-0.284489\n\n\n2022-01-02\n1.519735\n-0.615560\n-0.524613\n0.406859\n\n\n2022-01-03\n1.539964\n-0.803152\n0.471348\n1.377172\n\n\n2022-01-04\n1.957513\n-0.881174\n0.838217\n2.101817\n\n\n2022-01-05\n3.216571\n-0.842396\n-0.144859\n2.219383\n\n\n\n\n\n\n\n下面，我们调用 plot 方法查看一下刚刚生成的数据。对 DataFrame 中的每一列数值型数据，pandas 默认使用折线图进行绘制。\n\nts.plot()\n\n\n\n\n\n\n\n\npandas 也支持对 Series 类型调用 plot 方法，因此我们也可以对任意一列进行绘图。比如，我们看一下 A 列数据：\n\nts['A'].plot()\n\n\n\n\n\n\n\n\n除了折线图，plot 方法还支持其他类图的绘制，可以通过 kind 参数实现。比如，我们可以看一下 A 列数据与 B 列数据的散点图。\n\nts.plot(x='A', y='B', kind='scatter')\n\n\n\n\n\n\n\n\n此外，pandas 也提供另外一种方式来简化调用，即使用 DataFrame.plot.scatter() 的方式来调用：\n\nts.plot.scatter(x='A', y='B')\n\n\n\n\n\n\n\n\nplot 方法支持如下图类的绘制：\n\nline : 折线图（line plot，默认）\nbar : 柱状图（vertical bar plot）\nbarh : 横向柱状图（horizontal bar plot）\nhist : 直方图（histogram）\nbox : 箱型图（box plot）\nkde : 核密度估计图（Kernel Density Estimation plot）\ndensity : same as ‘kde’\narea : 面积图（area plot）\npie : 饼图（pie plot）\nscatter : 散点图（scatter plot，DataFrame only）\nhexbin : 六边形图（hexbin plot，DataFrame only）\n\n有时候，我们希望把每一列数据绘制在一张子图上。在调用 plot 方法时，将 subplots 参数设置为 true 即可实现。\n\nts.plot(subplots=True)\n\narray([&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;],\n      dtype=object)\n\n\n\n\n\n\n\n\n\n进一步，我们可以使用 layout 参数为子图排版：\n\nts.plot(subplots=True, layout=(2,2))\n\narray([[&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;],\n       [&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;]], dtype=object)\n\n\n\n\n\n\n\n\n\nplot 方法中有一个 ax 参数可以接收一个 matplotlib 坐标轴对象（matplotlib axes object），这样我们便可以在 matplotlib axes 对象上利用 plot 方法画图。这意味着，我们可以使用 matplotlib 提供的方法对图像进行定制。\n\nts.index\n\nDatetimeIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04',\n               '2022-01-05', '2022-01-06', '2022-01-07', '2022-01-08',\n               '2022-01-09', '2022-01-10'],\n              dtype='datetime64[ns]', freq='D')\n\n\n\nfig, axs = plt.subplots(figsize=(12,4), dpi=500)\nts.plot.bar(ax=axs, align='center', grid=True, title='NO$_2$ concentration Bar Plot')\nfor label in axs.xaxis.get_ticklabels():\n    label.set_color('darkblue')\n    label.set_rotation(30)\n    label.set_fontsize(8)\n    \naxs.set_ylabel(\"NO$_2$ concentration\")\n\nText(0, 0.5, 'NO$_2$ concentration')\n\n\n\n\n\n\n\n\n\n\nfig, axs = plt.subplots(figsize=(12,4), dpi=500)\nts.plot.bar(ax=axs, align='center', grid=True, title='NO$_2$ concentration Bar Plot')\naxs.set_xticks(range(len(ts.index)))\naxs.set_xticklabels([i.strftime('%Y-%m-%d') for i in ts.index], rotation=30)\n\n[Text(0, 0, '2022-01-01'),\n Text(1, 0, '2022-01-02'),\n Text(2, 0, '2022-01-03'),\n Text(3, 0, '2022-01-04'),\n Text(4, 0, '2022-01-05'),\n Text(5, 0, '2022-01-06'),\n Text(6, 0, '2022-01-07'),\n Text(7, 0, '2022-01-08'),\n Text(8, 0, '2022-01-09'),\n Text(9, 0, '2022-01-10')]\n\n\n\n\n\n\n\n\n\n\nfig.savefig('no2_concentration.png')"
  },
  {
    "objectID": "posts/2023-04-11-在-Pandas-中如何实现复杂的筛选/index.html",
    "href": "posts/2023-04-11-在-Pandas-中如何实现复杂的筛选/index.html",
    "title": "在Pandas中如何实现复杂的筛选和查询",
    "section": "",
    "text": "在利用 Pandas 进行数据分析的过程当中，我们常常会碰到需要实现复杂查询或者筛选的场景。\n比如说从全样本股票中，剔除 ST 和 *ST 股票，然后筛选属于中小板的股票。这篇文章总结我在科研实践过程当中，使用 Pandas 实现复杂筛选的方法。\n首先导入 Pandas 和 akshare，以下的演示数据来自于从 akshare 调用的沪深京 A 股行情数据。\n\nimport numpy as np\nimport pandas as pd\nimport akshare as ak\n\n\ndata = ak.stock_zh_a_spot_em()\ndata.head()\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n0\n1\n603119\nN浙荣\n35.37\n130.87\n20.05\n505082.0\n1.561754e+09\n72.85\n37.54\n...\nNaN\n73.63\n79.87\n6.46\n9.903600e+09\n2.426214e+09\n-0.03\n-0.34\n130.87\n130.87\n\n\n1\n2\n301371\nN敷尔佳\n70.70\n26.98\n15.02\n278191.0\n2.015432e+09\n19.83\n80.04\n...\nNaN\n73.92\n44.38\n5.64\n2.828566e+10\n2.660599e+09\n0.11\n0.41\n26.98\n26.98\n\n\n2\n3\n301316\n慧博云通\n27.60\n20.00\n4.60\n135775.0\n3.483604e+08\n21.04\n27.60\n...\n3.10\n33.94\n212.80\n11.68\n1.104028e+10\n1.104274e+09\n0.00\n0.00\n18.10\n44.43\n\n\n3\n4\n301289\n国缆检测\n43.62\n20.00\n7.27\n75204.0\n3.119352e+08\n21.79\n43.62\n...\n13.27\n29.67\n56.11\n3.86\n3.402360e+09\n1.105763e+09\n0.00\n0.00\n28.26\n35.55\n\n\n4\n5\n300881\n盛德鑫泰\n40.98\n20.00\n6.83\n118733.0\n4.645422e+08\n20.73\n40.98\n...\n2.57\n40.73\n56.02\n5.48\n4.507800e+09\n1.194567e+09\n0.00\n0.00\n23.81\n42.05\n\n\n\n\n5 rows × 23 columns\n\n\n\n\n利用 loc 函数和布尔列表进行筛选\n我最常用的一个做法是使用 loc 函数和布尔列表进行筛选。loc 函数可以接受布尔列表作为参数，而根据实际需求，我们有多种方式可以生成布尔列表，最普遍的是利用逻辑运算来生成布尔列表。\n\n逻辑运算产生布尔列表\n\n比如，我们需要筛选出市净率大于 10 的股票，使用如下逻辑运算，可以产生一个布尔列表。\n\ndata.市净率 &gt; 10\n\n0       False\n1       False\n2        True\n3       False\n4       False\n        ...  \n5483    False\n5484    False\n5485    False\n5486    False\n5487    False\nName: 市净率, Length: 5488, dtype: bool\n\n\n然后我们将这个布尔列表传入 loc 函数中，就可以筛选出市净率大于 10 的股票。\n\ndata.loc[data.市净率 &gt; 10, :]\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n2\n3\n301316\n慧博云通\n27.60\n20.00\n4.60\n135775.0\n3.483604e+08\n21.04\n27.60\n...\n3.10\n33.94\n212.80\n11.68\n1.104028e+10\n1.104274e+09\n0.00\n0.00\n18.10\n44.43\n\n\n31\n32\n000980\n众泰汽车\n4.84\n10.00\n0.44\n5986844.0\n2.750542e+09\n11.59\n4.84\n...\n1.34\n13.96\n-32.52\n10.85\n2.440593e+10\n2.075127e+10\n0.00\n0.00\n60.80\n13.62\n\n\n32\n33\n000890\n法尔胜\n5.39\n10.00\n0.49\n860438.0\n4.285253e+08\n15.51\n5.39\n...\n1.53\n20.51\n-45.72\n165.44\n2.261126e+09\n2.261057e+09\n0.00\n0.00\n23.06\n40.00\n\n\n46\n47\n300394\n天孚通信\n97.69\n9.29\n8.30\n250569.0\n2.361952e+09\n11.84\n98.88\n...\n1.69\n6.99\n82.45\n14.37\n3.856400e+10\n3.501563e+10\n-0.02\n-0.20\n88.23\n293.12\n\n\n52\n53\n300025\n华星创业\n14.30\n7.92\n1.05\n240567.0\n3.384392e+08\n8.68\n14.50\n...\n2.76\n5.55\n-327.75\n10.83\n7.275739e+09\n6.201523e+09\n0.00\n0.00\n32.78\n201.05\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n5366\n5367\n002316\n亚联发展\n5.45\n-4.55\n-0.26\n605077.0\n3.320110e+08\n4.73\n5.69\n...\n0.55\n19.21\n-108.92\n42.25\n2.142504e+09\n1.716791e+09\n0.00\n0.18\n19.26\n55.27\n\n\n5386\n5387\n688359\n三孚新科\n64.40\n-4.87\n-3.30\n12630.0\n8.158510e+07\n9.00\n68.10\n...\n1.36\n2.53\n-122.05\n12.81\n5.984048e+09\n3.217939e+09\n0.00\n0.42\n-20.89\n-4.58\n\n\n5423\n5424\n600769\n祥龙电业\n9.18\n-6.13\n-0.60\n144311.0\n1.329581e+08\n7.67\n9.75\n...\n2.30\n3.85\n249.21\n42.27\n3.442291e+09\n3.442291e+09\n-0.11\n0.11\n8.00\n11.95\n\n\n5424\n5425\n300114\n中航电测\n52.44\n-6.16\n-3.44\n453818.0\n2.432903e+09\n5.71\n55.49\n...\n1.00\n7.68\n338.46\n13.47\n3.097948e+10\n3.097948e+10\n0.02\n-0.06\n3.86\n412.61\n\n\n5434\n5435\n002336\n人人乐\n17.47\n-6.38\n-1.19\n470951.0\n8.387931e+08\n8.47\n18.58\n...\n1.01\n12.62\n-19.49\n637.20\n7.686800e+09\n6.519367e+09\n-0.11\n0.17\n47.05\n-6.88\n\n\n\n\n190 rows × 23 columns\n\n\n\n也可以使用复杂的逻辑运算，比如我们筛选市净率大于 10 ，同时换手率大于 35% 的股票。\n\ndata.loc[(data.市净率 &gt; 10) & (data.换手率 &gt; 35), :]\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n5337\n5338\n000721\n西安饮食\n14.67\n-4.12\n-0.63\n1547593.0\n2.390809e+09\n10.98\n16.29\n...\n1.9\n35.37\n-67.62\n16.61\n8.419323e+09\n6.418153e+09\n0.0\n-0.07\n16.71\n-15.2\n\n\n\n\n1 rows × 23 columns\n\n\n\n使用 loc 函数也很容易实现对列的筛选，我们只需要将需要的列以列表形式传入即可。\n\ndata.loc[(data.市净率 &gt; 10) & (data.换手率 &gt; 35), [\"代码\", \"名称\", \"最新价\"]]\n\n\n\n\n\n\n\n\n代码\n名称\n最新价\n\n\n\n\n5337\n000721\n西安饮食\n14.67\n\n\n\n\n\n\n\n\n函数判断产生布尔变量\n\n第二种常用的手段是使用函数判断生成布尔变量。比如我们挑选上交所的股票，这里使用 startswith 函数来对代码这一列做判断。\n\ndata.loc[[code.startswith(\"6\") for code in data.代码], :]\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n0\n1\n603119\nN浙荣\n35.37\n130.87\n20.05\n505082.0\n1.561754e+09\n72.85\n37.54\n...\nNaN\n73.63\n79.87\n6.46\n9.903600e+09\n2.426214e+09\n-0.03\n-0.34\n130.87\n130.87\n\n\n10\n11\n688622\n禾信仪器\n34.85\n10.95\n3.44\n27626.0\n9.574625e+07\n9.87\n36.00\n...\n9.74\n7.18\n-37.27\n4.74\n2.439417e+09\n1.341637e+09\n-0.03\n-0.03\n-5.76\n7.23\n\n\n11\n12\n688776\n国光电气\n87.80\n10.66\n8.46\n22037.0\n1.848112e+08\n11.33\n87.99\n...\n4.84\n6.52\n116.36\n5.39\n9.516064e+09\n2.968588e+09\n-0.22\n1.09\n-5.88\n-29.79\n\n\n14\n15\n600239\n云南城投\n2.92\n10.19\n0.27\n1178068.0\n3.334986e+08\n9.06\n2.92\n...\n1.40\n7.34\n7.63\n2.89\n4.688606e+09\n4.688606e+09\n0.00\n0.00\n28.07\n51.30\n\n\n16\n17\n600577\n精达股份\n4.79\n10.11\n0.44\n1857359.0\n8.645382e+08\n10.80\n4.79\n...\n9.05\n9.31\n24.64\n2.07\n9.959123e+09\n9.559956e+09\n0.00\n0.00\n14.05\n16.26\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n5463\n5464\n688566\n吉贝尔\n29.59\n-8.53\n-2.76\n48715.0\n1.487687e+08\n9.83\n32.38\n...\n2.78\n2.61\n36.38\n3.28\n5.531602e+09\n5.531602e+09\n-0.03\n0.03\n-7.15\n39.71\n\n\n5466\n5467\n688646\nC逸飞\n48.67\n-8.98\n-4.80\n67526.0\n3.338214e+08\n5.29\n51.41\n...\n0.56\n37.75\n133.46\n2.95\n4.631564e+09\n8.706737e+08\n-0.06\n-0.21\n4.00\n4.00\n\n\n5474\n5475\n603383\n顶点软件\n57.96\n-10.00\n-6.44\n78618.0\n4.696362e+08\n8.25\n63.27\n...\n1.75\n4.66\n112.07\n7.93\n9.923753e+09\n9.787619e+09\n0.00\n0.00\n10.09\n35.29\n\n\n5475\n5476\n603778\n乾景园林\n4.85\n-10.02\n-0.54\n518583.0\n2.522182e+08\n1.86\n4.95\n...\n1.93\n8.07\n67.14\n3.02\n3.117857e+09\n3.117857e+09\n0.00\n0.00\n-19.44\n-29.91\n\n\n5476\n5477\n603682\n锦和商管\n7.52\n-10.05\n-0.84\n625823.0\n4.835391e+08\n5.86\n8.01\n...\n1.07\n13.24\n38.32\n3.10\n3.553200e+09\n3.553200e+09\n0.00\n0.00\n40.04\n39.00\n\n\n\n\n2339 rows × 23 columns\n\n\n\n再比如，剔除 ST 股。\n\ndata.loc[~np.array([name.startswith(\"ST\") for name in data.名称]), :]\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n0\n1\n603119\nN浙荣\n35.37\n130.87\n20.05\n505082.0\n1.561754e+09\n72.85\n37.54\n...\nNaN\n73.63\n79.87\n6.46\n9.903600e+09\n2.426214e+09\n-0.03\n-0.34\n130.87\n130.87\n\n\n1\n2\n301371\nN敷尔佳\n70.70\n26.98\n15.02\n278191.0\n2.015432e+09\n19.83\n80.04\n...\nNaN\n73.92\n44.38\n5.64\n2.828566e+10\n2.660599e+09\n0.11\n0.41\n26.98\n26.98\n\n\n2\n3\n301316\n慧博云通\n27.60\n20.00\n4.60\n135775.0\n3.483604e+08\n21.04\n27.60\n...\n3.10\n33.94\n212.80\n11.68\n1.104028e+10\n1.104274e+09\n0.00\n0.00\n18.10\n44.43\n\n\n3\n4\n301289\n国缆检测\n43.62\n20.00\n7.27\n75204.0\n3.119352e+08\n21.79\n43.62\n...\n13.27\n29.67\n56.11\n3.86\n3.402360e+09\n1.105763e+09\n0.00\n0.00\n28.26\n35.55\n\n\n4\n5\n300881\n盛德鑫泰\n40.98\n20.00\n6.83\n118733.0\n4.645422e+08\n20.73\n40.98\n...\n2.57\n40.73\n56.02\n5.48\n4.507800e+09\n1.194567e+09\n0.00\n0.00\n23.81\n42.05\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n5483\n5484\n301024\n霍普股份\n30.61\n-11.04\n-3.80\n70147.0\n2.218308e+08\n10.40\n33.83\n...\n0.79\n39.55\n-73.00\n3.12\n1.946337e+09\n5.429449e+08\n0.03\n-0.16\n23.68\n40.41\n\n\n5484\n5485\n300554\n三超新材\n18.55\n-11.58\n-2.43\n113466.0\n2.149169e+08\n7.53\n20.08\n...\n7.79\n14.82\n233.03\n2.67\n2.118625e+09\n1.420001e+09\n-0.16\n-0.27\n0.54\n-24.90\n\n\n5485\n5486\n301381\n赛维时代\n40.62\n-11.98\n-5.53\n142905.0\n6.005835e+08\n11.09\n45.72\n...\n0.86\n45.50\n78.18\n7.29\n1.625206e+10\n1.275912e+09\n0.02\n-0.51\n98.63\n98.63\n\n\n5486\n5487\n301015\n百洋医药\n22.16\n-11.99\n-3.02\n108565.0\n2.501874e+08\n14.26\n25.30\n...\n6.25\n9.17\n23.76\n5.75\n1.163622e+10\n2.623190e+09\n0.00\n0.41\n-18.38\n-3.99\n\n\n5487\n5488\n301172\nC君逸\n43.91\n-12.16\n-6.08\n179476.0\n8.451293e+08\n14.96\n51.30\n...\n0.86\n64.87\n-314.59\n3.87\n5.409712e+09\n1.214778e+09\n-0.02\n-0.52\n40.15\n40.15\n\n\n\n\n5406 rows × 23 columns\n\n\n\n我们也可以自定义函数，来实现更复杂的判断需求。比如，对于上面的剔除 ST 股，我们也可以通过自定义函数实现：\n\ndef filter_ST(name):\n    return not name.startswith(\"ST\")\n\n\ndata.loc[data.loc[:,'名称'].apply(lambda name: filter_ST(name)), :]\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n0\n1\n603119\nN浙荣\n35.37\n130.87\n20.05\n505082.0\n1.561754e+09\n72.85\n37.54\n...\nNaN\n73.63\n79.87\n6.46\n9.903600e+09\n2.426214e+09\n-0.03\n-0.34\n130.87\n130.87\n\n\n1\n2\n301371\nN敷尔佳\n70.70\n26.98\n15.02\n278191.0\n2.015432e+09\n19.83\n80.04\n...\nNaN\n73.92\n44.38\n5.64\n2.828566e+10\n2.660599e+09\n0.11\n0.41\n26.98\n26.98\n\n\n2\n3\n301316\n慧博云通\n27.60\n20.00\n4.60\n135775.0\n3.483604e+08\n21.04\n27.60\n...\n3.10\n33.94\n212.80\n11.68\n1.104028e+10\n1.104274e+09\n0.00\n0.00\n18.10\n44.43\n\n\n3\n4\n301289\n国缆检测\n43.62\n20.00\n7.27\n75204.0\n3.119352e+08\n21.79\n43.62\n...\n13.27\n29.67\n56.11\n3.86\n3.402360e+09\n1.105763e+09\n0.00\n0.00\n28.26\n35.55\n\n\n4\n5\n300881\n盛德鑫泰\n40.98\n20.00\n6.83\n118733.0\n4.645422e+08\n20.73\n40.98\n...\n2.57\n40.73\n56.02\n5.48\n4.507800e+09\n1.194567e+09\n0.00\n0.00\n23.81\n42.05\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n5483\n5484\n301024\n霍普股份\n30.61\n-11.04\n-3.80\n70147.0\n2.218308e+08\n10.40\n33.83\n...\n0.79\n39.55\n-73.00\n3.12\n1.946337e+09\n5.429449e+08\n0.03\n-0.16\n23.68\n40.41\n\n\n5484\n5485\n300554\n三超新材\n18.55\n-11.58\n-2.43\n113466.0\n2.149169e+08\n7.53\n20.08\n...\n7.79\n14.82\n233.03\n2.67\n2.118625e+09\n1.420001e+09\n-0.16\n-0.27\n0.54\n-24.90\n\n\n5485\n5486\n301381\n赛维时代\n40.62\n-11.98\n-5.53\n142905.0\n6.005835e+08\n11.09\n45.72\n...\n0.86\n45.50\n78.18\n7.29\n1.625206e+10\n1.275912e+09\n0.02\n-0.51\n98.63\n98.63\n\n\n5486\n5487\n301015\n百洋医药\n22.16\n-11.99\n-3.02\n108565.0\n2.501874e+08\n14.26\n25.30\n...\n6.25\n9.17\n23.76\n5.75\n1.163622e+10\n2.623190e+09\n0.00\n0.41\n-18.38\n-3.99\n\n\n5487\n5488\n301172\nC君逸\n43.91\n-12.16\n-6.08\n179476.0\n8.451293e+08\n14.96\n51.30\n...\n0.86\n64.87\n-314.59\n3.87\n5.409712e+09\n1.214778e+09\n-0.02\n-0.52\n40.15\n40.15\n\n\n\n\n5406 rows × 23 columns\n\n\n\n\neval 函数产生布尔变量\n\n我们也可以使用 eval 函数来产生布尔变量：\n\ndata.loc[data.eval(\"市净率 &gt; 10 and 换手率 &gt; 35\"), :]\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n5337\n5338\n000721\n西安饮食\n14.67\n-4.12\n-0.63\n1547593.0\n2.390809e+09\n10.98\n16.29\n...\n1.9\n35.37\n-67.62\n16.61\n8.419323e+09\n6.418153e+09\n0.0\n-0.07\n16.71\n-15.2\n\n\n\n\n1 rows × 23 columns\n\n\n\n\n\n利用 merge 函数筛选\n有时候，我们需要根据样本来筛选数据，这时候可以使用 merge 函数来进行合并，合并过程也就是数据的筛选过程。比如，我们需要对样本股票的历史数据进行回归，需要从全样本历史数据中筛选出样本股票的历史收益率数据。下面的例子，我们首选读取全样本股票的历史收益率数据，然后筛选出市净率大于 10 ，同时换手率大于 35% 的股票历史收益率数据。\n\nr = pd.read_csv(\"TRD_Dalyr.csv\", dtype={'Stkcd':str})\n\n\nr.head()\n\n\n\n\n\n\n\n\nStkcd\nTrddt\nDretwd\n\n\n\n\n0\n000001\n2018-01-02\n0.030075\n\n\n1\n000001\n2018-01-03\n-0.027007\n\n\n2\n000001\n2018-01-04\n-0.006002\n\n\n3\n000001\n2018-01-05\n0.003774\n\n\n4\n000001\n2018-01-08\n-0.025564\n\n\n\n\n\n\n\n\nbanks = data.loc[(data.市净率 &gt; 10) & (data.换手率 &gt; 35), [\"代码\", \"名称\"]]\n\n\nbanks\n\n\n\n\n\n\n\n\n代码\n名称\n\n\n\n\n5337\n000721\n西安饮食\n\n\n\n\n\n\n\n\nr.merge(banks, left_on=\"Stkcd\", right_on=\"代码\", how=\"inner\")\n\n\n\n\n\n\n\n\nStkcd\nTrddt\nDretwd\n代码\n名称\n\n\n\n\n0\n000721\n2018-01-02\n0.003540\n000721\n西安饮食\n\n\n1\n000721\n2018-01-03\n0.010582\n000721\n西安饮食\n\n\n2\n000721\n2018-01-04\n0.000000\n000721\n西安饮食\n\n\n3\n000721\n2018-01-05\n0.001745\n000721\n西安饮食\n\n\n4\n000721\n2018-01-08\n-0.010453\n000721\n西安饮食\n\n\n...\n...\n...\n...\n...\n...\n\n\n1015\n000721\n2022-03-10\n0.042986\n000721\n西安饮食\n\n\n1016\n000721\n2022-03-11\n-0.004338\n000721\n西安饮食\n\n\n1017\n000721\n2022-03-14\n0.008715\n000721\n西安饮食\n\n\n1018\n000721\n2022-03-15\n-0.036717\n000721\n西安饮食\n\n\n1019\n000721\n2022-03-16\n0.067265\n000721\n西安饮食\n\n\n\n\n1020 rows × 5 columns\n\n\n\n\n\n利用 query 函数进行筛选\nquery 是 Pandas 提供的一个方法，使用布尔表达式对 DataFrame 进行查询，这个布尔表达式支持一个文本字符串。比如，查询市净率大于 10，同时换手率大于 35% 的股票：\n\ndata.query(\"市净率 &gt; 10 and 换手率 &gt; 35\")\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n5337\n5338\n000721\n西安饮食\n14.67\n-4.12\n-0.63\n1547593.0\n2.390809e+09\n10.98\n16.29\n...\n1.9\n35.37\n-67.62\n16.61\n8.419323e+09\n6.418153e+09\n0.0\n-0.07\n16.71\n-15.2\n\n\n\n\n1 rows × 23 columns\n\n\n\nquery 也支持传入变量，使用 @ 传入。\n\nname = \"西安饮食\"\ndata.query(\"名称 == @name\")\n\n\n\n\n\n\n\n\n序号\n代码\n名称\n最新价\n涨跌幅\n涨跌额\n成交量\n成交额\n振幅\n最高\n...\n量比\n换手率\n市盈率-动态\n市净率\n总市值\n流通市值\n涨速\n5分钟涨跌\n60日涨跌幅\n年初至今涨跌幅\n\n\n\n\n5337\n5338\n000721\n西安饮食\n14.67\n-4.12\n-0.63\n1547593.0\n2.390809e+09\n10.98\n16.29\n...\n1.9\n35.37\n-67.62\n16.61\n8.419323e+09\n6.418153e+09\n0.0\n-0.07\n16.71\n-15.2\n\n\n\n\n1 rows × 23 columns"
  },
  {
    "objectID": "posts/2023-10-13-matplotlib中的figure对象/index.html",
    "href": "posts/2023-10-13-matplotlib中的figure对象/index.html",
    "title": "详解Matplotlib中的figure对象",
    "section": "",
    "text": "matplotlib 使用 Artist 对象处理点、线、文字、图片等图像要素在绘图区域上展现的细节问题。Artist 对象可以分为两种类型：一是基础对象，包括点、线、文字、图片等要素；二是容器对象，包括画布、坐标轴、坐标系等。其中，画布 Figure 是最基础的容器对象，是容纳其他一切 Artist 对象的基础。"
  },
  {
    "objectID": "posts/2023-10-13-matplotlib中的figure对象/index.html#常用方法",
    "href": "posts/2023-10-13-matplotlib中的figure对象/index.html#常用方法",
    "title": "详解Matplotlib中的figure对象",
    "section": "常用方法",
    "text": "常用方法\n\nadd_axes\nadd_axes(rect, projection=None, polar=False, **kwargs)：添加坐标轴，返回 Axes 实例\n\nrect：坐标轴的尺寸（左边界、底边界、宽度、高度）。所有的数值都是相对于图形宽度和高度的分数。\nprojection：数据空间（data space）向屏幕空间（screen space）的映射方式\n\n\n在绘图中，数据通常以数据坐标系表示，而图形最终要显示在屏幕上，因此需要进行坐标变换。可分离变换是一种将坐标轴单独变换的方式，例如缩放、平移等。但有些情况下，需要进行非可分离变换，例如透视变换或非线性变换，这些变换无法简单地通过分别变换坐标轴来实现。matplotlib.projections 模块提供了处理这些非可分离变换的工具和方法，使用户能够实现各种复杂的数据到屏幕的映射，以满足绘图需求。这对于绘制具有非标准坐标系的图形或需要特殊变换的图形非常有用。\n\n\npolar：polar=True 等同于 projection='ploar'\n\n\nfig = plt.figure(figsize=(5,4), facecolor='lightslategray')\n# [0, 0, 1, 1] 会铺满整个画布\nax = fig.add_axes([0, 0, 1, 1])\nax2 = fig.add_axes([0.5, 0.5, 0.2, 0.2])\n\n\n\n\n\n\n\n\n\nfig = plt.figure(figsize=(5,4), facecolor='lightslategray')\n# polar = True，建立极坐标系\nax = fig.add_axes([0, 0, 1, 1], polar=True)\n\n\n\n\n\n\n\n\n\n\nadd_subplot\nadd_subplot(nrows, ncols, index, **kwargs)：添加子图坐标轴，返回 Axes 实例\n\nnrows：子图总行数\nncols：子图总列数\nindex：子图位置\nprojection：子图坐标系变换方式\nsharex，sharey：共享 x/y 轴，共享轴刻度、标签等坐标轴特征相同\n\n\nfig = plt.figure(figsize=(5,4))\n\nax1 = fig.add_subplot(1, 2, 1)\nax2 = fig.add_subplot(1, 2, 2, sharey=ax1)\n\n\n\n\n\n\n\n\n\n\nsubplots\nsubplots(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, width_ratios=None, height_ratios=None, subplot_kw=None, gridspec_kw=None)：以 array 形式返回 Axes 实例\n\nsqueeze：是否对返回的 Axes array 进行缩维处理。如果为 False，则 subplots(1,1, squeeze=False) 返回的也是一个 Axes array\n\n\nfig = plt.figure()\n\nax1, ax2 = fig.subplots(1, 2, sharey=True)\nax1.set_title('Sharing Y axis')\n\nText(0.5, 1.0, 'Sharing Y axis')\n\n\n\n\n\n\n\n\n\n\n\nsubplots_adjust\nsubplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)：调节子图布局参数\n\nleft：子图左边缘位置，表示为图片宽度的比例\nright：子图右边缘位置，表示为图片宽度的比例\nbottom：子图下边缘位置，表示为图片高度的比例\ntop：子图上边缘位置，表示为图片高度的比例\nwspace：子图间 padding 的宽度，坐标轴平均宽度的比例\nhspace：子图间 padding 的高度，坐标轴平均高度的比例\n\n\nfig = plt.figure(figsize=(10,5))\nfig.subplots_adjust(top=0.5)\nfig.suptitle('test figure')\n\nax = fig.subplots(2,3)\n\n\n\n\n\n\n\n\n\n\nsuptitle\nsuptitle(t, **kwargs)：为 Figure 实例添加一个标题，返回 Text 实例\n\nt：标题文字\nx 和 y：标题坐标\nha：标题水平位置，center、left、right\nva：标题垂直位置，top、center、bottom、baseline\nfontsize 与 fontweight\n\n\nfig = plt.figure(facecolor='lightslategray')\n\nax = fig.add_subplot()\nfig.suptitle('test figure', fontweight='bold')\n\nText(0.5, 0.98, 'test figure')\n\n\n\n\n\n\n\n\n\n\n\ntight_layout\ntight_layout(*, pad=1.08, h_pad=None, w_pad=None, rect=None)：调节子图之间和周围的间距，可以使得子图显示更美观\n\npad：图片边缘与子图边缘之间的 padding，以字体大小的比例表示，默认 1.08\nh_pad 和 w_pad：相邻子图边缘之间的填充（高度/宽度），默认为 pad 取值\nrect：tuple （left, bottom, right, top）， default: （0, 0, 1, 1）\n\n\nfig = plt.figure(figsize=(5,4))\n(ax1, ax2), (ax3, ax4) = fig.subplots(2,2)\n\n\n\n\n\n\n\n\n\nfig = plt.figure(figsize=(5,4))\n(ax1, ax2), (ax3, ax4) = fig.subplots(2,2)\n# 使用 tight_layout，子图布局更美观\nfig.tight_layout()\n\n\n\n\n\n\n\n\n当然，也可以在创建 Figure 实例时使用 layout 参数：\n\nfig = plt.figure(figsize=(5,4), layout='tight')\n(ax1, ax2), (ax3, ax4) = fig.subplots(2,2)"
  },
  {
    "objectID": "posts/2023-12-23-Numpy中的random详解/index.html",
    "href": "posts/2023-12-23-Numpy中的random详解/index.html",
    "title": "Numpy中的random模块详解",
    "section": "",
    "text": "In a sense, there is no such things as a random number. For example, is 2 a random number? Rather, we speak of a sequence of independent random numbers with a specified distribution. -Donald Knuth\n编写程序时，我们常常会用到随机数，比如爬虫时随机 Sleep、随机从 UA 池中选择 UA、模拟掷色子等等。那么计算机如何生成随机数呢？\n一种方式是通过接受外部输入，继承外部的随机性，比如盖革计数器。这种方式存在一些缺点。首先是需要外部硬件设备，其次收集分析外部数据可能需要较长时间，最关键的是随机数大概率无法复现，这对于程序调试是一个很大的问题。\n第二种方式是使用伪随机数生成器（PRNG）算法。比如 Python 的 random 模块使用马特塞特旋转算法（Mersenne Twister）生成随机数。马特塞特旋转算法基于线性同余生成器，被广泛使用在各类随机数生成器中，但该算法有一个确定的周期，并且需要大量的计算资源。因此自版本 1.17 以来，NumPy 使用更高效的置换同余生成器-64（PCG64）算法。PCG64 算法的周期性更长，产生的数字更难以预测，生成速度更快且需要更少的资源。"
  },
  {
    "objectID": "posts/2023-12-23-Numpy中的random详解/index.html#simple-random-data",
    "href": "posts/2023-12-23-Numpy中的random详解/index.html#simple-random-data",
    "title": "Numpy中的random模块详解",
    "section": "Simple random data",
    "text": "Simple random data\n\nrandom\nrandom.Generator.random(size=None, dtype=np.float64, out=None)\n创建一个给定形状的数组，并用 [0,1) 均匀分布的随机样本填充它。\n\nrng.random()\n\n0.22733602246716966\n\n\n\nrng.random((3, 4))\n\narray([[0.31675834, 0.79736546, 0.67625467, 0.39110955],\n       [0.33281393, 0.59830875, 0.18673419, 0.67275604],\n       [0.94180287, 0.24824571, 0.94888115, 0.66723745]])\n\n\n\n\nintegers\nrandom.Generator.integers(low, high=None, size=None, dtype=np.int64, endpoint=False)\n创建一个给定形状的数组，并用从 low（包含）到 high（不包含）之间“离散均分”分布的随机整数填充它；如果 endpoint=True，则用从 low（包含）到 high（包含）之间的随机整数进行填充。\n\nrng.integers(low=2, high=10, size=(3, 4))\n\narray([[3, 2, 4, 5],\n       [2, 9, 5, 7],\n       [3, 4, 2, 7]])\n\n\n如果 high 为 None（默认值），则结果范围从 0 到 low。\n\nrng.integers(5)\n\n3\n\n\n\n\nchoice\nrandom.Generator.choice(a, size=None, replace=True, p=None, axis=0, shuffle=True)\n从给定数组中生成一个随机样本。如果 a 是一个整数，则从 np.arange(a) 生成样本。\n\nrng.choice(5, 3)\n\narray([1, 3, 0])\n\n\n如果 a 是一个数组，则默认从 a 均匀随机采样。\n\na = rng.integers(low=2, high=20, size=10)\nprint(a)\nrng.choice(a, size=(2, 5))\n\n[ 9  4 15  8 10 10 10  6 12 16]\n\n\narray([[10,  4,  9,  4,  9],\n       [ 9,  4, 10, 12, 12]])\n\n\n也可以使用参数 p 为采样数组中的每个样本确定采样概率。\n\na = rng.integers(low=2, high=20, size=10)\np = a / sum(a)  # 注意 p 为一个概率分布，满足归一化原理\nprint(a)\nprint(p)\nrng.choice(a, size=(2, 4), p=p)\n\n[13 12  7 18 13 15 15 17 14 18]\n[0.0915493  0.08450704 0.04929577 0.12676056 0.0915493  0.1056338\n 0.1056338  0.11971831 0.09859155 0.12676056]\n\n\narray([[15, 18, 15, 18],\n       [15, 17, 18, 18]])\n\n\n如果采样数组 a 的维数超过了 1，那么 size 参数将会沿轴 0 插入。比如 a.shape=(2,5)，size=(3,4)，则采样生成的数组 b.shape=(3,4,5)。\n\na = rng.integers(low=2, high=20, size=(2, 5))\nb = rng.choice(a, size=(3, 4))\nprint(b)  # b.shape=(3,4,5)\n\n[[[10  6  7  8 13]\n  [ 6 17  8  3  2]\n  [10  6  7  8 13]\n  [10  6  7  8 13]]\n\n [[ 6 17  8  3  2]\n  [10  6  7  8 13]\n  [ 6 17  8  3  2]\n  [ 6 17  8  3  2]]\n\n [[10  6  7  8 13]\n  [10  6  7  8 13]\n  [10  6  7  8 13]\n  [10  6  7  8 13]]]"
  },
  {
    "objectID": "posts/2023-12-23-Numpy中的random详解/index.html#permutations",
    "href": "posts/2023-12-23-Numpy中的random详解/index.html#permutations",
    "title": "Numpy中的random模块详解",
    "section": "Permutations",
    "text": "Permutations\n\nshuffle\nrandom.Generator.shuffle(x, axis=0)\n对所给数组进行重新排列（inplace）。\n\nx = np.arange(10)\nprint(x)\nrng.shuffle(x)\nprint(x)\n\n[0 1 2 3 4 5 6 7 8 9]\n[6 2 7 4 0 5 8 9 3 1]\n\n\n可以利用 axis 参数指定沿着哪个轴随机排列，axis=1 表示每列作为一个整体随机排列。\n\nx = np.arange(12).reshape((3, 4))\nprint(x)\nrng.shuffle(x, axis=1)\nprint(x)\n\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n[[ 1  2  0  3]\n [ 5  6  4  7]\n [ 9 10  8 11]]\n\n\n\n\npermutation\nrandom.Generator.permutation(x, axis=0)\n如果参数 x 是一个整数，则随机排列 np.arange(x)：\n\nrng.permutation(10)\n\narray([0, 1, 5, 9, 6, 7, 8, 3, 4, 2])\n\n\n如果参数 x 是一个数组，先做一份拷贝，然后随机打乱元素的顺序：\n\nx = np.arange(12).reshape((3, 4))\nprint(x)\nrng.permutation(x)\n\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n\n\narray([[ 0,  1,  2,  3],\n       [ 8,  9, 10, 11],\n       [ 4,  5,  6,  7]])\n\n\n\n\npermuted\nrandom.Generator.permuted(x, axis=None, out=None)\n沿着指定的轴（axis）随机排列数组 x：\n\nx = np.arange(12).reshape((3, 4))\nrng.permuted(x)\n\narray([[ 3,  0,  8,  7],\n       [ 1,  2, 11,  6],\n       [ 9,  5, 10,  4]])\n\n\n使用 out 参数原地排列：\n\nx = np.arange(12).reshape((3, 4))\nrng.permuted(x, out=x)\nx\n\narray([[ 5, 10,  3,  6],\n       [ 8,  0,  2,  9],\n       [11,  1,  4,  7]])\n\n\n使用 axis=1 参数可以对每行内的值（即沿着 axis=1 的值）独立地进行排列。\n\nx = np.arange(12).reshape((3, 4))\nrng.permuted(x, axis=1)\n\narray([[ 3,  1,  0,  2],\n       [ 6,  5,  7,  4],\n       [10,  9, 11,  8]])"
  },
  {
    "objectID": "posts/2023-12-23-Numpy中的random详解/index.html#概率分布",
    "href": "posts/2023-12-23-Numpy中的random详解/index.html#概率分布",
    "title": "Numpy中的random模块详解",
    "section": "概率分布",
    "text": "概率分布\n\n均匀分布\nrandom.Generator.uniform(low=0.0, high=1.0, size=None)\n\nrng.uniform(-2, 3, size=(3, 4))\n\narray([[-1.95143936, -0.94978521,  2.35000339,  2.86414901],\n       [ 0.20896172, -0.10625253, -0.62026459,  2.83052055],\n       [-1.70898697,  0.04366949, -1.15685578, -0.79927971]])\n\n\n\ndef my_plotter(ax, data1, bins, param_dict):\n    \"\"\"\n    A helper function to make a graph.\n    \"\"\"\n    n, bins, patches = ax.hist(data1, bins=bins, density=True, **param_dict)\n    return n, bins, patches\n\n\nfig, ax = plt.subplots(figsize=(16, 8), layout=\"constrained\")\n\nres = my_plotter(\n    ax,\n    rng.uniform(0, 1, size=500),\n    20,\n    {\"color\": \"darkgreen\", \"edgecolor\": \"black\", \"alpha\": 0.5},\n)\n\n\n\n\n\n\n\n\n\n\n二项分布\nrandom.Generator.binomial(n, p, size=None)\n\nrng.binomial(10, 0.5, 20)\n\narray([6, 4, 5, 4, 5, 4, 4, 4, 3, 5, 7, 8, 2, 7, 3, 6, 7, 3, 4, 5])\n\n\n\nrng.binomial(10, 0.5, (4, 5))\n\narray([[4, 5, 1, 5, 7],\n       [3, 5, 5, 6, 8],\n       [6, 4, 6, 4, 6],\n       [6, 8, 7, 2, 4]])\n\n\n\nfig, ax = plt.subplots(figsize=(16, 8), layout=\"constrained\")\n\nres = my_plotter(\n    ax,\n    rng.binomial(10, 0.5, 500),\n    20,\n    {\"color\": \"darkgreen\", \"edgecolor\": \"black\", \"alpha\": 0.5},\n)\n\n\n\n\n\n\n\n\n\n\n几何分布\nrandom.Generator.geometric(p, size=None)\n\nrng.geometric(0.1, 10)\n\narray([14,  4,  2,  1,  4,  1,  5,  4,  5,  2])\n\n\n\nfig, ax = plt.subplots(figsize=(16, 8), layout=\"constrained\")\n\nres = my_plotter(\n    ax,\n    rng.geometric(0.1, 500),\n    50,\n    {\"color\": \"darkgreen\", \"edgecolor\": \"black\", \"alpha\": 0.5},\n)\n\n\n\n\n\n\n\n\n\n\n指数分布\nrandom.Generator.exponential(scale=1.0, size=None)\n\nf(x,\\frac{1}{\\beta}) = \\frac{1}{\\beta}e^{(-\\frac{1}{\\beta}x)}, x&gt;0\n\n参数 scale 即为公式中的 \\beta\n\nrng.exponential(scale=0.5, size=10)\n\narray([0.32826208, 0.43356883, 0.1341275 , 0.0653662 , 0.21884868,\n       1.17264919, 2.10547225, 1.45651444, 0.80815348, 0.55032455])\n\n\n\nfig, ax = plt.subplots(figsize=(16, 8), layout=\"constrained\")\n\nres = my_plotter(\n    ax,\n    rng.exponential(scale=0.5, size=500),\n    50,\n    {\"color\": \"darkgreen\", \"edgecolor\": \"black\", \"alpha\": 0.5},\n)\n\n\n\n\n\n\n\n\n\n\n正态分布\nrandom.Generator.normal(loc=0.0, scale=1.0, size=None)\n\nf(X)= \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}\n\n参数 loc 和 scale 分别为公式中的 \\mu 和 \\sigma\n\nrng.normal(0, 1, 20)\n\narray([ 0.37405335, -0.02459374,  0.07726066, -0.68391322, -0.72083767,\n        1.12062282, -0.05481416, -0.08241372,  0.9359865 ,  1.23853712,\n        1.27279553,  0.40589222, -0.05032522,  0.28931754,  0.17930568,\n        1.39748056,  0.29204679,  0.63840567, -0.02788771,  1.37105185])\n\n\nnumpy 提供了 standard_nomal 函数方便快速生成标准正态分布样本：\n\nrng.standard_normal(20)\n\narray([-2.05280763,  0.38050908,  0.75539067, -1.15912585,  2.15031011,\n       -0.15027022, -0.16116428, -1.07944248,  0.87796618,  0.22446741,\n       -0.59159345,  0.2262628 ,  0.68618251,  1.21500461,  0.21605944,\n       -0.96482356, -0.5566078 , -2.29838764, -0.73208213,  0.7364691 ])\n\n\n\nfig, ax = plt.subplots(figsize=(16, 8), layout=\"constrained\")\n\nres = my_plotter(\n    ax,\n    rng.standard_normal(500),\n    50,\n    {\"color\": \"darkgreen\", \"edgecolor\": \"black\", \"alpha\": 0.5},\n)\n\n\n\n\n\n\n\n\n\n\n泊松分布\nrandom.Generator.poisson(lam=1.0, size=None)\n\nf(k, \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!}\n\n\nrng.poisson(1.2, 20)\n\narray([0, 2, 0, 1, 1, 0, 2, 1, 2, 4, 1, 1, 2, 0, 5, 1, 0, 1, 1, 1])\n\n\n\nfig, ax = plt.subplots(figsize=(16, 8), layout=\"constrained\")\n\nres = my_plotter(\n    ax,\n    rng.poisson(1.2, 500),\n    50,\n    {\"color\": \"darkgreen\", \"edgecolor\": \"black\", \"alpha\": 0.5},\n)\n\n\n\n\n\n\n\n\n\n\n伽马分布"
  },
  {
    "objectID": "posts/2024-02-05-一键计算CAR/index.html",
    "href": "posts/2024-02-05-一键计算CAR/index.html",
    "title": "一键计算CAR",
    "section": "",
    "text": "因为经常要计算 CAR，所以写了一个脚本，支持市场模型和三因子模型，测试数据都来自于国泰安数据库，视频介绍在 b 站。\n脚本的核心是 EventStudy 类。下面是一个简单的例子：\nimport eventstudy\n\nes_market_model = eventstudy.EventStudy(\n    sample_market_model,  # 事件样本\n    \"Market\",  # 正常收益率估计模型\n    market_model_data, # 估计模型所需数据\n    daily_stock_returns,  # 个股历史回报率\n    -1,  # t1\n    30,  # t2\n    10,  # span\n    200  # 估计期长度\n)\n\n市场模型\nR_{it} = \\alpha_i + \\beta_iR_{Mt} + \\varepsilon_{it}\nR_{it} 表示公司 i 在第 t 个交易日的考虑现金红利再投资的个股回报率，R_{Mt} 表示第 t 个交易日公司所在分市场的市场回报率，等于考虑现金红利再投资的日市场回报率（流通市值加权平均法）。\n\nimport pandas as pd\nimport eventstudy\n\n\ndaily_stock_returns = pd.read_csv(\n    \"./data/daily_stocks_returns.csv\", dtype={\"ticker\": str}\n)\n\ndaily_stock_returns 是个股历史回报率，注意个股历史回报率需要包含如下测试字段，即 ticker、TradingDate 和 return，分别代表股票代码、交易日和个股回报率。\n\ndaily_stock_returns.head()\n\n\n\n\n\n\n\n\nticker\nTradingDate\nreturn\n\n\n\n\n0\n000001\n2013-11-29\n-0.001468\n\n\n1\n000001\n2013-12-02\n0.011029\n\n\n2\n000001\n2013-12-03\n-0.015273\n\n\n3\n000001\n2013-12-04\n0.004431\n\n\n4\n000001\n2013-12-05\n-0.012500\n\n\n\n\n\n\n\n\nsample_market_model = pd.read_csv(\n    \"./data/sample_for_marketmodel.csv\", dtype={\"ticker\": str}\n)\n\nsample_market_model 是事件样本，注意事件样本需要包含如下测试字段，即 EventDate、ticker 和 MarketTypeID，分别代表事件日、股票代码和市场类型。\n\nsample_market_model.head()\n\n\n\n\n\n\n\n\nEventDate\nticker\nMarketTypeID\n\n\n\n\n0\n2016-04-21\n002177\n4\n\n\n1\n2016-11-10\n300188\n16\n\n\n2\n2018-01-12\n300002\n16\n\n\n3\n2018-01-15\n000935\n4\n\n\n4\n2018-01-15\n000021\n4\n\n\n\n\n\n\n\nmarket_model_data 是市场模型所需要的数据，注意市场模型数据需要包含如下测试字段，即 MarketTypeID、TradingDate 和 market_returns，分别代表市场类型、交易日和市场收益率。\n\nmarket_model_data = pd.read_csv(\"./data/market_model_data.csv\")\n\n\nmarket_model_data.head()\n\n\n\n\n\n\n\n\nMarketTypeID\nTradingDate\nmarket_returns\n\n\n\n\n0\n1\n1990-12-19\nNaN\n\n\n1\n1\n1990-12-20\n0.050067\n\n\n2\n1\n1990-12-21\n0.039671\n\n\n3\n1\n1990-12-24\n0.049380\n\n\n4\n1\n1990-12-25\n0.049938\n\n\n\n\n\n\n\n\nes_market_model = eventstudy.EventStudy(\n    sample_market_model.head(10),\n    \"Market\",\n    market_model_data,\n    daily_stock_returns,\n    -1,\n    30,\n    10,\n    200,\n)\n\n\nres_market_model = es_market_model.get_result()\n\nTasks finished: 100%\n\n\nget_result() 返回一个字典，字典中包含样本 CAR、CAR 的描述性统计结果、剔除的样本和剩余样本。\n\nres_market_model.keys()\n\ndict_keys(['describe_res', 'sample_removed', 'sample_remained', 'sample_cars'])\n\n\n\nres_market_model[\"sample_remained\"]\n\n\n\n\n\n\n\n\nEventDate\nticker\nMarketTypeID\n\n\n\n\n0\n2016-04-21\n002177\n4\n\n\n1\n2016-11-10\n300188\n16\n\n\n2\n2018-01-12\n300002\n16\n\n\n3\n2018-01-15\n000935\n4\n\n\n4\n2018-01-15\n000021\n4\n\n\n5\n2018-01-30\n300108\n16\n\n\n6\n2018-04-05\n600602\n1\n\n\n7\n2018-12-11\n300356\n16\n\n\n8\n2019-05-08\n300427\n16\n\n\n9\n2019-07-02\n000917\n4\n\n\n\n\n\n\n\n\neventstudy.res_plot(re_market_model[\"sample_cars\"], 0.90)\n\n\n\n\n\n\n\n\n\n\n三因子模型\nR_{it} - R_{ft} = \\alpha_i + b_i(R_{Mt}-R_{ft}) + s_iSMB_t + h_iHML_t + \\varepsilon_it\n\nfamafrench_factors = pd.read_csv(\"./data/famafrench_factors_data.csv\")\n\nfamafrench_factors 是三因子模型数据，注意三因子数据需要包含如下测试字段，即 MarketTypeID、TradingDate、RiskPremium、SMB、HML 和 risk_free_rate，分别代表市场类型、交易日、风险溢价因子、SMB、HML 和无风险利率。\n\nfamafrench_factors.head()\n\n\n\n\n\n\n\n\nMarketTypeID\nTradingDate\nRiskPremium\nSMB\nHML\nrisk_free_rate\n\n\n\n\n0\nP9706\n1990-12-19\n2.473374\nNaN\nNaN\n0.0227\n\n\n1\nP9710\n1990-12-19\n2.473374\nNaN\nNaN\n0.0227\n\n\n2\nP9709\n1990-12-19\n2.473374\nNaN\nNaN\n0.0227\n\n\n3\nP9712\n1990-12-19\n2.473374\nNaN\nNaN\n0.0227\n\n\n4\nP9713\n1990-12-19\n2.473374\nNaN\nNaN\n0.0227\n\n\n\n\n\n\n\n\nsample_famafrench = pd.read_csv(\"./data/sample.csv\", dtype={\"ticker\": str})\n\nsample_famafrench 是事件样本，与前述要求一致，需要包含如下测试字段。\n\nsample_famafrench.head()\n\n\n\n\n\n\n\n\nEventDate\nticker\nMarketTypeID\n\n\n\n\n0\n2016-04-21\n002177\nP9706\n\n\n1\n2016-11-10\n300188\nP9705\n\n\n2\n2018-01-12\n300002\nP9705\n\n\n3\n2018-01-15\n000935\nP9706\n\n\n4\n2018-01-15\n000021\nP9706\n\n\n\n\n\n\n\n\nes_famafrench = eventstudy.EventStudy(\n    sample_famafrench.head(10),\n    \"FamaFrench\",\n    famafrench_factors,\n    daily_stock_returns,\n    -1,\n    30,\n    10,\n    200,\n)\n\n\nres_famafrench = es_famafrench.get_result()\n\nTasks finished: 100%\n\n\n\nres_famafrench.keys()\n\ndict_keys(['describe_res', 'sample_removed', 'sample_remained', 'sample_cars'])\n\n\n\nres_famafrench[\"describe_res\"]\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\nt-statstics\np-value\n\n\n\n\n-1\n10.0\n0.005946\n0.050654\n-0.042915\n-0.026691\n-0.008127\n0.004223\n0.102982\n0.371196\n0.719079\n\n\n0\n10.0\n0.042546\n0.074948\n-0.035565\n-0.010073\n0.022935\n0.060273\n0.202987\n1.795155\n0.106202\n\n\n1\n10.0\n0.031981\n0.093752\n-0.069651\n-0.007391\n-0.003999\n0.021624\n0.263352\n1.078718\n0.308774\n\n\n2\n10.0\n0.013060\n0.103207\n-0.101936\n-0.029064\n-0.023455\n0.024744\n0.232986\n0.400162\n0.698369\n\n\n3\n10.0\n0.004802\n0.087637\n-0.130160\n-0.043901\n-0.016113\n0.064789\n0.143388\n0.173265\n0.866277\n\n\n4\n10.0\n0.009385\n0.090681\n-0.128522\n-0.046949\n-0.022871\n0.092813\n0.147597\n0.327286\n0.750935\n\n\n5\n10.0\n0.001967\n0.089825\n-0.153967\n-0.036466\n-0.013752\n0.072597\n0.134979\n0.069254\n0.946301\n\n\n6\n10.0\n0.002818\n0.083841\n-0.180795\n-0.027049\n0.003889\n0.059211\n0.121202\n0.106300\n0.917676\n\n\n7\n10.0\n0.012787\n0.080665\n-0.159540\n-0.014551\n0.020998\n0.050448\n0.150747\n0.501306\n0.628188\n\n\n8\n10.0\n0.008737\n0.082093\n-0.163451\n-0.025143\n0.023856\n0.041238\n0.142756\n0.336549\n0.744171\n\n\n9\n10.0\n0.007964\n0.090177\n-0.153678\n-0.022929\n0.023700\n0.070196\n0.139917\n0.279291\n0.786334\n\n\n10\n10.0\n-0.003413\n0.092743\n-0.155530\n-0.031332\n0.009525\n0.043308\n0.138305\n-0.116377\n0.909909\n\n\n11\n10.0\n-0.008281\n0.092809\n-0.184369\n-0.031162\n0.005624\n0.017887\n0.132797\n-0.282173\n0.784192\n\n\n12\n10.0\n-0.012063\n0.103813\n-0.200354\n-0.033344\n0.006032\n0.039354\n0.143062\n-0.367457\n0.721771\n\n\n13\n10.0\n-0.017322\n0.105090\n-0.222945\n-0.021649\n-0.004715\n0.024077\n0.145804\n-0.521229\n0.614789\n\n\n14\n10.0\n-0.005754\n0.111856\n-0.203818\n-0.031657\n-0.013775\n0.070799\n0.152910\n-0.162683\n0.874362\n\n\n15\n10.0\n-0.002302\n0.127973\n-0.219148\n-0.050842\n-0.027914\n0.074407\n0.224666\n-0.056889\n0.955877\n\n\n16\n10.0\n0.001072\n0.119628\n-0.205463\n-0.060483\n-0.022024\n0.098753\n0.177393\n0.028340\n0.978010\n\n\n17\n10.0\n0.015176\n0.142262\n-0.169627\n-0.069435\n-0.026533\n0.128153\n0.254051\n0.337348\n0.743589\n\n\n18\n10.0\n0.036296\n0.168552\n-0.138709\n-0.067674\n-0.031261\n0.149025\n0.306288\n0.680958\n0.513035\n\n\n19\n10.0\n0.025216\n0.170236\n-0.203934\n-0.074913\n-0.028633\n0.146160\n0.305098\n0.468413\n0.650627\n\n\n20\n10.0\n0.021668\n0.172407\n-0.194432\n-0.079519\n-0.053014\n0.160581\n0.333420\n0.397440\n0.700304\n\n\n21\n10.0\n0.016986\n0.164136\n-0.170316\n-0.096441\n-0.043403\n0.144772\n0.317196\n0.327251\n0.750961\n\n\n22\n10.0\n0.014237\n0.158083\n-0.164113\n-0.086671\n-0.046541\n0.129103\n0.284242\n0.284792\n0.782248\n\n\n23\n10.0\n0.007261\n0.166520\n-0.155520\n-0.115051\n-0.052748\n0.123317\n0.313846\n0.137894\n0.893360\n\n\n24\n10.0\n0.002597\n0.167286\n-0.163574\n-0.109552\n-0.051470\n0.117628\n0.328568\n0.049084\n0.961924\n\n\n25\n10.0\n0.000427\n0.160041\n-0.160845\n-0.106606\n-0.054970\n0.107540\n0.310538\n0.008434\n0.993455\n\n\n26\n10.0\n-0.000277\n0.163577\n-0.144695\n-0.116407\n-0.067567\n0.126459\n0.307726\n-0.005351\n0.995848\n\n\n27\n10.0\n-0.000930\n0.158710\n-0.126786\n-0.114920\n-0.073548\n0.098323\n0.323083\n-0.018528\n0.985622\n\n\n28\n10.0\n-0.006622\n0.162787\n-0.141247\n-0.117763\n-0.075430\n0.085477\n0.329415\n-0.128646\n0.900467\n\n\n29\n10.0\n0.006816\n0.174149\n-0.130723\n-0.116153\n-0.079282\n0.140219\n0.336229\n0.123763\n0.904223\n\n\n30\n10.0\n-0.004030\n0.163063\n-0.161690\n-0.112566\n-0.068521\n0.070614\n0.332546\n-0.078147\n0.939421\n\n\n\n\n\n\n\n\neventstudy.res_plot(res_famafrench[\"sample_cars\"])"
  },
  {
    "objectID": "posts/2024-01-16-Pandas-备忘录/index.html",
    "href": "posts/2024-01-16-Pandas-备忘录/index.html",
    "title": "Pandas备忘录",
    "section": "",
    "text": "import pandas as pd\n\nprint(pd.__version__)\n\n2.2.1"
  },
  {
    "objectID": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.read_csv",
    "href": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.read_csv",
    "title": "Pandas备忘录",
    "section": "pandas.read_csv",
    "text": "pandas.read_csv\n\ndtype：指定数据类型，比如指定股票代码这一列为 str 类型\n\ndata = pd.read_csv(\"./stocks.csv\", dtype={\"secCode\":str})\n\nparse_dates：尝试将某一列解析为日期。设定为 True，则解析索引。也可以使用列表指定解析某一列\n\ndata = pd.read_csv(\"./stocks.csv\", parse_dates=[1])        # 解析第二列\ndata = pd.read_csv(\"./stocks.csv\", pares_dates=[\"date\"])   # 解析 date 列\n\non_bad_lines：{‘error’, ‘warn’, ‘skip’}"
  },
  {
    "objectID": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.dataframe.rename",
    "href": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.dataframe.rename",
    "title": "Pandas备忘录",
    "section": "pandas.DataFrame.rename",
    "text": "pandas.DataFrame.rename\n\nmapper：mapper 与 axis 搭配使用\ncolumns：修改列名\nindex：修改索引\ninplace：是否原地修改\naxis\n\n\ndata = pd.DataFrame(\n    {\"A\": [1, 2, 3], \"B\": [2, 3, 4], \"C\": [3, 4, 5]}, index=[\"x\", \"y\", \"z\"]\n)\n\ndata\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\nx\n1\n2\n3\n\n\ny\n2\n3\n4\n\n\nz\n3\n4\n5\n\n\n\n\n\n\n\n\ndata.rename(columns={\"A\": \"a\", \"B\": \"b\"})\n\n\n\n\n\n\n\n\na\nb\nC\n\n\n\n\nx\n1\n2\n3\n\n\ny\n2\n3\n4\n\n\nz\n3\n4\n5\n\n\n\n\n\n\n\n\ndata.rename(index={\"x\": \"X\", \"y\": \"Y\"})\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\nX\n1\n2\n3\n\n\nY\n2\n3\n4\n\n\nz\n3\n4\n5\n\n\n\n\n\n\n\n\ndata.rename(mapper=lambda c: c.lower(), axis=1)\n\n\n\n\n\n\n\n\na\nb\nc\n\n\n\n\nx\n1\n2\n3\n\n\ny\n2\n3\n4\n\n\nz\n3\n4\n5"
  },
  {
    "objectID": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.dataframe.insert",
    "href": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.dataframe.insert",
    "title": "Pandas备忘录",
    "section": "pandas.DataFrame.insert",
    "text": "pandas.DataFrame.insert\n\nloc：插入的索引位置\ncolumn：列名\nvalue：Scalar/Series/array-like，插入列的内容\n\n\ndata = pd.DataFrame(\n    {\"A\": [1, 2, 3], \"B\": [2, 3, 4], \"C\": [3, 4, 5]}, index=[\"x\", \"y\", \"z\"]\n)\n\ndata\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\nx\n1\n2\n3\n\n\ny\n2\n3\n4\n\n\nz\n3\n4\n5\n\n\n\n\n\n\n\n\ndata.insert(0, column=\"D\", value=0)\ndata\n\n\n\n\n\n\n\n\nD\nA\nB\nC\n\n\n\n\nx\n0\n1\n2\n3\n\n\ny\n0\n2\n3\n4\n\n\nz\n0\n3\n4\n5\n\n\n\n\n\n\n\n\ndata.insert(0, column=\"E\", value=[6, 6, 6])\ndata\n\n\n\n\n\n\n\n\nE\nD\nA\nB\nC\n\n\n\n\nx\n6\n0\n1\n2\n3\n\n\ny\n6\n0\n2\n3\n4\n\n\nz\n6\n0\n3\n4\n5"
  },
  {
    "objectID": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.dataframe.assign",
    "href": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.dataframe.assign",
    "title": "Pandas备忘录",
    "section": "pandas.DataFrame.assign",
    "text": "pandas.DataFrame.assign\n\ndata = pd.DataFrame(\n    {\"A\": [1, 2, 3], \"B\": [2, 3, 4], \"C\": [3, 4, 5]}, index=[\"x\", \"y\", \"z\"]\n)\n\ndata\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\nx\n1\n2\n3\n\n\ny\n2\n3\n4\n\n\nz\n3\n4\n5\n\n\n\n\n\n\n\n\ndata.assign(D=lambda df: df.C + 1)\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nx\n1\n2\n3\n4\n\n\ny\n2\n3\n4\n5\n\n\nz\n3\n4\n5\n6\n\n\n\n\n\n\n\n\ndata.assign(D=lambda df: df.C + 1, E=lambda df: df.D + 1)\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\nx\n1\n2\n3\n4\n5\n\n\ny\n2\n3\n4\n5\n6\n\n\nz\n3\n4\n5\n6\n7"
  },
  {
    "objectID": "posts/2024-01-16-Pandas-备忘录/index.html#lociloc",
    "href": "posts/2024-01-16-Pandas-备忘录/index.html#lociloc",
    "title": "Pandas备忘录",
    "section": "loc/iloc",
    "text": "loc/iloc\n选择已有列名则修改原始数据；新定义列名则插入新的数据\n\ndata = pd.DataFrame(\n    {\"A\": [1, 2, 3], \"B\": [2, 3, 4], \"C\": [3, 4, 5]}, index=[\"x\", \"y\", \"z\"]\n)\n\ndata\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\nx\n1\n2\n3\n\n\ny\n2\n3\n4\n\n\nz\n3\n4\n5\n\n\n\n\n\n\n\n\ndata.loc[:, \"D\"] = 0\ndata\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nx\n1\n2\n3\n0\n\n\ny\n2\n3\n4\n0\n\n\nz\n3\n4\n5\n0\n\n\n\n\n\n\n\n\ndata.loc[:, \"D\"] = 1\ndata\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nx\n1\n2\n3\n1\n\n\ny\n2\n3\n4\n1\n\n\nz\n3\n4\n5\n1"
  },
  {
    "objectID": "posts/2024-01-16-Pandas-备忘录/index.html#lociloc-1",
    "href": "posts/2024-01-16-Pandas-备忘录/index.html#lociloc-1",
    "title": "Pandas备忘录",
    "section": "loc/iloc",
    "text": "loc/iloc\n\ndata = pd.DataFrame(\n    {\"A\": [1, 2, 3], \"B\": [2, 3, 4], \"C\": [3, 4, 5]}, index=[\"x\", \"y\", \"z\"]\n)\n\ndata\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\nx\n1\n2\n3\n\n\ny\n2\n3\n4\n\n\nz\n3\n4\n5\n\n\n\n\n\n\n\n\ndata.loc[\"x\"] = 0\ndata\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\nx\n0\n0\n0\n\n\ny\n2\n3\n4\n\n\nz\n3\n4\n5\n\n\n\n\n\n\n\n\ndata.loc[\"m\"] = 1\ndata\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\nx\n0\n0\n0\n\n\ny\n2\n3\n4\n\n\nz\n3\n4\n5\n\n\nm\n1\n1\n1"
  },
  {
    "objectID": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.dataframe.drop",
    "href": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.dataframe.drop",
    "title": "Pandas备忘录",
    "section": "pandas.DataFrame.drop",
    "text": "pandas.DataFrame.drop\n\ndata = pd.DataFrame(\n    {\"A\": [1, 2, 3], \"B\": [2, 3, 4], \"C\": [3, 4, 5]}, index=[\"x\", \"y\", \"z\"]\n)\n\ndata\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\nx\n1\n2\n3\n\n\ny\n2\n3\n4\n\n\nz\n3\n4\n5\n\n\n\n\n\n\n\n\ndata.drop(labels=[\"A\", \"B\"], axis=1)\n\n\n\n\n\n\n\n\nC\n\n\n\n\nx\n3\n\n\ny\n4\n\n\nz\n5\n\n\n\n\n\n\n\n\ndata.drop(columns=[\"A\", \"B\"])\n\n\n\n\n\n\n\n\nC\n\n\n\n\nx\n3\n\n\ny\n4\n\n\nz\n5\n\n\n\n\n\n\n\n\ndata.drop(labels=[\"x\"], axis=0)\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\ny\n2\n3\n4\n\n\nz\n3\n4\n5\n\n\n\n\n\n\n\n\ndata.drop(index=[\"x\"], inplace=True)\ndata\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\ny\n2\n3\n4\n\n\nz\n3\n4\n5"
  },
  {
    "objectID": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.dataframe.set_index",
    "href": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.dataframe.set_index",
    "title": "Pandas备忘录",
    "section": "pandas.DataFrame.set_index",
    "text": "pandas.DataFrame.set_index\n\nkeys：label or array-like or list of labels/arrays\ndrop：是否删除作为索引的列，默认为 True\nappend：Whether to append columns to existing index, default False.\ninplace\n\n\ndata = pd.DataFrame(\n    {\"month\": [1, 4, 7, 10], \"year\": [2012, 2014, 2013, 2014], \"sale\": [55, 40, 84, 31]}\n)\n\ndata\n\n\n\n\n\n\n\n\nmonth\nyear\nsale\n\n\n\n\n0\n1\n2012\n55\n\n\n1\n4\n2014\n40\n\n\n2\n7\n2013\n84\n\n\n3\n10\n2014\n31\n\n\n\n\n\n\n\n\ndata.set_index(\"month\", drop=False)\n\n\n\n\n\n\n\n\nmonth\nyear\nsale\n\n\nmonth\n\n\n\n\n\n\n\n1\n1\n2012\n55\n\n\n4\n4\n2014\n40\n\n\n7\n7\n2013\n84\n\n\n10\n10\n2014\n31\n\n\n\n\n\n\n\n\ndata.set_index([\"month\", \"year\"])\n\n\n\n\n\n\n\n\n\nsale\n\n\nmonth\nyear\n\n\n\n\n\n1\n2012\n55\n\n\n4\n2014\n40\n\n\n7\n2013\n84\n\n\n10\n2014\n31\n\n\n\n\n\n\n\n\ndata.set_index(\"month\", append=True)\n\n\n\n\n\n\n\n\n\nyear\nsale\n\n\n\nmonth\n\n\n\n\n\n\n0\n1\n2012\n55\n\n\n1\n4\n2014\n40\n\n\n2\n7\n2013\n84\n\n\n3\n10\n2014\n31"
  },
  {
    "objectID": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.dataframe.reset_index",
    "href": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.dataframe.reset_index",
    "title": "Pandas备忘录",
    "section": "pandas.DataFrame.reset_index",
    "text": "pandas.DataFrame.reset_index\n\ndata = pd.DataFrame(\n    [(\"bird\", 389.0), (\"bird\", 24.0), (\"mammal\", 80.5), (\"mammal\", 78)],\n    index=[\"falcon\", \"parrot\", \"lion\", \"monkey\"],\n    columns=(\"class\", \"max_speed\"),\n)\n\ndata\n\n\n\n\n\n\n\n\nclass\nmax_speed\n\n\n\n\nfalcon\nbird\n389.0\n\n\nparrot\nbird\n24.0\n\n\nlion\nmammal\n80.5\n\n\nmonkey\nmammal\n78.0\n\n\n\n\n\n\n\n\ndata.reset_index()\n\n\n\n\n\n\n\n\nindex\nclass\nmax_speed\n\n\n\n\n0\nfalcon\nbird\n389.0\n\n\n1\nparrot\nbird\n24.0\n\n\n2\nlion\nmammal\n80.5\n\n\n3\nmonkey\nmammal\n78.0\n\n\n\n\n\n\n\n\ndata.reset_index(drop=True)\n\n\n\n\n\n\n\n\nclass\nmax_speed\n\n\n\n\n0\nbird\n389.0\n\n\n1\nbird\n24.0\n\n\n2\nmammal\n80.5\n\n\n3\nmammal\n78.0"
  },
  {
    "objectID": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.series.str.split",
    "href": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.series.str.split",
    "title": "Pandas备忘录",
    "section": "pandas.Series.str.split",
    "text": "pandas.Series.str.split\n这个方法我常用在需要从日期中提取年份时，比如：\n\ndata = pd.DataFrame(\n    {\"ticker\": [\"000001\", \"000018\", \"600201\"],\n     \"date\": [\"2018-08-03\", \"2019-02-12\", \"2020-12-31\"]},\n)\n\ndata\n\n\n\n\n\n\n\n\nticker\ndate\n\n\n\n\n0\n000001\n2018-08-03\n\n\n1\n000018\n2019-02-12\n\n\n2\n600201\n2020-12-31\n\n\n\n\n\n\n\n\n# 提取年份，expand=True\ndata.loc[:, \"year\"] = data.date.str.split(\"-\", expand=True, n=1).iloc[:,0]\ndata\n\n\n\n\n\n\n\n\nticker\ndate\nyear\n\n\n\n\n0\n000001\n2018-08-03\n2018\n\n\n1\n000018\n2019-02-12\n2019\n\n\n2\n600201\n2020-12-31\n2020"
  },
  {
    "objectID": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.series.str.zfill",
    "href": "posts/2024-01-16-Pandas-备忘录/index.html#pandas.series.str.zfill",
    "title": "Pandas备忘录",
    "section": "pandas.series.str.zfill",
    "text": "pandas.series.str.zfill\n在读取股价数据时，有时候股票代码前面的 0 缺失，可以使用这个方法来填充。\n\ndata = pd.DataFrame(\n    {\"ticker\": [\"1\", \"18\", \"600201\"],\n     \"date\": [\"2018-08-03\", \"2019-02-12\", \"2020-12-31\"]},\n)\n\ndata\n\n\n\n\n\n\n\n\nticker\ndate\n\n\n\n\n0\n1\n2018-08-03\n\n\n1\n18\n2019-02-12\n\n\n2\n600201\n2020-12-31\n\n\n\n\n\n\n\n\ndata.loc[:, \"ticker\"] = data.ticker.str.zfill(6)\ndata\n\n\n\n\n\n\n\n\nticker\ndate\n\n\n\n\n0\n000001\n2018-08-03\n\n\n1\n000018\n2019-02-12\n\n\n2\n600201\n2020-12-31"
  },
  {
    "objectID": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html",
    "href": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html",
    "title": "如何使用 Nikola 搭建个人博客",
    "section": "",
    "text": "一直希望搭建一个博客，一方面是希望能有一个地方记录整理自己学过的知识，另一方面也希望能交到一些志同道合的朋友（有人可以讨论真是太棒了！）在各种鼓捣之后，我选择了 Nikola，因为它原生支持 Jupyter notebook。至于为什么选择静态博客，Nikola 官网这篇文章写的很好。\n关于如何使用 Nikola 搭建博客和个人网站，相关的中文资源比较少，这篇文章是我个人，来自一个非科班背景的踩坑经历。博客在 WSL2 上搭建，Windows 与 Mac 上搭建也类似，环境如下："
  },
  {
    "objectID": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#nikola-安装",
    "href": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#nikola-安装",
    "title": "如何使用 Nikola 搭建个人博客",
    "section": "Nikola 安装",
    "text": "Nikola 安装\n官方文档推荐使用虚拟环境来安装 Nikola，我们可以使用 Python 自带的 venv 模块来创建虚拟环境。\n# 首先新建一个博客目录\nmkdir myblog\n\n# 然后进入到 myblog 目录下，创建虚拟环境\ncd myblog\npython3 -m venv blog\n\n# 进入到虚拟环境目录，激活虚拟环境\ncd blog\nsource ./bin/activate\n\n# 使用 pip 安装 Nikola\npip install -U pip setuptools wheel\npip install -U \"Nikola[extras]\"\n官方文档推荐在安装时选择 Nikola[extras] 版本（可以体验一些额外的功能），但是你也可以选择安装 Nikola 版本。"
  },
  {
    "objectID": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#初始化博客",
    "href": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#初始化博客",
    "title": "如何使用 Nikola 搭建个人博客",
    "section": "初始化博客",
    "text": "初始化博客\n在安装完 Nikola 之后，我们就可以使用 Nikola 提供的命令初始化博客了。\nnikola init --demo my_blog\n这条命令会在当前目录下创建一个新的目录 my_blog，--demo my_blog 参数表示在初始化目录的时候创建一些 demo 文件（当然你也可以选择不创建 demo 文件，使用 --quiet 参数）。你会看到如下输出和提问：\nCreating Nikola Site\n====================\n\nThis is Nikola v8.2.1.  We will now ask you a few easy questions about your new site.\nIf you do not want to answer and want to go with the defaults instead, simply restart with the `-q` parameter.\n--- Questions about the site ---\nSite title [My Nikola Site]:\n回答命令行中的提问：\n\nSite title：网站名\nSite author：网站作者\nSite author’s e-mail：联系邮箱\nSite description：网站描述，生成网站的 meta description\nSite URL：网页 URL\nEnable pretty URLs (/page/ instead of /page.html) that don’t need web server configuration? [Y/n]：是否开启 pretty URLs\nLanguage(s) to use [en]：选择网站显示语言\nTime zone [Asia/Shanghai]：选择时区\nComment system：选择评论系统\n\n当你看到以下提示时，就说明博客初始化成功了。\nThat's it, Nikola is now configured.  Make sure to edit conf.py to your liking.\nIf you are looking for themes and addons, check out https://themes.getnikola.com/ and https://plugins.getnikola.com/.\nHave fun!\n[2022-04-29 16:09:00] INFO: init: A new site with example data has been created at my_blog.\n[2022-04-29 16:09:00] INFO: init: See README.txt in that folder for more information.\n我们可以看一下 my_blog 目录，这是我们的博客根目录。\n.\n├── files\n├── galleries\n├── images  # 图片存放目录\n├── listings\n│   └── __pycache__\n├── pages  # 页面存放目录\n├── posts  # 文章存放目录\n└── templates  # 生成站点的模板文件存放目录"
  },
  {
    "objectID": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#新建博客",
    "href": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#新建博客",
    "title": "如何使用 Nikola 搭建个人博客",
    "section": "新建博客",
    "text": "新建博客\n博客初始化完成之后，我们就可以添加第一篇博客了。\n\n添加第一篇博客\n如果你习惯使用命令行，可以使用命令 nikola new_post -f markdown 添加第一篇博客：\nCreating New Post\n-----------------\n\nTitle: First post\nScanning posts........done!\n[2022-04-29 20:50:04] INFO: new_post: Your post's text is at: posts/first-post.md\n-f 参数指定文章格式，这里我们指定为 markdown 格式，该命令会在 posts 文件夹下新建一个 markdown 文件，你可以 cd 到 posts 目录下，继续编辑该博客。打开该博客，你会发现以下元信息：\n&lt;!--\n.. title: First post\n.. slug: first-post\n.. date: 2022-12-30 19:30:43 UTC+08:00\n.. tags: \n.. category: \n.. link: \n.. description: \n.. type: text\n--&gt;\n\ntitle：文章标题\nslug：固定链接地址，是 URL 最后一个反斜杠之后的那一部分。slug 如果不指定，Nikola 默认使用文章标题作为 slug。\ndate：文章创建时间\ntags：文章标签\ncategory：文章分类\nlink：Link to original source for content. May be displayed by some themes.（官方文档介绍，暂时没用过）\ndescription：页面描述\ntype：文章类型\n\n除此之外，另一个常用的元信息字段是 has_math。如果文章中有 latex 公式，就需要添加该字段。一般常用的 metadata 字段就这些，如果你想深入了解，推荐官方文档。\n如果你不习惯使用命令行，也可以直接在 posts 目录下新建 markdown 文件，然后利用你喜欢的编辑器进行编辑，但需要手动添加元信息。除了 markdown，Nikola 也支持如下格式：\n\n\nreStructuredText (default and pre-configured)\nMarkdown (pre-configured since v7.8.7)\nJupyter Notebook\nHTML\nPHP\nanything Pandoc supports (including Textile, DocBook, LaTeX, MediaWiki, TWiki, OPML, Emacs Org-Mode, txt2tags, Microsoft Word .docx, EPUB, Haddock markup)\n\n\n\n\n生成静态文件\n写完博客之后，下面我们使用命令 nikola build 生成静态文件。nikola build 会在博客根目录下新建一个 output 目录，这个目录就是你的站点资源目录，你的博客网站里所有显示的内容都来自于这个目录。我们来看下这个目录：\n.\n├── 2012  # 博客归档目录，Nikola demo 文件中有一篇是 2012 年写的\n├── archive.html  # 显示博客归档页面\n├── assets  # css js fonts img 等资源目录\n├── categories  # 博客分类\n├── favicon.ico\n├── galleries\n├── images\n├── index.html # 博客首页\n├── listings\n├── pages\n├── posts  # 博客目录\n├── robots.txt\n├── rss.xml\n├── sitemap.xml\n└── sitemapindex.xml\n这里，我们需要关注 posts 目录，nikola build 命令会将我们写的 markdown 文件转化为 html 文件并保存在该目录下。\n\n\n本地调试\n使用命令 nikola serve -b 会打开默认浏览器，方便我们进行本地调试。这里，由于我是在 WSL2 中搭建博客，键入 nikola serve -b 命令之后，http://0.0.0.0:8000/ 显示拒绝访问，Windows 和 Mac 应该不存在这个问题。\n解决方法是在 windows C:\\Users\\Me 目录下新建 .wslconfig 配置文件，并输入以下内容：\n[wsl2]\nlocalhostForwarding=true"
  },
  {
    "objectID": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#让-nikola-支持-jupyter-notebook",
    "href": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#让-nikola-支持-jupyter-notebook",
    "title": "如何使用 Nikola 搭建个人博客",
    "section": "让 Nikola 支持 Jupyter Notebook",
    "text": "让 Nikola 支持 Jupyter Notebook\n下面我们让 Nikola 支持 Jupyter Notebook，毕竟这是数据科学家的博客:)\n首先我们需要在 COMPILERS 中定义 ipynb 文件。打开站点配置文件 conf.py，搜索 COMPILERS，如下定义 ipynb 文件：\nCOMPILERS = {                                                                               \n    \"rest\": ['.rst', '.txt'],\n    \"markdown\": ['.md', '.mdown', '.markdown'],\n    \"textile\": ['.textile'],\n    \"txt2tags\": ['.t2t'],\n    \"bbcode\": ['.bb'],\n    \"wiki\": ['.wiki'],\n    \"ipynb\": ['.ipynb'],\n    \"html\": ['.html', '.htm'],\n    \"php\": ['.php'],\n}\n其次，我们需要在 POSTS 中定义 .ipynb 插件。编辑站点配置文件 conf.py，搜索 POSTS，如下定义 .ipynb 插件：\n POSTS = (                                                                              \n     (\"posts/*.rst\", \"posts\", \"post.tmpl\"),\n     (\"posts/*.md\", \"posts\", \"post.tmpl\"),\n     (\"posts/*.txt\", \"posts\", \"post.tmpl\"),\n     (\"posts/*.html\", \"posts\", \"post.tmpl\"),\n     (\"posts/*.ipynb\", \"posts\", \"post.tmpl\"),\n )\n使用 Jupyter Notebook 写博客与 markdown 类似，你可以在 posts 文件下新建 ipynb 文件，然后用 Jupyter Notebook 打开编辑。\n我们可以使用字典向 Jupyter Notebook 中添加博客文章必需的元信息，方法为打开 Jupyter Notebook，菜单栏选择 Edit -&gt; Edit Notebook Metadata，添加如下格式信息：\n{\n  \"nikola\": {\n    \"title\": \"Example for Jupyter Notebook metadata configuration\",\n    \"slug\": \"example-for-jupyter-notebook-metadata-configuration\",\n    \"date\": \"2022-04-29 19:52:05 UTC\"\n  }\n}"
  },
  {
    "objectID": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#markdown-支持",
    "href": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#markdown-支持",
    "title": "如何使用 Nikola 搭建个人博客",
    "section": "markdown 支持",
    "text": "markdown 支持\nNikola 默认使用 python-markdown 解析 markdown，你也可以选择使用 pandoc，这篇博客讲的非常清楚。\n另外，如果你喜欢使用 Pelican-style 风格添加博客元信息，需要添加 markdown.extensions.meta 插件。此外，你也可以使用 markdown.extensions.toc 插件自动解析文章目录。打开站点配置文件，编辑 markdown 插件配置选项：\n MARKDOWN_EXTENSIONS = [\n     'markdown.extensions.meta',\n     'markdown.extensions.fenced_code',\n     'markdown.extensions.codehilite',\n     'markdown.extensions.extra',\n     'markdown.extensions.toc',  # 自动解析文章目录\n ]"
  },
  {
    "objectID": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#数学公式支持",
    "href": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#数学公式支持",
    "title": "如何使用 Nikola 搭建个人博客",
    "section": "数学公式支持",
    "text": "数学公式支持\nNikola 默认使用 MathJax 显示数学公式，你可以使用 Katex。编辑站点配置文件，修改 USE_KATEX=True。Nikola 默认使用 \\(...\\) 渲染行内公式，使用 \\[...\\] 和 $$...$$ 渲染行间公式。如果你习惯使用 $...$ 渲染行内公式，需要修改配置文件，搜索 KATEX_AUTO_RENDER ，如下编辑：\nKATEX_AUTO_RENDER = \"\"\"\ndelimiters: [\n    {left: \"$$\", right: \"$$\", display: true},\n    {left: \"\\\\\\\\[\", right: \"\\\\\\\\]\", display: true},\n    {left: \"\\\\\\\\begin{equation*}\", right: \"\\\\\\\\end{equation*}\", display: true},\n    {left: \"$\", right: \"$\", display: false},\n    {left: \"\\\\\\\\(\", right: \"\\\\\\\\)\", display: false}\n]\n\"\"\""
  },
  {
    "objectID": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#更换主题",
    "href": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#更换主题",
    "title": "如何使用 Nikola 搭建个人博客",
    "section": "更换主题",
    "text": "更换主题\n首先，我们需要下载主题。利用 nikola theme -i bootstrap4 命令下载主题。然后我们编辑站点配置文件 conf.py，搜索 THEME，将主题修改为 bootstrap4。"
  },
  {
    "objectID": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#导航栏配置",
    "href": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#导航栏配置",
    "title": "如何使用 Nikola 搭建个人博客",
    "section": "导航栏配置",
    "text": "导航栏配置\n我们可以通过修改 THEME_CONFIG 来修改导航栏配色。bootstrap4 导航栏默认是暗底，也可以自定义背景颜色，配置文件如下：\n THEME_CONFIG = {\n      DEFAULT_LANG: {\n          # Use a light navbar with dark text. Defaults to False.                                   \n          'navbar_light': False,\n          # Use a custom navbar color. If unset, 'navbar_light' sets text +\n          # background color. If set, navbar_light controls only background\n          # color. Supported values: bg-dark, bg-light, bg-primary, bg-secondary,\n          # bg-success, bg-danger, bg-warning, bg-info, bg-white, bg-transparent.\n          'navbar_custom_bg': '',\n      }\n }\n导航栏默认有博客归档、分类和 RSS 订阅栏目，我们可以通过修改 NAVIGATION_LINKS 来自定义导航栏目。其默认配置如下：\nNAVIGATION_LINKS = {\n    DEFAULT_LANG: (\n        (\"/archive.html\", \"Archive\"),\n        (\"/categories/\", \"Tags\"),\n        (\"/rss.xml\", \"RSS feed\"),\n    ),\n}\n这里 / 代表站点资源根目录，即 output 目录。我们可以通过指定资源目录，自定义导航栏。比如在 categories/ 目录下，Nikola 生成了 cat_nikola、cat_python 等类别目录，我们可以指定这两个目录，新建一个多级 TECH 导航栏目。\nNAVIGATION_LINKS = {\n    DEFAULT_LANG: (\n        (\"/archive.html\", \"Archive\"),\n        (\"/categories/\", \"Tags\"),\n        (\"/rss.xml\", \"RSS feed\"),\n        (\n          (\n            (\"/categories/cat_nikola/\", \"Nikola\"),\n            (\"/categories/cat_python/\", \"Python\")\n          ),\n          \"TECH\"\n        ),\n    ),\n}"
  },
  {
    "objectID": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#网页图标与-logo",
    "href": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#网页图标与-logo",
    "title": "如何使用 Nikola 搭建个人博客",
    "section": "网页图标与 logo",
    "text": "网页图标与 logo\n首先我们进入博客根目录中的 files 目录，新建 assets 目录，再新建 img 目录，然后将网页图标 favicon 和 logo 文件拷贝到 img 目录中。nikola build 在生成静态文件时会将 files 文件下的资源都复制到 output 目录。\n然后编辑站点配置文件 conf.py 搜索 FAVICONS 和 LOGO，如下配置：\nFAVICONS = (\n    (\"icon\", \"/assets/img/favicon.ico\", \"16x16\"),\n)\n\nLOGO_URL = '/assets/img/logo.jpg'"
  },
  {
    "objectID": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#代码显示风格",
    "href": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#代码显示风格",
    "title": "如何使用 Nikola 搭建个人博客",
    "section": "代码显示风格",
    "text": "代码显示风格\nNikola 使用 Pygments 进行语法高亮，你可以在 Pygments styles 选择自己喜欢的配色风格。我比较喜欢 zenburn，编辑站点配置文件 conf.py ，搜索 CODE_COLOR_SCHEME ，如下配置：\nCODE_COLOR_SCHEME = 'zenburn'"
  },
  {
    "objectID": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#目录美化",
    "href": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#目录美化",
    "title": "如何使用 Nikola 搭建个人博客",
    "section": "目录美化",
    "text": "目录美化\n如果你使用了 markdown.extensions.toc 插件解析文章目录，你会发现这个目录比较丑。Nikola 使用 post.tmpl 模板文件来生成博客文章页面，我们可以修改这个模板文件，从而美化目录（这需要你懂一点前端和 Mako 模板引擎的知识:)\n首先，我们将 post.tmpl 文件复制到博客根目录，命令行输入 nikola theme -c post.tmpl，该命令会将 post.tmpl 文件复制 templates 目录下，然后我们编辑这个文件。因为我们只是希望美化博客文章页面的目录，所以可以使用内部样式表，在 &lt;style&gt; 标签中定义样式。比如，我是这样美化的：\n@media screen and (min-width: 1024px) {\n    .e-content {\n        display: grid;\n        grid-template-columns: 3fr 1fr;\n        column-gap: 30px;\n        position: relative;\n    }\n\n    .toc {\n        grid-column: 2 / 3;\n        grid-row: 1 / span 999;\n        align-self: start;\n        position: sticky;\n        top: 20px;\n    }\n        \n    .toc::before {\n        content: \"ON this page\";\n        background-color: #ffe70e;\n        color: #444;\n        font-size: 16px;\n        font-weight: bold;\n        font-style: italic;\n        padding: 5px 5px;\n        margin-left: 20px;\n    }\n}\n\n@media screen and (max-width: 767px) {\n    .e-content {\n        display: grid;\n        grid-template-columns: 1fr;\n    }\n            \n    .toc {\n        grid-column: 1 / 2;\n    }\n            \n    .toc::before {\n        content: \"ON this page\";\n        background-color: #ffe70e;\n        color: #444;\n        font-size: 16px;\n        font-weight: bold;\n        font-style: italic;\n        padding: 5px 5px;\n        margin-left: 20px;\n    }\n\n}"
  },
  {
    "objectID": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#定制样式",
    "href": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#定制样式",
    "title": "如何使用 Nikola 搭建个人博客",
    "section": "定制样式",
    "text": "定制样式\nNikola 支持定制样式，我们可以通过在 files/assets/css/ 目录下，新建 custom.css 文件来定制全局字体，行距等样式。如果你觉得我的样式不错，也可以选择复制我的:)"
  },
  {
    "objectID": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#个性化首页",
    "href": "posts/2022-04-29-Blog-with-Nikola-and-WSL2/index.html#个性化首页",
    "title": "如何使用 Nikola 搭建个人博客",
    "section": "个性化首页",
    "text": "个性化首页\nNikola 默认的首页是博客文章列表，并且是显示文章全部内容。我们可以通过修改配置文件 INDEX_TEASERS=True，然后在文章源文件中加入 &lt;!--- TEASER_END ---&gt; 来选择显示部分内容。\n首页默认显示 10 篇文章，我们可以通过编辑站点配置文件中的 INDEX_DISPLAY_POST_COUNT 来选择首页显示的文章数量。\n此外，如果你希望定制首页，比如首页是一个 Greeting 页面，显示个人信息等等（像我这样:) 我强烈建议修改 index.tmpl 模板文件。如果你懂一点前端，可以在这里大显身手。使用命令 nikola theme -c index.tmpl 将模板文件复制到 templates 目录下，进行修改。"
  },
  {
    "objectID": "posts/2024-01-08-matplotlib-科研绘图笔记/index.html",
    "href": "posts/2024-01-08-matplotlib-科研绘图笔记/index.html",
    "title": "Matplotlib科研绘图案例集合",
    "section": "",
    "text": "这篇博客记录利用 matplotlib 进行科研绘图的一列案例，部分案例来自于这篇博客。\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.datasets import load_iris\nimport math\n\n\n\n\nCode\ndata = load_iris()\nsepal_length = data[\"data\"][:, 0]\nsepal_width = data[\"data\"][:, 1]\n\n\n\n\nCode\nfig, ax = plt.subplots(figsize=(10, 6), dpi=100, layout=\"constrained\")\n\n# 设置是否显示图像边框\nax.spines[\"top\"].set_visible(False)\nax.spines[\"bottom\"].set_visible(True)\nax.spines[\"bottom\"].set_color(\"grey\")\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\n\nax.tick_params(\n    axis=\"both\",\n    which=\"both\",\n    bottom=True,  # 显示底部刻度线\n    top=False,\n    labelbottom=True,\n    left=False,  # 不显示左侧刻度线\n    right=False,\n    labelleft=True,\n    color=\"grey\",\n    labelcolor=\"grey\",\n)\n\n# 设置 x y 轴刻度范围，避免不必要的空白\nax.set_ylim([sepal_width.min() - 0.5, math.ceil(sepal_length.max())])\nax.set_xlim([0, 150])\n\n# 设置 x y 轴刻度和刻度标签\n# 根据原始数据范围，设置刻度时灵活使用 int 向下取整和 math.ceil 向上取整\nax.set_yticks(\n    range(int(sepal_width.min()), math.ceil(sepal_length.max()) + 1, 1),\n    [\n        str(x)\n        for x in range(int(sepal_width.min()), math.ceil(sepal_length.max()) + 1, 1)\n    ],\n    fontsize=12,\n)\nax.set_xticks(range(0, 151, 30), [str(x) for x in range(0, 151, 30)], fontsize=12)\n\n# 在图上提供刻度线\n# 以帮助观众沿着坐标轴刻度进行追踪\n# 可以设置为虚线和浅色，以免遮挡主要的数据线\n# 刻度线设置注意与 y 轴刻度一致\nfor y in range(int(sepal_width.min()), math.ceil(sepal_length.max()) + 1, 1):\n    ax.plot(\n        range(len(sepal_length)), [y] * len(sepal_length), \"--\", lw=0.5, color=\"grey\"\n    )\n\n\nax.plot(\n    range(len(sepal_length)),\n    sepal_length,\n    color=\"black\",\n    linestyle=\"-\",\n    linewidth=0.8,\n    label=\"sepal length\",\n)\nax.plot(\n    range(len(sepal_width)),\n    sepal_width,\n    color=\"black\",\n    linestyle=\"--\",\n    linewidth=0.8,\n    label=\"sepal width\",\n)\n# ax.set_xlabel(\"xlabel\", fontsize=12)\n# 使用 labelpad 灵活设置 y 轴标签与 y 轴距离\nax.set_ylabel(\"sepal length and width(cm)\", fontsize=12, labelpad=8)\n\n# 使用 bbox_to_anchor 和 loc 定位图例位置\n# nloc 设置行列数；frameon 设置边框显示\nax.legend(bbox_to_anchor=(0.5, -0.15), loc=\"lower center\", ncol=2, frameon=False)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\ngender_degree_data = pd.read_csv(\n    \"http://www.randalolson.com/assets/2014/06/percent-bachelors-degrees-women-usa.csv\"\n)\n\n\n\n\nCode\ntableau20 = [\n    (31, 119, 180),\n    (174, 199, 232),\n    (255, 127, 14),\n    (255, 187, 120),\n    (44, 160, 44),\n    (152, 223, 138),\n    (214, 39, 40),\n    (255, 152, 150),\n    (148, 103, 189),\n    (197, 176, 213),\n    (140, 86, 75),\n    (196, 156, 148),\n    (227, 119, 194),\n    (247, 182, 210),\n    (127, 127, 127),\n    (199, 199, 199),\n    (188, 189, 34),\n    (219, 219, 141),\n    (23, 190, 207),\n    (158, 218, 229),\n]\n\n# 将RGB值缩放到[0, 1]的范围内\nfor i in range(len(tableau20)):\n    r, g, b = tableau20[i]\n    tableau20[i] = (r / 255.0, g / 255.0, b / 255.0)\n\n\n\n\nCode\nfig, ax = plt.subplots(figsize=(12, 14), layout=\"constrained\")\n\n# 去除图像的边框\nax.spines[\"top\"].set_visible(False)\nax.spines[\"bottom\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\n\n# 保证 x 轴刻度处于底部\n# 保证 y 轴刻度处于左侧\nax.get_xaxis().tick_bottom()\nax.get_yaxis().tick_left()\n\n# 设置 x y 轴刻度范围，避免不必要的空白\nax.set_ylim([0, 90])\nax.set_xlim([1968, 2014])\n\n# 设置 x y 轴刻度和刻度标签\nax.set_yticks(range(0, 91, 10), [str(x) + \"%\" for x in range(0, 91, 10)], fontsize=14)\nax.set_xticks(\n    range(1970, 2011, 10), [str(x) for x in range(1970, 2011, 10)], fontsize=14\n)\n\n# 在图上提供刻度线\n# 以帮助观众沿着坐标轴刻度进行追踪\n# 可以设置为虚线和浅色，以免遮挡主要的数据线\nfor y in range(10, 91, 10):\n    ax.plot(\n        range(1968, 2012),\n        [y] * len(range(1968, 2012)),\n        \"--\",\n        lw=0.5,\n        color=\"black\",\n        alpha=0.3,\n    )\n\n# 去除 x y 轴刻度上的刻度指示线\nplt.tick_params(\n    axis=\"both\",\n    which=\"both\",\n    bottom=False,\n    top=False,\n    labelbottom=True,\n    left=False,\n    right=False,\n    labelleft=True,\n)\n\nmajors = [\n    \"Health Professions\",\n    \"Public Administration\",\n    \"Education\",\n    \"Psychology\",\n    \"Foreign Languages\",\n    \"English\",\n    \"Communications\\nand Journalism\",\n    \"Art and Performance\",\n    \"Biology\",\n    \"Agriculture\",\n    \"Social Sciences and History\",\n    \"Business\",\n    \"Math and Statistics\",\n    \"Architecture\",\n    \"Physical Sciences\",\n    \"Computer Science\",\n    \"Engineering\",\n]\n\n# 使用 text() 方法精确添加图例\nfor rank, column in enumerate(majors):\n    # Plot each line separately with its own color, using the Tableau 20\n    # color set in order.\n    ax.plot(\n        gender_degree_data.Year.values,\n        gender_degree_data[column.replace(\"\\n\", \" \")].values,\n        lw=2.5,\n        color=tableau20[rank],\n    )\n\n    # Add a text label to the right end of every line. Most of the code below\n    # is adding specific offsets y position because some labels overlapped.\n    y_pos = gender_degree_data[column.replace(\"\\n\", \" \")].values[-1] - 0.5\n    if column == \"Foreign Languages\":\n        y_pos += 0.5\n    elif column == \"English\":\n        y_pos -= 0.5\n    elif column == \"Communications\\nand Journalism\":\n        y_pos += 0.75\n    elif column == \"Art and Performance\":\n        y_pos -= 0.25\n    elif column == \"Agriculture\":\n        y_pos += 1.25\n    elif column == \"Social Sciences and History\":\n        y_pos += 0.25\n    elif column == \"Business\":\n        y_pos -= 0.75\n    elif column == \"Math and Statistics\":\n        y_pos += 0.75\n    elif column == \"Architecture\":\n        y_pos -= 0.75\n    elif column == \"Computer Science\":\n        y_pos += 0.75\n    elif column == \"Engineering\":\n        y_pos -= 0.25\n\n    ax.text(2011.5, y_pos, column, fontsize=14, color=tableau20[rank])\n\n# title() 方法会将标题居中显示在图上，但并不会居中于整个图形\n# 因此使用 text() 方法显示标题\nax.text(\n    1995,\n    93,\n    \"Percentage of Bachelor's degrees conferred to women in the U.S.A.\"\n    \", by major (1970-2012)\",\n    fontsize=17,\n    ha=\"center\",\n)\n\n# 标示数据来源和 copyright\nax.text(\n    1966,\n    -8,\n    \"Data source: nces.ed.gov/programs/digest/2013menu_tables.asp\"\n    \"\\nAuthor: Randy Olson (randalolson.com / @randal_olson)\"\n    \"\\nNote: Some majors are missing because the historical data \"\n    \"is not available for them\",\n    fontsize=10,\n)\n\n# bbox_inches='tight' 去除图像边缘的多余空白\n# plt.savefig(\"percent-bachelors-degrees-women-usa.png\", bbox_inches=\"tight\")\nplt.show()"
  },
  {
    "objectID": "posts/2023-01-31-手把手教你做事件研究-数据清洗Part1/index.html",
    "href": "posts/2023-01-31-手把手教你做事件研究-数据清洗Part1/index.html",
    "title": "手把手教你做事件研究-数据清洗Part1",
    "section": "",
    "text": "这篇博客（视频）记录区块链技术投资公告效应研究样本的数据清洗过程，主要内容是剔除并非区块链技术投资事件相关公告；剔除 ST 类公司；剔除年度、季度公告、发债类公告、招股说明书、发行股票募集说明书、非公开发行普通股、非公开发行优先股、发行保荐书、社会责任公告等。 \n\nimport numpy as np\nimport pandas as pd\n\n\nraw_data = pd.read_csv('./data/raw_data.csv')\n\n\nraw_data.head()\n\n\n\n\n\n\n\n\nsecCode\nsecName\norgId\nannouncementTitle\nannouncementTime\nadjunctUrl\nannouncementContent\n\n\n\n\n0\n000631\n顺发恒业\ngssz0000631\n*ST 兰宝：重大资产出售、发行股份购买资产暨关联交易报告书（修订稿）\n2009-02-28\nhttp://static.cninfo.com.cn/finalpage/2009-02-...\n（二）公司业绩持续下滑，且无改善迹象 由于个别银行发现公司资金链紧张，逐步停止转贷并收缩银根...\n\n\n1\n600596\n新安股份\ngssh0600596\n新安股份：2008年年度报告\n2009-03-10\nhttp://static.cninfo.com.cn/finalpage/2009-03-...\n3.新安包装公司搬迁事项 因新安江桥东区块旧城改造，新安包装公司于本期从老厂区（新安江街道桥...\n\n\n2\n600267\n海正药业\ngssh0600267\n海正药业：2008年年度股东大会会议资料\n2009-03-20\nhttp://static.cninfo.com.cn/finalpage/2009-03-...\n100.00% 141,278 100.00% 115,132 100.00% 公司凭借原料...\n\n\n3\n002244\n滨江集团\n9900004730\n滨江集团：2008年年度报告\n2009-03-20\nhttp://static.cninfo.com.cn/finalpage/2009-03-...\n江干科技经济园区地块开发协议书》（江科园协字【2006】035 号），约定就“S08、09、...\n\n\n4\n000301\n东方盛虹\ngssz0000301\n东方市场：2008年年度报告\n2009-03-24\nhttp://static.cninfo.com.cn/finalpage/2009-03-...\n公司将采取措施进一步完善产业链，继续减少关联交易。\n\n\n\n\n\n\n\n\nraw_data.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 11050 entries, 0 to 11049\nData columns (total 7 columns):\n #   Column               Non-Null Count  Dtype \n---  ------               --------------  ----- \n 0   secCode              11050 non-null  object\n 1   secName              11050 non-null  object\n 2   orgId                11050 non-null  object\n 3   announcementTitle    11050 non-null  object\n 4   announcementTime     11050 non-null  object\n 5   adjunctUrl           11050 non-null  object\n 6   announcementContent  11050 non-null  object\ndtypes: object(7)\nmemory usage: 604.4+ KB\n\n\n\n# 剔除 announcement_content 中不含 “区块链” 关键词的样本\ndef filter_content(c):\n    if c.find('区块链') == -1:\n        return False\n    return True\n\n\nraw_data.loc[:,'announcementContent'].apply(lambda c:filter_content(c))\n\n0        False\n1        False\n2        False\n3        False\n4        False\n         ...  \n11045    False\n11046    False\n11047    False\n11048    False\n11049     True\nName: announcementContent, Length: 11050, dtype: bool\n\n\n\ndata1 = raw_data.loc[raw_data.loc[:,'announcementContent'].apply(lambda c:filter_content(c)), :]\n\n\nlen(data1)\n\n7196\n\n\n\n# 剔除 ST 类公司\ndef filter_ST(t):\n    if t.find('ST') == -1:\n        return True\n    return False\n\n\ndata2 = data1.loc[data1.loc[:,'secName'].apply(lambda t: filter_ST(t)), :]\n\n\nlen(data2)\n\n6937\n\n\n\n# 剔除年度、季度公告、发债类公告、招股说明书、发行股票募集说明书、非公开发行普通股、非公开发行优先股、发行保荐书、社会责任公告\ndef filter_title(t):\n    if any([t.find('年度')!=-1, t.find('季度')!=-1, t.find('债券')!=-1, t.find('公开发行股票')!=-1, t.find('发行股票募集')!=-1,\n            t.find('非公开发行')!=-1, t.find('发行保荐书')!=-1, t.find('社会责任')!=-1, t.find('发行')!=-1]):\n        return False\n    return True\n\n\ndata3 = data2.loc[data2.loc[:,'announcementTitle'].apply(lambda t:filter_title(t)), :]\n\n\nlen(data3)\n\n1348\n\n\n\n# 筛选首份公告\nfinal = data3.drop_duplicates(subset=['secCode'], keep='first')\n\n\nlen(final)\n\n394\n\n\n\nfinal.head()\n\n\n\n\n\n\n\n\nsecCode\nsecName\norgId\nannouncementTitle\nannouncementTime\nadjunctUrl\nannouncementContent\n\n\n\n\n1150\n002152\n广电运通\n9900003423\n广电运通：2016年4月1日投资者关系活动记录表\n2016-04-06\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n9、公司提过有储备区块链技术，是否可以介绍？\n\n\n1174\n002177\n御银股份\n9900003781\n御银股份：2016年4月21日投资者关系活动记录表\n2016-04-21\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n4、公司在区块链技术上未来有什么规划？\n\n\n1196\n300386\n飞天诚信\n9900023058\n飞天诚信：2016年4月22日投资者关系活动记录表\n2016-04-25\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n公司在区块链部分如何布局?\n\n\n1255\n000997\n新 大 陆\ngssz0000997\n新 大 陆：董事会关于本次募集资金使用的可行性分析\n2016-06-03\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n支付行业技术创新和业务创新不断涌现，包括 NFC、条码（二维码）支付、可信服务平台（TSM）...\n\n\n1266\n300423\n鲁亿通\n9900028812\n鲁亿通：关于本次交易前12个月内购买、出售资产的说明\n2016-06-09\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n同时，上市公司拟采用定价发行的方式向纪法清、孔剑平、孙奇锋、王麒诚和中信建投-数贝泽华人工智...\n\n\n\n\n\n\n\n\nfinal.to_csv('./data/tidyed_data.csv', index=False, encoding='utf_8_sig')"
  },
  {
    "objectID": "posts/2023-01-05-在循环中使用else语句/index.html",
    "href": "posts/2023-01-05-在循环中使用else语句/index.html",
    "title": "在循环中使用else语句",
    "section": "",
    "text": "for/else 和 while/else 中的 else 语句后的内容，在循环正常结束时，才会执行。换一句话说，当 for 循环或者 While 循环遇到 break 跳出循环时，else 语句后的内容则不执行。这个特性可以让某些行为变得更优雅，比如搜索过程。一般我们可能会利用一个标识变量（flag varable），当条件满足时，改变标识变量的值，然后跳出循环。比如下面这个例子，判断 John 是不是我们的顾客： \n\ncustomers = ['Tom', 'Mike', 'Jeff', 'Tony']\nis_John = False\nfor c in customers:\n    if 'John' in customers:\n        is_John = True\n        break\n    \nif is_John:\n    print('John is our customer.')\nelse:\n    print('John is not our customer.')\n\nJohn is not our customer.\n\n\n利用 else 语句，则不需要设置标识变量，当循环正常结束时，则表明 John 不是我们的顾客。\n\ncustomers = ['Tom', 'Mike', 'Jeff', 'Tony']\nfor c in customers:\n    if 'John' in customers:\n        print('John is our customer.')\n        break\nelse:\n    print('John is not our customer.')\n\nJohn is not our customer.\n\n\n利用 else 语句也可以执行一些必要内容。比如使用 selenium 爬虫结束后，我们需要 driver.close() 和 driver.quit() 释放内存资源。那么在循环解析页面时，我们也可以把这两个语句放到 else 后面。\n\n# pseudocode\nfor url in url_list:\n    driver.get(url)\nelse:\n    driver.close()\n    driver.quit()"
  },
  {
    "objectID": "posts/2023-11-09-Pygraphviz安装记录/index.html",
    "href": "posts/2023-11-09-Pygraphviz安装记录/index.html",
    "title": "Pygraphviz安装记录",
    "section": "",
    "text": "这是一次失败的安装记录。起因是我想试一下 pybaobabdt，而 pybaobabdt 需要安装 Pygraphviz。网上大部分资料都是使用 Christoph Gohlke 提供的 whl 文件进行本地安装，而我的 Python 版本是 3.11，没有相应的 whl 文件，于是我打算参考官方文档使用 pip 进行安装。此刻，我还不知道这个决定意味着什么:)\n\n在软件开发中，“wheel” 是一个特定的 Python 包发布格式，通常用于 Python 包的分发和安装。Wheel 文件通常包含了已经编译好的二进制代码，以及与特定操作系统和 Python 版本兼容的相关文件，以便更快地安装 Python 包，而无需进行编译。\nWheel 文件的主要优势在于它们可以节省时间，因为它们不需要在安装时进行编译，而是直接使用预编译的二进制代码，因此安装速度更快。这对于大型项目和依赖复杂的 Python 包非常有用，因为它们通常需要较长时间来编译。 Wheel 文件通常以 “.whl” 扩展名结尾，例如 “mypackage-1.0-py3-none-any.whl”，其中 “mypackage” 是包的名称，“1.0” 是版本号，“py3” 表示兼容的 Python 版本，“none” 表示与操作系统无关，“any” 表示适用于任何操作系统。\nPython 的包管理工具 pip 支持从 wheel 文件安装 Python 包，因此开发者可以更轻松地将其包分发给其他用户，并确保兼容性和安装速度。通常，当你使用 pip 安装 Python 包时，它会首先尝试使用 wheel 文件，如果可用的话，以提高安装效率。如果没有可用的 wheel 文件，pip 将使用源代码进行安装，需要编译并构建包。 —— ChatGPT\n\n根据官方文档，在 windows 系统上安装 Pygraphviz，首先需要手动下载安装 Graphviz，并将 Graphviz 添加到环境变量。\n\nGraphviz是一个开源的图形可视化工具，用于绘制各种类型的图形，如有向图、无向图和树。它提供了一种简单的描述图形的语言（通常是DOT语言），通过这种语言，你可以指定图形的节点、边和布局等属性。Graphviz会将这些描述转换为可视化图形。它支持多种输出格式，包括PNG、PDF、SVG等。Graphviz是一个独立的工具，不直接与Python关联。\n\n其次，需要下载安装 Visual C/C++。然后使用 pip 进行安装：\npython -m pip install --use-pep517 `\n              --config-setting=\"--global-option=build_ext\" `\n              --config-setting=\"--global-option=\"-IC:\\ProgramFiles\\Graphviz\\include\" `\n              --config-setting=\"--global-option=\"-LC:\\ProgramFiles\\Graphviz\\lib\" `\n              pygraphviz\n然后收获如下报错：\npygraphviz/graphviz_wrap.c(3020): fatal error C1083: 无法打开包括文件: “graphviz/cgraph.h”: No such file or directory\n在 C:\\Program Files\\Graphviz\\include\\graphviz\\ 下确实可以找到 cgraph.h 这个文件。这个报错查阅了很多资料，都无法解决，几个小时过去了，在 Medium 上看到了一篇文章 Trying to install pygraphviz on windows is a real pain，真是说出了我的心声:(\n最后无奈选择了在 WSL2 上安装。在 WSL2 Ubuntu18.04 上安装就简单多了，虽然也出现了报错：\nERROR: Could not build wheels for pygraphviz, which is required to install pyproject.toml-based projects\n根据一篇教程也很容易就解决了:)\n\n参考资料\n\nhttps://pygraphviz.github.io/documentation/stable/install.html\nhttps://www.lfd.uci.edu/~gohlke/pythonlibs/\nhttps://github.com/pygraphviz/pygraphviz/issues/155\nhttps://medium.com/@notokesporketokas/trying-to-install-pygraphviz-on-windows-is-a-real-pain-82502752365b\nhttps://bobbyhadz.com/blog/python-could-not-build-wheels-for-which-use-pep-517"
  },
  {
    "objectID": "posts/2023-04-05-手把手教你做事件研究-爬取巨潮资讯公告PDF文件/index.html",
    "href": "posts/2023-04-05-手把手教你做事件研究-爬取巨潮资讯公告PDF文件/index.html",
    "title": "手把手教你做事件研究-爬取巨潮资讯公告PDF文件",
    "section": "",
    "text": "这篇博客（视频）记录从巨潮资讯爬取相关公告的 PDF 文件。 \n\nimport logging\nimport os\nimport time\nimport requests\nimport pandas as pd\nfrom concurrent.futures import ThreadPoolExecutor\n\n\ndata = pd.read_csv('./data/final.csv', dtype={'secCode':str})\n\n\ndata.head()\n\n\n\n\n\n\n\n\nsecCode\nsecName\norgId\nannouncementTitle\nannouncementTime\nadjunctUrl\nannouncementContent\n\n\n\n\n0\n002152\n广电运通\n9900003423\n广电运通：2016年4月1日投资者关系活动记录表\n2016-04-06\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n9、公司提过有储备区块链技术，是否可以介绍？\n\n\n1\n002177\n御银股份\n9900003781\n御银股份：2016年4月21日投资者关系活动记录表\n2016-04-21\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n4、公司在区块链技术上未来有什么规划？\n\n\n2\n300386\n飞天诚信\n9900023058\n飞天诚信：2016年4月22日投资者关系活动记录表\n2016-04-25\nhttp://static.cninfo.com.cn/finalpage/2016-04-...\n公司在区块链部分如何布局?\n\n\n3\n300423\n鲁亿通\n9900028812\n鲁亿通：关于本次交易前12个月内购买、出售资产的说明\n2016-06-09\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n同时，上市公司拟采用定价发行的方式向纪法清、孔剑平、孙奇锋、王麒诚和中信建投-数贝泽华人工智...\n\n\n4\n000961\n中南建设\ngssz0000961\n中南建设：关于本公司投资上海承泰信息科技股份有限公司的进展公告\n2016-06-23\nhttp://static.cninfo.com.cn/finalpage/2016-06-...\n，以区块链技术处理玛娜花园不同版本的个人数据，形成对数据信息的安全保护。\n\n\n\n\n\n\n\n\ndata.iloc[4,5]\n\n'http://static.cninfo.com.cn/finalpage/2016-06-23/1202387515.PDF'\n\n\n\ndef get_announcement(s, url, secName):\n    try:\n        r = s.get(url)\n        filename = str(secName) + \".pdf\" \n         # 注意要用'wb', b表示二进制，不要用'w'\n        with open(filename, 'wb') as f: \n             # r.content -&gt; requests中的二进制响应内容：以字节的方式访问请求响应体\n            f.write(r.content)                                 \n    except Exception as e:\n        logging.warning(secName, e)\n        time.sleep(random.random()*5)\n\n\nos.chdir(\"announcements\")\nurl = data.loc[:, \"adjunctUrl\"]\nsecName = data.loc[:, \"secName\"]\n\nwith ThreadPoolExecutor(max_workers=8) as pool:\n    with requests.Session() as s:\n        futures = [pool.submit(get_announcement, s, url, secName) for url,secName in zip(url, secName)]"
  },
  {
    "objectID": "posts/2023-01-28-手把手教你做事件研究-导论/index.html",
    "href": "posts/2023-01-28-手把手教你做事件研究-导论/index.html",
    "title": "手把手教你做事件研究-导论",
    "section": "",
    "text": "这个系列博客（视频）以区块链技术投资公告效应分析为例，从巨潮资讯公告数据采集开始，一直到累计异常收益率的显著性检验，保姆级，手把手教你用 Python 实现事件研究法。\n\n1 事件研究法的基本原理\n事件研究法集中于探讨经济事件的发生（如合并、收购、收益公告或再融资行为等）对于公司股票价格带来的影响，影响可体现于以下几个方面：平均股价效应、市场收益方差的变化（反映股价波动性的变化）、股票成交量的变化、经营（会计）绩效的变化等。比如，上市公司发布新兴技术投资公告，我们可以把这样一个行为定义为一个事件，公告发布日期定义为事件日，公告之后的一段时间，比如一周，定义为事件窗口。那么我们需要探究，发布新兴技术投资公告这样一个事件，在这个事件窗口内，对于样本公司的股票价格有什么样影响，这种影响是不是显著的。我们可以大胆猜一下，显著的正向影响。毕竟概念炒作和蹭热度是 A 股的传统。像区块链，元宇宙这样的概念火了，就有大量公司发布相关的公告，韭菜会竞相涌入。从另一个方面，大量文献和报道也证实，新兴技术投资会给企业带来各种好处，从节省成本到运营效率提升，再到获取竞争优势，最后到提升企业绩效。因此，资本市场可能会从企业财务绩效提升角度给予新兴技术投资更加积极的反应。在公告发布之后，大量的投资者可能会买进该公司的股票，从而拉升股票价格。\n我们从事件研究的角度，需要分析是否是由发布新兴技术投资公告这样一个事件导致了样本公司股价上升，并检验这种上升到底是正常的波动，还是显著为正。\n事件研究法的基本假设如下：\n\n🥇有效市场假说：股票价格反映所有已知公共信息，理性的投资者对于新信息的反映也是理性的；\n🥈事件非预期：所研究事件是市场未预期到的，因此异常收益可以度量股价对事件发生或信息披露异常反应的程度；\n🥉无混和效应：所研究的事件窗口期无其他事件的混合效应。\n\n有关事件研究法的基本假设，我们需要关注第三个，在我们所研究的事件窗口期没有其他事件的混合效应。这就对我们的数据准备工作提出了要求，我们需要剔除在事件窗口期内有其他经济事件发生的样本，不然你很难说明最后的结果是由哪一个事件导致的。从另一个角度，这也对事件窗口的长度做了一定程度上的限制。因为所要研究的事件窗口越长，比如一个月，两个月，甚至一年，那么事件窗口包含其他经济事件的可能性也越大。\n\n\n事件研究法的基本概念\n\n😺事件日：就是我们所研究的事件所发生的日期，比如在公告效应的研究中，一般将公告日定义为事件日；\n😸事件窗口期：是我们感兴趣的研究区间，我们在事件窗口期内检验股价对于经济事件是否有异常反应；\n👽估计窗口：是我们估计正常收益率模型的时间窗口，有很多成熟的模型供我们使用，比如市场模型，三因子模型，有关估计模型的详细介绍，大家可以查阅相关文献。这里需要关注的一点是估计窗口的长度设置，一般的惯例是窗口长度应大于等于 120 天。估计窗口不必设置过长，一旦设置过长可能会存在部分样本在估计窗口内数据缺失的情况，需要我们剔除该样本，从而导致样本量减少；\n👼正常收益率：是所研究的事件不发生，样本股票的理论收益率，由我们的正常收益率模型估计得出；\n🍎异常收益率：样本股票的实际收益率与正常收益率的差值，反应我们研究事件的经济影响。\n\n\n\n事件研究法的基本步骤\n在后续的博文中，我们将以区块链技术投资公告的公告效应分析为例，使用 Python 来实现事件研究法。下面，我们来总结一下事件研究法的基本步骤，\n首先，我们需要定义事件与事件窗口。以区块链技术投资公告为例，我们以公告发布日为事件日，事件窗口我们根据研究需要灵活选择。\n第二，研究样本选择与数据准备。以区块链技术投资公告为例，我们以 2009 年 1 月 1 日至 2022 年 1月 1 日发布区块链技术投资公告的上市公司为样本。在这个时间区间内，同一家公司可能多次发布了有关区块链技术投资的公告，在公告效应的分析中，我们一般考虑首份公告。关于数据准备，这里我从一篇文献中摘了一段话：\n\n第二步，对由网络爬虫获取的数据进行清洗，剔除港股和基金公司公告; 剔除并非数字技术投资事件相关公告，如公司名称中含有数字技术关键词而入选的公告; 剔除 ST 类公司; 剔除事件窗口期不足 10 天或估计窗口期不足 120 天的公司; 剔除业绩预告、分红、收购并购、重组以及其他突发事件公告日落在事件窗口期之内样本公司，最终获取的有效样本为 219 家上市公司。\n\n在后续的代码实践中，我们会根据这段话来做数据整理。这里需要关注最后一句，剔除业绩预告、分红、收购并购、重组以及其他突发事件公告日落在事件窗口期之内的样本公司，这是为了满足假设三，在事件研究窗口内没有其他事件的混合效应。在后续的博文中，我会向大家展示，如何使用巨潮资讯的 api 来完成这步操作，以避免繁琐的人工整理。\n第三，是估计正常收益率与计算异常收益率。\n最后，是累计异常收益率的计算与显著性检验。\n\n\n参考资料\n\n袁显平,柯大钢.事件研究方法及其在金融经济研究中的应用[J].统计研究,2006(10):31-35.DOI:10.19343/j.cnki.11-1302/c.2006.10.007.\n孙洁,李峰,张兴刚.数字技术投资公告对企业市场价值的影响——基于事件研究视角[J].经济与管理研究,2020,41(11):130-144.DOI:10.13502/j.cnki.issn1000-7636.2020.11.008.\n连享会.Stata:短期事件研究法教程(Event Study)"
  },
  {
    "objectID": "posts/2024-08-14-熵值法的原理及Python实现/index.html",
    "href": "posts/2024-08-14-熵值法的原理及Python实现/index.html",
    "title": "熵值法的原理及Python实现",
    "section": "",
    "text": "在实证分析中，对于一个内涵较为丰富的变量，我们往往会构建一个综合评价指标体系进行测度。比如今年大火的新质生产力，很多学者从新质劳动者、新质劳动对象和新质劳动资料出发建立一级指标，又在一级指标体系下再分别建立二级乃至三级指标，形成多维综合评价指标体系。这种评价指标体系的构建方式带来了一个问题，如何确定各指标体系之间的权重呢？有一种解决办法叫做专家打分，也就是由多位专家进行赋权，然后再取专家赋权的均值。这种方式有它的优点，但人的主观性不可避免的会影响评价结果。有没有什么方法可以避免人的主观性呢？这个答案就是熵值法。要理解熵值法，我们首先要理解信息量和信息熵。\n\n信息量和信息熵\n信息量可以简单理解为一个事件发生带来的信息含量。信息量与事件发生的概率成反比，这意味越平常的事件发生带来的信息量越低，而不寻常的事件发生带来的信息量越高。比如我告诉你，明天太阳从东边升起，你会觉得我在说废话，即话里没有信息量。如果我告诉你一件你不知道的八卦，你会觉得我说的内容信息量爆炸，而八卦也就是生活中不常见的事儿。在信息论中，对于一个事件 𝑋=𝑥_𝑖，它的信息量 I(x_i) 定义为：\n\nI(x_i) = -log_{2}p(x_i)\n\n其中，p(x_i) 是事件 x_i 发生的概率。\n信息熵（Entropy）随机事件信息量的期望。对于一个随机事件 X，其信息熵 H(X) 定义为：\n\nH(X) = -\\sum_{i=1}^{n}p(x_i)log_{2}p(x_i)\n\n我们可以发现，当X 是确定性的时候，信息熵 H(x) 取最小值 0。当 X 服从均匀分布的时候，信息熵 H(X) 取最大值 log_{2}n。在这种情况下，随机变量 X 等可能取到每一个值，系统完全不可预测。因此，信息熵可以测度系统的不确定性，系统的不确定性越大，信息熵越大，反之信息熵越小。\n\n\n熵值法\n对于一个指标而言，如果它的取值离散程度非常小，代表各个样本之间的差异很小，那么该指标对于整体评价体系而言相对影响较小。极端一点，如果一个指标各样本取值相同，比如考虑性别这个指标，所有的样本均为男性，那我们就没有必要将这个指标纳入评价体系了。因此，指标的离散程度，或者说指标在不同样本之间的差异性在一定程度上反映了指标对于评价体系的重要性。而信息熵可以很好的度量指标在不同样本之间的差异性。当一个指标的熵值较高时，意味着该指标的各个样本之间的数值分布较为均匀，即各个样本在该指标上相似。这种情况下，该指标对于区分不同样本的能力较弱，因此我们认为它提供的有用信息量较少。当一个指标的熵值较低时，意味着该指标的各个样本之间的差异较大，数值分布不均匀。这表明该指标对不同样本有较好的区分能力，能够提供更多的有用信息量，因此在综合评价中应当给予更大的权重。因此，我们可以通过计算各指标的信息熵来进行赋权，而这不涉及人的主观判断。\n考虑 m 个待评价的样本和 n 项指标，形成原始指标数据矩阵：\n\nX =\n\\left(\n\\begin{matrix}\nX_{11} & X_{12} & \\cdots & X_{1n} \\\\\nX_{21} & X_{22} & \\cdots & X_{2n} \\\\\n\\vdots & \\vdots & \\vdots & \\vdots \\\\\nX_{m1} & X_{m2} & \\cdots & X_{mn} \\\\\n\\end{matrix}\n\\right)\n\n其中，X_{ij} 代表第 i 个样本第 j 项指标的评价数值。使用熵值法对原始指标数据矩阵进行测度，基本步骤如下：\n\n数据预处理\n\n为消除各原始指标值数量和量纲差异带来的影响，在对指标进行赋权操作前,需要先对原始指标数据进行预处理。文献中多采用极差标准化处理（朱喜安、魏国栋，2015）。对于正向指标，即在评价时该指标越大越好：\n\nx_{ij} = \\frac{X_{ij} - min(X_j)}{max(X_j) - min(X_j)}\n\n对于负向指标，即在评价时该指标越小越好：\n\nx_{ij} = \\frac{max(X_j) - X_{ij}}{max(X_j) - min(X_j)}\n\n\n计算信息熵\n\n计算第 j 个评价指标的信息熵，首先需要计算每个样本标志值的比重 \\omega_{ij}：\n\n\\omega_{ij} = \\frac{x_{ij}}{\\sum_{i=1}^{m}x_{ij}}\n\n注意，这里的比重 \\omega_{ij} 不是严格意义上的概率，但它在形式上与概率分布相似，可以被视为该样本在指标 j 下的重要性“概率”。然后，计算指标 j 的信息熵 e_j：\n\ne_j = -\\frac{1}{logm}\\sum_{i=1}^{m}\\omega_{ij}log\\omega_{ij}\n\n这里除以 logm 是为了对熵值进行归一化处理，确保熵值的范围在 [0, 1] 之间。\n\n计算差异性系数\n\n什么是差异性系数，为什么有了信息熵还要计算差异性系数，要回答这两个问题我们要再回顾一下信息量和信息熵的概念。在信息论中，信息熵是随机变量所提供的平均信息量的度量。熵值较高表示该随机变量具有较大的不确定性，即在不同可能结果之间的选择越多，因此平均而言，观察该变量时获得的信息量就越大。但需要注意的是，在熵值法中，“信息量”有一个特定的解读，它并不仅仅指信息论中的“平均信息量”，而是更多地指这个指标在样本之间的“差异性”或“区分能力”。差异性系数的引入，是为了将信息熵的这个意义逆转过来：信息熵较低时，差异性系数较高，说明这个指标的区分能力较强，对系统的不确定性有更大的减少作用，提供的信息量更“有用”。因此在熵值法中，差异性系数更直接地反映了一个指标的重要性。\n\ng_j = 1 - e_j\n\n\n计算指标权重\n\n\n\\lambda_j = \\frac{g_j}{\\sum_{j=1}^{n}g_j}\n\n\n计算综合得分\n\n\nS_i = \\sum_{j=1}^{n}\\lambda_j x_{ij},i=1,2,\\cdots,m\n\n\n\nPython代码实现\n\nimport numpy as np\nimport pandas as pd\nfrom typing import Tuple\n\ndef standardize(data: pd.DataFrame, flags: list, offset=0.0001) -&gt; pd.DataFrame:\n    \"\"\"对数据进行标准化\n\n    Args:\n        data (pd.DataFrame): 待标准化数据\n        flags (list): 指标正向或者反向标识，例如[\"+\", \"-\", \"+\"]\n        offset (float): 偏移量，默认为 0.0001\n\n    Returns:\n        pd.DataFrame: 标准化后的数据\n    \"\"\"    \n    standardized_list = []\n    for i, flag in enumerate(flags):\n        if flag == \"+\":\n            standardized_feature = (\n                (data.iloc[:, i] - data.iloc[:, i].min())\n                / (data.iloc[:, i].max() - data.iloc[:, i].min())\n            ) + offset\n            standardized_list.append(standardized_feature)\n        else:\n            standardized_feature = (\n                (data.iloc[:, i].max() - data.iloc[:, i])\n                / (data.iloc[:, i].max() - data.iloc[:, i].min())\n            ) + offset\n            standardized_list.append(standardized_feature)\n    standardized_df = pd.concat(standardized_list, axis=1)\n\n    return standardized_df\n\ndef entropy_weight(data: pd.DataFrame, flags: list, offset=0.0001) -&gt; Tuple[list, pd.DataFrame]:\n    \"\"\"对于给定的输入数据，计算熵权法综合得分，以及对应的权重\n\n    Args:\n        data (pd.DataFrame): 输入原始数据\n        flags (list): 指标正向或者反向标识，例如[\"+\", \"-\", \"+\"]\n        offset (float): 偏移量，默认为 0.0001\n\n    Returns:\n        Tuple[list, pd.DataFrame]: 权重；处理后的数据\n    \"\"\"    \n    standardized_df = standardize(data, flags, offset)\n    p = standardized_df / standardized_df.sum().values\n    g_list = []\n    for feature in p.columns:\n        entropy = sum(p.loc[:, feature] * np.log2(p.loc[:, feature])) * (\n            -1 / np.log2(p.shape[0])\n        )\n        g = 1 - entropy\n        print(f\"{feature}熵值为：{entropy}；差异性系数为{g}\")\n        g_list.append(g)\n    weight = g_list / sum(g_list)\n    score = np.dot(standardized_df.values, np.array(weight)).round(4)\n    score_df = pd.DataFrame(score, index=data.index, columns=[\"综合得分\"])\n\n    return weight, score_df\n\n\nimport matplotlib.pyplot as plt\nfrom numpy.random import default_rng\n\nrng = default_rng(12345)\n\n\n# 测试样本\ndf = pd.DataFrame({\n    \"新质劳动力\": rng.uniform(0, 1, 100),\n    \"新质劳动对象\": rng.binomial(1, 0.5, 100),\n    })\n\n\ndf\n\n\n\n\n\n\n\n\n新质劳动力\n新质劳动对象\n\n\n\n\n0\n0.958712\n0\n\n\n1\n0.083186\n1\n\n\n2\n0.184418\n0\n\n\n3\n0.370891\n1\n\n\n4\n0.914208\n1\n\n\n...\n...\n...\n\n\n95\n0.614658\n1\n\n\n96\n0.621998\n0\n\n\n97\n0.453705\n0\n\n\n98\n0.379921\n0\n\n\n99\n0.435844\n1\n\n\n\n\n100 rows × 2 columns\n\n\n\n\nfig, axs = plt.subplots(1, 1, figsize=(12,6), dpi=200)\ndf.plot(ax=axs, linestyle=\"none\", marker=\".\")\n\n\n\n\n\n\n\n\n\nweight, score_df = entropy_weight(df, [\"+\", \"+\"])\n\n新质劳动力熵值为：0.955955464314207；差异性系数为0.04404453568579303\n新质劳动对象熵值为：0.8408607632351521；差异性系数为0.15913923676484787\n\n\n\nscore_df\n\n\n\n\n\n\n\n\n综合得分\n\n\n\n\n0\n0.2103\n\n\n1\n0.8005\n\n\n2\n0.0396\n\n\n3\n0.8639\n\n\n4\n0.9837\n\n\n...\n...\n\n\n95\n0.9177\n\n\n96\n0.1361\n\n\n97\n0.0990\n\n\n98\n0.0827\n\n\n99\n0.8783\n\n\n\n\n100 rows × 1 columns\n\n\n\n\n\n参考资料\n\n朱喜安,魏国栋.熵值法中无量纲化方法优良标准的探讨[J].统计与决策,2015,(02):12-15."
  },
  {
    "objectID": "posts/2021-01-08-从0到1的爬虫教程/index.html",
    "href": "posts/2021-01-08-从0到1的爬虫教程/index.html",
    "title": "从0到1的爬虫教程",
    "section": "",
    "text": "这篇文章既是面向像我这种经管类非科班同学的爬虫教程，也是我自己对于爬虫学习的一个总结。"
  },
  {
    "objectID": "posts/2021-01-08-从0到1的爬虫教程/index.html#在浏览器的地址栏中输入-url-并回车之后发生了什么",
    "href": "posts/2021-01-08-从0到1的爬虫教程/index.html#在浏览器的地址栏中输入-url-并回车之后发生了什么",
    "title": "从0到1的爬虫教程",
    "section": "1.1 在浏览器的地址栏中输入 URL 并回车之后发生了什么？",
    "text": "1.1 在浏览器的地址栏中输入 URL 并回车之后发生了什么？\nURL（Uniform Resource Locator，统一资源定位符）一般称为网页地址，即网络上某个资源的地址，比如 ”http://archive.ics.uci.edu/ml/index.php“，这是 UCI 机器学习数据集的网页地址。在浏览器的地址栏中输入这个地址并回车，我们会见到如下页面：\n\n\n\nfigure-1\n\n\n此时，我们获取了服务器端发送过来的数据。我们可以看一看这些数据，鼠标右键选择检查，进入开发者工具，点击 index.php，我们可以看到，这个数据是一个 document 类型的文件。点击 Preview，我们可以看到这个文件就是页面所展示的内容。\n\n\n\nfigure-2\n\n\n简单来说，浏览器就是这样一个程序，帮我们向服务器端发送请求，获取响应，然后将响应内容进行解析和渲染，最终呈现给我们的就是如上图所示的页面。你可以将浏览器理解为一个邮差，他帮我们送信，同时也送回回信。\n以上只是一个简化的表达，那么具体来说浏览器做了哪些工作呢？\n\nURL 解析：当我们在地址栏中输入一个 URL 并回车，浏览器首先判断我们输入的是一个合法的 URL 还是一个待搜索的关键词。如果是搜索内容，浏览器会使用默认的搜索引擎，合成带有搜索内容的 URL；如果是请求的 URL，则根据规则判断 URL 是否完整，不完整则根据规则合成完整的 URL\nDNS 查询：其次，浏览器会根据 URL 地址查找对应的 IP 地址。前面提到过，URL 地址是网络上资源存在的地址，对于我们人类来说比较好记忆，但是对于计算机来说并不好处理，计算机更擅长处理数字，因此便有了 IP 地址。IP（Internet Protocol）地址指明了发送方的地址，是网络上的一个虚拟地址。有了地址，浏览器便可以发送请求。\nTCP 连接：客户端与服务器要相互通信，双方就要基于相同的方法和规则，我们将这种规则称为协议。比如两个人要打电话通信，我们规定都使用中文作为沟通语言，这就是一种协议。浏览器在于服务器进行通信时，为了确保数据可以准确的进行传送，采用了 TCP 协议。TCP 协议要求客户端在与服务器通信之前需要先建立 TCP 连接，你可以理解为两个人要通信前需要先连一条电话线。关于这部分内容，大家可以参考《图解 HTTP》。\n发出请求：通过前面的步骤，我们已经得到服务器的地址，同时建立了 TCP 连接，下面浏览器就会开始构造 HTTP 报文，发送 HTTP 请求。其中，报文包括：\n\n请求报头（Request Header）：请求方法、目标地址、遵循的协议等等\n请求主体\n\n接受响应：服务器接收到浏览器发出的请求，会返回相应的响应资源。浏览器接收到响应资源后，会对资源进行分析。首先查看 Response Header，根据不同的状态码做不同的事。如果响应资源进行了压缩（比如 gzip），还需要进行解压。然后，对响应资源做缓存。接下来，根据响应资源里的 MIME（Multipurpose Internet Mail Extensions，媒体类型）类型去解析响应内容。\n渲染页面：浏览器自动发送请求获取嵌入在 HTML 中的资源（图片、音频、视频、CSS、JS 等等）\n\n参考资料\n\n《图解 HTTP》\nhttps://juejin.cn/post/6844903922084085773\nhttps://zhuanlan.zhihu.com/p/133906695\nhttps://juejin.cn/post/6975307495808237604"
  },
  {
    "objectID": "posts/2021-01-08-从0到1的爬虫教程/index.html#http-协议",
    "href": "posts/2021-01-08-从0到1的爬虫教程/index.html#http-协议",
    "title": "从0到1的爬虫教程",
    "section": "1.2 HTTP 协议",
    "text": "1.2 HTTP 协议\nhttp 与 https 区别\nHTTPS 比 HTTP 更安全，但是性能更低。HTTP，超文本传输协议，默认端口是80。超文本：指不仅限于文本，还包括图片、音频、视频等文件。传输协议：使用共同约定的固定格式来传递转换成字符串的超文本内容。\nHTTPS：HTTP + SSL（安全套接字层），即带有安全套接字层的超文本传输协议，默认端口号443。SSL 对传输的内容进行加密\n请求头\n\nContent-Type\nHost（主机和端口号）\nConnection（链接类型）\nUpgrade-Insecure-Requests（升级为 HTTPS 请求）\nUser-Agent（用户代理：提供系统信息与浏览器信息）\nReferer（页面跳转处，防盗链）\nCookie（状态保持）\nAuthorization（用于表示 HTTP 协议中需要认证资源的认证信息）\n\n响应头\n\nSet-Cookie\n\n常见的响应状态码\n\n200：成功\n302：跳转，新的 URL 在响应的 Location 头中给出\n303：浏览器对于 POST 的响应重定向至新的 URL\n307：浏览器对于 GET 的响应重定向至新的 URL\n403：资源不可用；服务器理解客户的请求，但拒绝处理它（没有权限）\n404：找不到该页面\n500：服务器内部错误\n503：服务器由于维护或者负载过重未能应答，在响应中可能会携带 Retry-After 响应头；有可能是因为爬虫频繁地访问，使服务器忽视爬虫请求，最终返回 503 响应状态码\n\n一切的状态码都不可行，一切都以是否从抓包得到的响应中获取到的数据为准\nNetwork 中抓包得到的源码才是判断依据，Elements 中是浏览器渲染之后的源码，不能作为判断标准"
  },
  {
    "objectID": "posts/2021-01-08-从0到1的爬虫教程/index.html#抓包分析",
    "href": "posts/2021-01-08-从0到1的爬虫教程/index.html#抓包分析",
    "title": "从0到1的爬虫教程",
    "section": "3.1 抓包分析",
    "text": "3.1 抓包分析"
  },
  {
    "objectID": "posts/2019-04-09-Ubuntu1804安装与配置/index.html",
    "href": "posts/2019-04-09-Ubuntu1804安装与配置/index.html",
    "title": "Ubuntu18.04安装与配置",
    "section": "",
    "text": "这篇博客记录了 Ubuntu 18.04 的安装、配置与美化过程。"
  },
  {
    "objectID": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#引导盘",
    "href": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#引导盘",
    "title": "Ubuntu18.04安装与配置",
    "section": "引导盘",
    "text": "引导盘\n\n下载 Ununtu 18.04 的镜像文件，将U盘格式化为 FAT32，然后解压操作系统的镜像文件至U盘根目录，完成刻录。\n下载 Ubuntu 18.04 的镜像文件，使用 Rufus 进行刻录。（使用默认设置即可）"
  },
  {
    "objectID": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#关闭-windows-的快速启动",
    "href": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#关闭-windows-的快速启动",
    "title": "Ubuntu18.04安装与配置",
    "section": "关闭 Windows 的快速启动",
    "text": "关闭 Windows 的快速启动\n进入控制面板 -&gt; 电源选项 -&gt; 选择关闭电源按钮功能 -&gt; 更改当前不可用设置：关闭启用快速启动，保存设置。"
  },
  {
    "objectID": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#安装系统",
    "href": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#安装系统",
    "title": "Ubuntu18.04安装与配置",
    "section": "安装系统",
    "text": "安装系统\n重启计算机，在开机画面出现之前，狂按 f12 进入 bios 启动界面，选择从U盘启动，选择 install Ubuntu。\n一些注意事项：\n\n安装时选择最小安装；\n安装过程中选择使用语言时选择英语，便于在命令行中使用 cd 命令；\n选择区域和城市：Asia/Shanghai。"
  },
  {
    "objectID": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#更换软件源",
    "href": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#更换软件源",
    "title": "Ubuntu18.04安装与配置",
    "section": "更换软件源",
    "text": "更换软件源\nUnuntu 18.04 默认使用的是国外的软件源，因为使得我们在下载和更新软件时速度较慢，这里我们替换为国内的阿里云软件源：\n点击 Software&Updates -&gt; Ununtu Software -&gt; 点击 download from 右边的下拉框，选择 Other -&gt; 在弹出的界面中选择阿里云软件源。"
  },
  {
    "objectID": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#全面更新",
    "href": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#全面更新",
    "title": "Ubuntu18.04安装与配置",
    "section": "全面更新",
    "text": "全面更新\n在进一步操作之前，我们先把已经安装的软件包都升级到最新版，在终端输入：\nsudo apt update\nsudp apt upgrade\n点击 settings -&gt; language -&gt; Manage Installed Language，完成语言列表的更新，然后注销重启。"
  },
  {
    "objectID": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#显卡配置",
    "href": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#显卡配置",
    "title": "Ubuntu18.04安装与配置",
    "section": "显卡配置",
    "text": "显卡配置\n如果电脑带 Nvidia 独立显卡，点击 Software&Updates -&gt; Additional Drivers 里选择对应的 N 卡私有的驱动程序并应用更改。"
  },
  {
    "objectID": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#更换终端类型",
    "href": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#更换终端类型",
    "title": "Ubuntu18.04安装与配置",
    "section": "更换终端类型",
    "text": "更换终端类型\n更换默认终端为fish[https://launchpad.net/~fish-shell/+archive/ubuntu/release-3]。\n在终端输入以下命令：\nsudo apt-add-repository ppa:fish-shell/release-3\nsudo apt-get update\nsudo apt-get install fish"
  },
  {
    "objectID": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#安装-gnome-tweak-tool",
    "href": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#安装-gnome-tweak-tool",
    "title": "Ubuntu18.04安装与配置",
    "section": "安装 Gnome-tweak-tool",
    "text": "安装 Gnome-tweak-tool\nUbuntu 18.04 默认使用的桌面为 gnome3。打开终端执行：\nsudo apt-get install gnome-tweak-tool"
  },
  {
    "objectID": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#user-theme-插件安装",
    "href": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#user-theme-插件安装",
    "title": "Ubuntu18.04安装与配置",
    "section": "User theme 插件安装",
    "text": "User theme 插件安装\n使 shell 主题可以使用桌面主题。"
  },
  {
    "objectID": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#改变桌面主题与图标主题",
    "href": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#改变桌面主题与图标主题",
    "title": "Ubuntu18.04安装与配置",
    "section": "改变桌面主题与图标主题",
    "text": "改变桌面主题与图标主题\n\n桌面主题\n图标主题\n壁纸\n\n进入 Github 下载源文件，解压到目录并进入，右键点击空白处选择在终端中打开，执行安装。待安装完成后在 Gnome-tweak-tool 里选择桌面主题与图标主题。"
  },
  {
    "objectID": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#安装搜狗输入法",
    "href": "posts/2019-04-09-Ubuntu1804安装与配置/index.html#安装搜狗输入法",
    "title": "Ubuntu18.04安装与配置",
    "section": "安装搜狗输入法",
    "text": "安装搜狗输入法\n搜狗输入法依托fcitx输入法框架，因此我们首先安装 fcitx 框架。打开终端执行：\nsudo apt install fcitx -y\n然后进入搜狗输入法官网下载搜狗输入法的 deb 安装包。安装搜狗输入法。\n打开 gnome-tweaks，在开机启动推荐中添加 fcitx。"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "球形汤姆",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n使用Glob模块快速查找文件\n\n\n\n\n\n\n\n\n\n\n\n2024-09-07\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n熵值法的原理及Python实现\n\n\n\n\n\n介绍熵值法背后的原理，利用熵值法测度综合指标的基本步骤以及熵值法的Python实现。\n\n\n\n\n\n2024-08-14\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\nWSL2+OhMyZsh+VSCode开发环境搭建\n\n\n\n\n\n这篇博客记录在 WSL2 中搭建开发环境，包括 Git、Zsh 配置和 Python 版本管理。\n\n\n\n\n\n2024-02-05\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n一键计算CAR\n\n\n\n\n\n一个累计异常收益率的计算脚本，支持三因子模型和市场模型，自动导出描述性统计量，绘制 ACCR 。\n\n\n\n\n\n2024-02-05\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\nPandas备忘录\n\n\n\n\n\n记录数据分析中常用的 Pandas 函数和一些实用技巧。\n\n\n\n\n\n2024-01-16\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\nMatplotlib科研绘图案例集合\n\n\n\n\n\n记录论文写作中常用的 Matplotlib 可视化案例。\n\n\n\n\n\n2024-01-08\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n多变量线性相关性可视化方法\n\n\n\n\n\n记录多变量线性相关性可视化的方法，以及一个可以返回相关系数和显著性检验结果的自定义函数。\n\n\n\n\n\n2023-12-31\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n独立、均值独立与线性不相关\n\n\n\n\n\n独立、均值独立与线性不相关之间的区别和联系。\n\n\n\n\n\n2023-12-29\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\nNumpy中的random模块详解\n\n\n\n\n\n使用Numpy中的random模块生成随机数有何优势，Generator类如何使用，以及常用的概率分布的实现方法。\n\n\n\n\n\n2023-12-23\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto使用笔记\n\n\n\n\n\n记录使用Quarto建立网站的过程，以及使用Quarto的小技巧。\n\n\n\n\n\n2023-11-09\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\nPygraphviz安装记录\n\n\n\n\n\n\n\n\n\n\n\n2023-11-09\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n决策树算法\n\n\n\n\n\n\n\n\n\n\n\n2023-10-17\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n详解Matplotlib中的figure对象\n\n\n\n\n\n\n\n\n\n\n\n2023-10-14\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\nPandas Tips: 使用merge实现关系型合并\n\n\n\n\n\n\n\n\n\n\n\n2023-08-03\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\nPandas Tips: 使用query实现优雅的查询\n\n\n\n\n\n\n\n\n\n\n\n2023-08-01\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n在Pandas中如何实现复杂的筛选和查询\n\n\n\n\n\n\n\n\n\n\n\n2023-04-11\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n手把手教你做事件研究-爬取巨潮资讯公告PDF文件\n\n\n\n\n\n\n\n\n\n\n\n2023-04-05\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n三门问题，直觉究竟去了哪里？\n\n\n\n\n\n\n\n\n\n\n\n2023-03-15\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n手把手教你做事件研究-CAR计算与显著性检验\n\n\n\n\n\n\n\n\n\n\n\n2023-02-02\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n手把手教你做事件研究-数据清洗Part2\n\n\n\n\n\n\n\n\n\n\n\n2023-02-01\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n手把手教你做事件研究-数据清洗Part1\n\n\n\n\n\n\n\n\n\n\n\n2023-01-31\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n手把手教你做事件研究-公告爬取\n\n\n\n\n\n\n\n\n\n\n\n2023-01-30\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n手把手教你做事件研究-导论\n\n\n\n\n\n这个系列博客以区块链技术投资公告效应分析为例，从巨潮资讯公告数据采集开始，一直到累计异常收益率的显著性检验，保姆级，手把手教你用 Python 实现事件研究法。\n\n\n\n\n\n2023-01-28\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n爬虫踩坑-ConnectionResetError(100504)\n\n\n\n\n\n\n\n\n\n\n\n2023-01-27\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n在循环中使用else语句\n\n\n\n\n\n\n\n\n\n\n\n2023-01-15\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n爬取新浪财经ESG评级指数\n\n\n\n\n\n\n\n\n\n\n\n2023-01-13\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\nMatplotlib常用绘图\n\n\n\n\n\n\n\n\n\n\n\n2022-09-15\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\nPlotting with Pandas\n\n\n\n\n\n\n\n\n\n\n\n2022-05-01\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n如何使用 Nikola 搭建个人博客\n\n\n\n\n\n\n\n\n\n\n\n2022-04-29\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\nNumpy Notes: Python data analysis\n\n\n\n\n\n\n\n\n\n\n\n2021-09-20\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\nMatplotlib绘图工作流\n\n\n\n\n\n\n\n\n\n\n\n2021-05-22\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\n从0到1的爬虫教程\n\n\n\n\n\n\n\n\n\n\n\n2021-01-08\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\nGolang学习笔记\n\n\n\n\n\n\n\n\n\n\n\n2020-02-03\n\n\nTom\n\n\n\n\n\n\n\n\n\n\n\n\nUbuntu18.04安装与配置\n\n\n\n\n\n\n\n\n\n\n\n2019-04-19\n\n\nTom\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "欢迎来到球形汤姆",
    "section": "",
    "text": "欢迎来到球形汤姆，这是由Tom维护的个人网站。"
  }
]