{"title":"Matplotlib绘图工作流","markdown":{"yaml":{"title":"Matplotlib绘图工作流","author":"Tom","date":"2021-05-22","toc":true,"toc-expand":true,"number-sections":false,"highlight-style":"atom-one","code-block-bg":true,"categories":["数据可视化"],"image":"parts_of_a_figure.png","code-fold":false,"html-math-method":"katex","jupyter":"python3"},"headingText":"matplotlib 是如何绘图的？","containsRefs":false,"markdown":"\n\n日常工作中经常要用到 matplotlib 来绘图，每次绘图碰到一些细节问题都得谷歌，下次遇到继续谷歌 :) 不知道你是否跟我一样。一方面是自己太懒了，没总结；另一方面，是 matplotlib 实现同一个目标的方式太多了。\n\n比如设置图片标题，可以使用 `plt.title()`，也可以使用 `ax.set_title()`。出现这种情况的原因是 matplotlib 提供了两套接口来实现相同的功能：一套是类 MATLAB 工作风格的接口（方便 MATLAB 党丝滑迁移过来），一套是面向对象风格的接口（面向程序员）。这就造成了很多 matplotlib 初学者两种风格代码混用的情况，比如我 :)\n\n这篇文章的主要内容如下：\n\n- 介绍 matplotlib 绘图的基本原理和标准步骤\n- 对 MATLAB 风格与面向对象风格做一个比较\n- 绘图细节与如何画出精美的图\n- 总结数据分析中常用图表的绘图模板代码\n\n\nmatplotlib 内部封装了三层 API：\n\n- `FigureCanvas`：绘图区域；\n- `Renderer`：可以理解为画笔，控制绘图行为；\n- `Artist`：如何使用 `Renderer` 绘图。\n\n`FigureCanvas` 和 `Renderer` 解决与计算机底层的交互问题，`Artist` 控制点、线、文字、图片等图像要素在绘图区域上展现的细节问题。因此，我们要画出心仪的图像，只需要用好 `Artist` 对象就可以了 —— 做一个优秀的艺术家！\n\n`Artist` 对象有两种类型：\n\n- 基础对象（primitives）：包括点、线、文字、图片等等我们希望呈现的要素；\n- 容器对象（containers）：包括画布、坐标轴、坐标系。\n\n不难理解，容器对象是用来放置基础对象的。我们在数学作图的时候，也是先画一个框，再画一个坐标系，坐标轴标好刻度，再作图。与之类似，使用 matplotlib 绘图的标准步骤是：\n\n- 创建一个 `figure` 实例；\n- 使用 `figure` 实例创建一个或多个 `Axes` 或者 `Subplot` 实例;\n- 使用 `Axes` 实例方法创建 primitives。\n\n下面我们就按照这个逻辑来作图。首先我们使用 `plt.figure` 创建 `figure` 实例，然后使用 `figure.add_axes()` 方法创建坐标系，最后使用 `plot` 方法在坐标系上画图。\n\n> **NOTE:** `figure.add_axes()` 允许我们在画布任意位置创建坐标系，传入 `rect=[left, bottom, width, height]` 参数控制坐标系在画布中位置的百分比。\n\n\n除了添加坐标系，我们还可以使用 `figure.add_subplot` 方法直接添加子图。子图是 `Axes` 的一个子类，我们可以把子图看作画布矩阵中的一个元素，每个元素有自己的坐标系，我们可以在上面画图。比如，在下面的代码中，我们创建两个子图。\n\n\n以上输出可以发现，`figure` 对象包含两个坐标系；ax1 和 ax2 所处的 `figure` 是一样的；ax1 和 ax2 的坐标轴不一样。\n\n除了先生成图，再添加坐标系，我们也可以使用 [`plt.subplots()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplots.html) 方法同时生成图和坐标系。比如，下面我们同时生成横向的两个子图，并让它们共享 Y 轴。\n\n\n# OO-style vs Pyplot-style\n\n在上面的代码中，我们使用了面向对象的风格来使用 matplotlib，即首先显示地创建了图和坐标系实例，再调用它们的方法实现绘图。除此之外，matplotlib 还提供了另一套模仿 MATLAB 的接口，即 Pyplot-style interface。比如下面的代码：\n\n\nPyplot-style 接口是基于状态的接口（state-based interface）。我的理解是每调用一次 `pyplot` 中的命令就会改变一下当前的状态（也就是图像），并将改变之后的状态保存下来，`plt.show()` 展示最终的状态。而 OO-style 是每次新建一个对象，调用该对象的方法从而在画布上创建新的内容。\n\n两者相比，Pyplot-style 接口简洁，方便我们快速的生成各类图像，但是功能不够强大。OO-style 是官方文档推荐我们使用的方式，功能更加强大，我们可以更自由的控制画布中的元素，从而实现图形的定制。因此，在接下来的内容里，我们都使用 OO-style 的方式来绘图。\n\n# 画一张精美的图\n\n要画一张精美的图，就需要对 `Artist` 对象进行定制。首先附上官方文档里的这张图。\n\n![Artist](./parts_of_a_figure.png \"Artist\")\n\n我们可以对各种 `Aritst` 类型对象进行定制，包括：\n\n- 画布\n- 坐标系\n- 坐标轴\n- 点、线\n- 文字\n- 图例\n- annotation\n\n\n## 坐标轴\n\nmatplotlib 的 [`Axes`](https://matplotlib.org/stable/users/explain/axes/axes_intro.html) 是绘图的入口。一旦在图上放置了一个 `Axes`，就可以使用许多方法向`Axes` 添加数据。一个 `Axes` 通常具有一对 `Axis` Artists，它们定义了数据坐标系，并包括添加注释（如 x 轴和 y 轴标签、标题和图例）的方法。\n\n\n也可以使用 `set_xlim` 和 `set_ylim` 方法设置坐标轴的范围，可以使用 `set_xscale` 和 `set_yscale` 设置坐标轴的比例尺度。\n\n\n`Axes` 类还提供了处理坐标轴刻度及其标签的辅助方法。其中最直接的是 `set_xticks` 和 `set_yticks`，它们可以手动设置刻度的位置，以及可选地设置它们的标签。可以使用`minorticks_on` 或 `minorticks_off` 来切换次要刻度。\n\n\n也可以使用 `tick_params` 调整 `Axes` 刻度和刻度标签：\n\n\n## 线\n\nmatplotlib 中的线是一个 [`line2D`](https://matplotlib.org/stable/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D) 对象，它有很多属性，我们可以通过对属性进行修改实现对线的美化和定制。这里，列出一些比较常用的属性：\n\n- `color` 或者 `c`：线的颜色；\n- `alpha`：透明度；\n- `linewidth`：线的宽度；\n- `linestyle` 或者 `ls`；\n  - `-` 或者 `solid`：实线；\n  - `--` 或者 `dashed`：短划线；\n  - `-.` 或者 `dashdot`：点划线；\n  - `:` 或者 `dotted`：点虚线；\n- [`marker`](https://matplotlib.org/stable/api/markers_api.html#module-matplotlib.markers) 或则 `m`：\n  - `.`：点\n  - `o`：圆圈\n  - `^`：上三角形\n  - `+`：加号\n  - `x`：X\n  - `s`：正方形\n  - `*`：五角星\n\n下面，我们在代码中来看一下各种属性的使用：\n\n\n我们也可以使用对应的方法来设置或者修改属性值。`ax.plot()` 方法返回一个 `line2D` 对象列表，我们可以在对应的 `line2D` 对象上调用方法。比如，我们可以使用 `set_linestyle()` 方法修改 `linestyle` 属性，可以使用 `set_marker()` 方法修改 `marker` 属性。\n\n\n## 文字\n\nmatplotlib 中的文字是一个 [`matplotlib.text.Text`](https://matplotlib.org/stable/users/explain/text/text_props.html) 对象，利用相关的属性我们可以控制文字显示的样式，包括文字位置、显示的字体、字体大小、颜色等等。\n\n- `alpha`：透明度\n- `fontfamily`：FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'\n- `fontsize`：float or 'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'\n- `fontweight`：a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'\n- `fontstyle`：'normal', 'italic', 'oblique'\n\n这里放上官方文档的例子：\n\n\n## 图例\n\n[`Axes.legend(*args, **kwargs)`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.legend.html#matplotlib.axes.Axes.legend)\n\n\n## Spines\n\n\n# References\n\n- https://matplotlib.org/matplotblog/posts/pyplot-vs-object-oriented-interface/\n- https://stackoverflow.com/questions/52816131/matplotlib-pyplot-documentation-says-it-is-state-based-interface-to-matplotlib\n- https://matplotlib.org/stable/tutorials/introductory/usage.html#styling-artists\n\n","srcMarkdownNoYaml":"\n\n日常工作中经常要用到 matplotlib 来绘图，每次绘图碰到一些细节问题都得谷歌，下次遇到继续谷歌 :) 不知道你是否跟我一样。一方面是自己太懒了，没总结；另一方面，是 matplotlib 实现同一个目标的方式太多了。\n\n比如设置图片标题，可以使用 `plt.title()`，也可以使用 `ax.set_title()`。出现这种情况的原因是 matplotlib 提供了两套接口来实现相同的功能：一套是类 MATLAB 工作风格的接口（方便 MATLAB 党丝滑迁移过来），一套是面向对象风格的接口（面向程序员）。这就造成了很多 matplotlib 初学者两种风格代码混用的情况，比如我 :)\n\n这篇文章的主要内容如下：\n\n- 介绍 matplotlib 绘图的基本原理和标准步骤\n- 对 MATLAB 风格与面向对象风格做一个比较\n- 绘图细节与如何画出精美的图\n- 总结数据分析中常用图表的绘图模板代码\n\n# matplotlib 是如何绘图的？\n\nmatplotlib 内部封装了三层 API：\n\n- `FigureCanvas`：绘图区域；\n- `Renderer`：可以理解为画笔，控制绘图行为；\n- `Artist`：如何使用 `Renderer` 绘图。\n\n`FigureCanvas` 和 `Renderer` 解决与计算机底层的交互问题，`Artist` 控制点、线、文字、图片等图像要素在绘图区域上展现的细节问题。因此，我们要画出心仪的图像，只需要用好 `Artist` 对象就可以了 —— 做一个优秀的艺术家！\n\n`Artist` 对象有两种类型：\n\n- 基础对象（primitives）：包括点、线、文字、图片等等我们希望呈现的要素；\n- 容器对象（containers）：包括画布、坐标轴、坐标系。\n\n不难理解，容器对象是用来放置基础对象的。我们在数学作图的时候，也是先画一个框，再画一个坐标系，坐标轴标好刻度，再作图。与之类似，使用 matplotlib 绘图的标准步骤是：\n\n- 创建一个 `figure` 实例；\n- 使用 `figure` 实例创建一个或多个 `Axes` 或者 `Subplot` 实例;\n- 使用 `Axes` 实例方法创建 primitives。\n\n下面我们就按照这个逻辑来作图。首先我们使用 `plt.figure` 创建 `figure` 实例，然后使用 `figure.add_axes()` 方法创建坐标系，最后使用 `plot` 方法在坐标系上画图。\n\n> **NOTE:** `figure.add_axes()` 允许我们在画布任意位置创建坐标系，传入 `rect=[left, bottom, width, height]` 参数控制坐标系在画布中位置的百分比。\n\n\n除了添加坐标系，我们还可以使用 `figure.add_subplot` 方法直接添加子图。子图是 `Axes` 的一个子类，我们可以把子图看作画布矩阵中的一个元素，每个元素有自己的坐标系，我们可以在上面画图。比如，在下面的代码中，我们创建两个子图。\n\n\n以上输出可以发现，`figure` 对象包含两个坐标系；ax1 和 ax2 所处的 `figure` 是一样的；ax1 和 ax2 的坐标轴不一样。\n\n除了先生成图，再添加坐标系，我们也可以使用 [`plt.subplots()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplots.html) 方法同时生成图和坐标系。比如，下面我们同时生成横向的两个子图，并让它们共享 Y 轴。\n\n\n# OO-style vs Pyplot-style\n\n在上面的代码中，我们使用了面向对象的风格来使用 matplotlib，即首先显示地创建了图和坐标系实例，再调用它们的方法实现绘图。除此之外，matplotlib 还提供了另一套模仿 MATLAB 的接口，即 Pyplot-style interface。比如下面的代码：\n\n\nPyplot-style 接口是基于状态的接口（state-based interface）。我的理解是每调用一次 `pyplot` 中的命令就会改变一下当前的状态（也就是图像），并将改变之后的状态保存下来，`plt.show()` 展示最终的状态。而 OO-style 是每次新建一个对象，调用该对象的方法从而在画布上创建新的内容。\n\n两者相比，Pyplot-style 接口简洁，方便我们快速的生成各类图像，但是功能不够强大。OO-style 是官方文档推荐我们使用的方式，功能更加强大，我们可以更自由的控制画布中的元素，从而实现图形的定制。因此，在接下来的内容里，我们都使用 OO-style 的方式来绘图。\n\n# 画一张精美的图\n\n要画一张精美的图，就需要对 `Artist` 对象进行定制。首先附上官方文档里的这张图。\n\n![Artist](./parts_of_a_figure.png \"Artist\")\n\n我们可以对各种 `Aritst` 类型对象进行定制，包括：\n\n- 画布\n- 坐标系\n- 坐标轴\n- 点、线\n- 文字\n- 图例\n- annotation\n\n\n## 坐标轴\n\nmatplotlib 的 [`Axes`](https://matplotlib.org/stable/users/explain/axes/axes_intro.html) 是绘图的入口。一旦在图上放置了一个 `Axes`，就可以使用许多方法向`Axes` 添加数据。一个 `Axes` 通常具有一对 `Axis` Artists，它们定义了数据坐标系，并包括添加注释（如 x 轴和 y 轴标签、标题和图例）的方法。\n\n\n也可以使用 `set_xlim` 和 `set_ylim` 方法设置坐标轴的范围，可以使用 `set_xscale` 和 `set_yscale` 设置坐标轴的比例尺度。\n\n\n`Axes` 类还提供了处理坐标轴刻度及其标签的辅助方法。其中最直接的是 `set_xticks` 和 `set_yticks`，它们可以手动设置刻度的位置，以及可选地设置它们的标签。可以使用`minorticks_on` 或 `minorticks_off` 来切换次要刻度。\n\n\n也可以使用 `tick_params` 调整 `Axes` 刻度和刻度标签：\n\n\n## 线\n\nmatplotlib 中的线是一个 [`line2D`](https://matplotlib.org/stable/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D) 对象，它有很多属性，我们可以通过对属性进行修改实现对线的美化和定制。这里，列出一些比较常用的属性：\n\n- `color` 或者 `c`：线的颜色；\n- `alpha`：透明度；\n- `linewidth`：线的宽度；\n- `linestyle` 或者 `ls`；\n  - `-` 或者 `solid`：实线；\n  - `--` 或者 `dashed`：短划线；\n  - `-.` 或者 `dashdot`：点划线；\n  - `:` 或者 `dotted`：点虚线；\n- [`marker`](https://matplotlib.org/stable/api/markers_api.html#module-matplotlib.markers) 或则 `m`：\n  - `.`：点\n  - `o`：圆圈\n  - `^`：上三角形\n  - `+`：加号\n  - `x`：X\n  - `s`：正方形\n  - `*`：五角星\n\n下面，我们在代码中来看一下各种属性的使用：\n\n\n我们也可以使用对应的方法来设置或者修改属性值。`ax.plot()` 方法返回一个 `line2D` 对象列表，我们可以在对应的 `line2D` 对象上调用方法。比如，我们可以使用 `set_linestyle()` 方法修改 `linestyle` 属性，可以使用 `set_marker()` 方法修改 `marker` 属性。\n\n\n## 文字\n\nmatplotlib 中的文字是一个 [`matplotlib.text.Text`](https://matplotlib.org/stable/users/explain/text/text_props.html) 对象，利用相关的属性我们可以控制文字显示的样式，包括文字位置、显示的字体、字体大小、颜色等等。\n\n- `alpha`：透明度\n- `fontfamily`：FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'\n- `fontsize`：float or 'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'\n- `fontweight`：a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'\n- `fontstyle`：'normal', 'italic', 'oblique'\n\n这里放上官方文档的例子：\n\n\n## 图例\n\n[`Axes.legend(*args, **kwargs)`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.legend.html#matplotlib.axes.Axes.legend)\n\n\n## Spines\n\n\n# References\n\n- https://matplotlib.org/matplotblog/posts/pyplot-vs-object-oriented-interface/\n- https://stackoverflow.com/questions/52816131/matplotlib-pyplot-documentation-says-it-is-state-based-interface-to-matplotlib\n- https://matplotlib.org/stable/tutorials/introductory/usage.html#styling-artists\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"highlight-style":"atom-one","html-math-method":"katex","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","theme":["cosmo","../../theme.scss"],"title-block-banner":true,"title":"Matplotlib绘图工作流","author":"Tom","date":"2021-05-22","toc-expand":true,"code-block-bg":true,"categories":["数据可视化"],"image":"parts_of_a_figure.png","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}