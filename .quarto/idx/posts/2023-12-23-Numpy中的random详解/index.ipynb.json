{"title":"Numpy中的random模块详解","markdown":{"yaml":{"title":"Numpy中的random模块详解","description":"使用Numpy中的random模块生成随机数有何优势，Generator类如何使用，以及常用的概率分布的实现方法。","author":"Tom","date":"2023-12-23","toc":true,"toc-depth":3,"toc-expand":true,"code-block-bg":true,"highlight-style":"atom-one","categories":["概率与统计","数据分析"],"image":"code-snapshot.png","code-fold":false,"cold-line-numbers":true,"code-copy":true,"draft":false,"html-math-method":"katex","jupyter":"python3"},"headingText":"BitGenerator 与 Generator","containsRefs":false,"markdown":"\n\n> In a sense, there is no such things as a random number. For example, is 2 a random number? Rather, we speak of a sequence of independent random numbers with a specified distribution. -Donald Knuth\n\n编写程序时，我们常常会用到随机数，比如爬虫时随机 Sleep、随机从 UA 池中选择 UA、模拟掷色子等等。那么计算机如何生成随机数呢？\n\n一种方式是通过接受外部输入，继承外部的随机性，比如[盖革计数器](https://zh.wikipedia.org/zh-hans/%E7%9B%96%E9%9D%A9%E8%AE%A1%E6%95%B0%E5%99%A8)。这种方式存在一些缺点。首先是需要外部硬件设备，其次收集分析外部数据可能需要较长时间，最关键的是随机数大概率无法复现，这对于程序调试是一个很大的问题。\n\n第二种方式是使用伪随机数生成器（PRNG）算法。比如 Python 的 random 模块使用马特塞特旋转算法（Mersenne Twister）生成随机数。马特塞特旋转算法基于线性同余生成器，被广泛使用在各类随机数生成器中，但该算法有一个确定的周期，并且需要大量的计算资源。因此自版本 1.17 以来，NumPy 使用更高效的置换同余生成器-64（PCG64）算法。PCG64 算法的周期性更长，产生的数字更难以预测，生成速度更快且需要更少的资源。\n\n\n[`BitGenerator`](https://numpy.org/doc/stable/reference/random/bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator) 类允许我们自定义算法和随机数种子，`Generator` 是 `BitGenerator` 的容器。为了访问随机数，`BitGenerator` 被传递到一个单独的 `Generator` 对象中。`Generator` 具有允许用户访问一系列随机数并执行多个随机化操作的方法。`numpy.random` 模块提供了这种功能。\n\n\n# default_rng\n\n如果你愿意让 NumPy 为你完成所有的随机数生成工作，你可以使用它的默认值。换句话说，你的 BitGenerator 将使用 PCG64，并使用计算机时钟的种子。为了方便使用默认值，NumPy 提供了一个非常方便的 default_rng() 函数。这个函数会为你设置一切，并返回一个 Generator 对象的引用，供你使用其强大方法生成随机数。\n\n\n## Simple random data\n\n### `random`\n\n`random.Generator.random(size=None, dtype=np.float64, out=None)`\n\n创建一个给定形状的数组，并用 `[0,1)` 均匀分布的随机样本填充它。\n\n\n### `integers`\n\n`random.Generator.integers(low, high=None, size=None, dtype=np.int64, endpoint=False)`\n\n创建一个给定形状的数组，并用从 low（包含）到 high（不包含）之间“离散均分”分布的随机整数填充它；如果 `endpoint=True`，则用从 low（包含）到 high（包含）之间的随机整数进行填充。\n\n\n如果 high 为 None（默认值），则结果范围从 0 到 low。\n\n\n### `choice`\n\n`random.Generator.choice(a, size=None, replace=True, p=None, axis=0, shuffle=True)`\n\n从给定数组中生成一个随机样本。如果 `a` 是一个整数，则从 `np.arange(a)` 生成样本。\n\n\n如果 `a` 是一个数组，则默认从 `a` 均匀随机采样。\n\n\n也可以使用参数 `p` 为采样数组中的每个样本确定采样概率。\n\n\n如果采样数组 `a` 的维数超过了 1，那么 `size` 参数将会沿轴 0 插入。比如 `a.shape=(2,5)`，`size=(3,4)`，则采样生成的数组 `b.shape=(3,4,5)`。\n\n\n## Permutations\n\n### `shuffle`\n\n`random.Generator.shuffle(x, axis=0)`\n\n对所给数组进行重新排列（inplace）。\n\n\n可以利用 `axis` 参数指定沿着哪个轴随机排列，`axis=1` 表示每列作为一个整体随机排列。\n\n\n### `permutation`\n\n`random.Generator.permutation(x, axis=0)`\n\n如果参数 `x` 是一个整数，则随机排列 `np.arange(x)`：\n\n\n如果参数 `x` 是一个数组，先做一份拷贝，然后随机打乱元素的顺序：\n\n\n### `permuted`\n\n`random.Generator.permuted(x, axis=None, out=None)`\n\n沿着指定的轴（axis）随机排列数组 `x`：\n\n\n使用 `out` 参数原地排列：\n\n\n使用 `axis=1` 参数可以对每行内的值（即沿着 axis=1 的值）独立地进行排列。\n\n\n## 概率分布\n\n### 均匀分布\n\n`random.Generator.uniform(low=0.0, high=1.0, size=None)`\n\n\n### 二项分布\n\n`random.Generator.binomial(n, p, size=None)`\n\n\n### 几何分布\n\n`random.Generator.geometric(p, size=None)`\n\n\n### 指数分布\n\n`random.Generator.exponential(scale=1.0, size=None)`\n\n$$\nf(x,\\frac{1}{\\beta}) = \\frac{1}{\\beta}e^{(-\\frac{1}{\\beta}x)}, x>0\n$$\n\n参数 `scale` 即为公式中的 $\\beta$\n\n\n### 正态分布\n\n`random.Generator.normal(loc=0.0, scale=1.0, size=None)`\n\n$$\nf(X)= \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}\n$$\n\n参数 `loc` 和 `scale` 分别为公式中的 $\\mu$ 和 $\\sigma$\n\n\nnumpy 提供了 `standard_nomal` 函数方便快速生成标准正态分布样本：\n\n\n### 泊松分布\n\n`random.Generator.poisson(lam=1.0, size=None)`\n\n$$\nf(k, \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!}\n$$\n\n\n### 伽马分布\n\n\n# 参考资料\n\n- https://numpy.org/doc/stable/reference/random/index.html\n- https://albertcthomas.github.io/good-practices-random-number-generators/\n- https://www.pcg-random.org/paper.html\n- https://realpython.com/numpy-random-number-generator/\n\n","srcMarkdownNoYaml":"\n\n> In a sense, there is no such things as a random number. For example, is 2 a random number? Rather, we speak of a sequence of independent random numbers with a specified distribution. -Donald Knuth\n\n编写程序时，我们常常会用到随机数，比如爬虫时随机 Sleep、随机从 UA 池中选择 UA、模拟掷色子等等。那么计算机如何生成随机数呢？\n\n一种方式是通过接受外部输入，继承外部的随机性，比如[盖革计数器](https://zh.wikipedia.org/zh-hans/%E7%9B%96%E9%9D%A9%E8%AE%A1%E6%95%B0%E5%99%A8)。这种方式存在一些缺点。首先是需要外部硬件设备，其次收集分析外部数据可能需要较长时间，最关键的是随机数大概率无法复现，这对于程序调试是一个很大的问题。\n\n第二种方式是使用伪随机数生成器（PRNG）算法。比如 Python 的 random 模块使用马特塞特旋转算法（Mersenne Twister）生成随机数。马特塞特旋转算法基于线性同余生成器，被广泛使用在各类随机数生成器中，但该算法有一个确定的周期，并且需要大量的计算资源。因此自版本 1.17 以来，NumPy 使用更高效的置换同余生成器-64（PCG64）算法。PCG64 算法的周期性更长，产生的数字更难以预测，生成速度更快且需要更少的资源。\n\n# BitGenerator 与 Generator\n\n[`BitGenerator`](https://numpy.org/doc/stable/reference/random/bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator) 类允许我们自定义算法和随机数种子，`Generator` 是 `BitGenerator` 的容器。为了访问随机数，`BitGenerator` 被传递到一个单独的 `Generator` 对象中。`Generator` 具有允许用户访问一系列随机数并执行多个随机化操作的方法。`numpy.random` 模块提供了这种功能。\n\n\n# default_rng\n\n如果你愿意让 NumPy 为你完成所有的随机数生成工作，你可以使用它的默认值。换句话说，你的 BitGenerator 将使用 PCG64，并使用计算机时钟的种子。为了方便使用默认值，NumPy 提供了一个非常方便的 default_rng() 函数。这个函数会为你设置一切，并返回一个 Generator 对象的引用，供你使用其强大方法生成随机数。\n\n\n## Simple random data\n\n### `random`\n\n`random.Generator.random(size=None, dtype=np.float64, out=None)`\n\n创建一个给定形状的数组，并用 `[0,1)` 均匀分布的随机样本填充它。\n\n\n### `integers`\n\n`random.Generator.integers(low, high=None, size=None, dtype=np.int64, endpoint=False)`\n\n创建一个给定形状的数组，并用从 low（包含）到 high（不包含）之间“离散均分”分布的随机整数填充它；如果 `endpoint=True`，则用从 low（包含）到 high（包含）之间的随机整数进行填充。\n\n\n如果 high 为 None（默认值），则结果范围从 0 到 low。\n\n\n### `choice`\n\n`random.Generator.choice(a, size=None, replace=True, p=None, axis=0, shuffle=True)`\n\n从给定数组中生成一个随机样本。如果 `a` 是一个整数，则从 `np.arange(a)` 生成样本。\n\n\n如果 `a` 是一个数组，则默认从 `a` 均匀随机采样。\n\n\n也可以使用参数 `p` 为采样数组中的每个样本确定采样概率。\n\n\n如果采样数组 `a` 的维数超过了 1，那么 `size` 参数将会沿轴 0 插入。比如 `a.shape=(2,5)`，`size=(3,4)`，则采样生成的数组 `b.shape=(3,4,5)`。\n\n\n## Permutations\n\n### `shuffle`\n\n`random.Generator.shuffle(x, axis=0)`\n\n对所给数组进行重新排列（inplace）。\n\n\n可以利用 `axis` 参数指定沿着哪个轴随机排列，`axis=1` 表示每列作为一个整体随机排列。\n\n\n### `permutation`\n\n`random.Generator.permutation(x, axis=0)`\n\n如果参数 `x` 是一个整数，则随机排列 `np.arange(x)`：\n\n\n如果参数 `x` 是一个数组，先做一份拷贝，然后随机打乱元素的顺序：\n\n\n### `permuted`\n\n`random.Generator.permuted(x, axis=None, out=None)`\n\n沿着指定的轴（axis）随机排列数组 `x`：\n\n\n使用 `out` 参数原地排列：\n\n\n使用 `axis=1` 参数可以对每行内的值（即沿着 axis=1 的值）独立地进行排列。\n\n\n## 概率分布\n\n### 均匀分布\n\n`random.Generator.uniform(low=0.0, high=1.0, size=None)`\n\n\n### 二项分布\n\n`random.Generator.binomial(n, p, size=None)`\n\n\n### 几何分布\n\n`random.Generator.geometric(p, size=None)`\n\n\n### 指数分布\n\n`random.Generator.exponential(scale=1.0, size=None)`\n\n$$\nf(x,\\frac{1}{\\beta}) = \\frac{1}{\\beta}e^{(-\\frac{1}{\\beta}x)}, x>0\n$$\n\n参数 `scale` 即为公式中的 $\\beta$\n\n\n### 正态分布\n\n`random.Generator.normal(loc=0.0, scale=1.0, size=None)`\n\n$$\nf(X)= \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}\n$$\n\n参数 `loc` 和 `scale` 分别为公式中的 $\\mu$ 和 $\\sigma$\n\n\nnumpy 提供了 `standard_nomal` 函数方便快速生成标准正态分布样本：\n\n\n### 泊松分布\n\n`random.Generator.poisson(lam=1.0, size=None)`\n\n$$\nf(k, \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!}\n$$\n\n\n### 伽马分布\n\n\n# 参考资料\n\n- https://numpy.org/doc/stable/reference/random/index.html\n- https://albertcthomas.github.io/good-practices-random-number-generators/\n- https://www.pcg-random.org/paper.html\n- https://realpython.com/numpy-random-number-generator/\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"highlight-style":"atom-one","html-math-method":"katex","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.34","theme":["cosmo","../../theme.scss"],"title-block-banner":true,"title":"Numpy中的random模块详解","description":"使用Numpy中的random模块生成随机数有何优势，Generator类如何使用，以及常用的概率分布的实现方法。","author":"Tom","date":"2023-12-23","toc-expand":true,"code-block-bg":true,"categories":["概率与统计","数据分析"],"image":"code-snapshot.png","cold-line-numbers":true,"code-copy":true,"draft":false,"jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"draft":false,"projectFormats":["html"]}