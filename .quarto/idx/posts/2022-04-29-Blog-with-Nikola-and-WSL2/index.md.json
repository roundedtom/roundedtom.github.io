{"title":"如何使用 Nikola 搭建个人博客","markdown":{"yaml":{"title":"如何使用 Nikola 搭建个人博客","author":"Tom","date":"2022-04-29","toc":true,"code-block-bg":true,"highlight-style":"arrow","categories":["网站博客"],"image":"nikola.jpg","code-fold":false,"html-math-method":"katex","jupyter":"python3"},"headingText":"Nikola 安装与博客搭建","containsRefs":false,"markdown":"\n\n一直希望搭建一个博客，一方面是希望能有一个地方记录整理自己学过的知识，另一方面也希望能交到一些志同道合的朋友（有人可以讨论真是太棒了！）在各种鼓捣之后，我选择了 [Nikola](https://getnikola.com/)，因为它原生支持 Jupyter notebook。至于为什么选择静态博客，Nikola 官网这篇[文章](https://getnikola.com/handbook.html#why-static)写的很好。\n\n关于如何使用 Nikola 搭建博客和个人网站，相关的中文资源比较少，这篇文章是我个人，来自一个非科班背景的踩坑经历。博客在 WSL2 上搭建，Windows 与 Mac 上搭建也类似，环境如下：\n\n```Bash\nWLS2 Ubuntu 20.04.3 LTS\nNikola Version: 8.2.1\nPython 3.8.10\npip 20.0.2\n```\n\n\n这部分内容是对官方文档 [getting started](https://getnikola.com/getting-started.html) 的一个梳理。其实官方文档写的非常清晰，强烈建议大家去瞅一瞅。\n\n## Nikola 安装\n\n官方文档推荐使用虚拟环境来安装 Nikola，我们可以使用 Python 自带的 venv 模块来创建虚拟环境。\n\n```Bash\n# 首先新建一个博客目录\nmkdir myblog\n\n# 然后进入到 myblog 目录下，创建虚拟环境\ncd myblog\npython3 -m venv blog\n\n# 进入到虚拟环境目录，激活虚拟环境\ncd blog\nsource ./bin/activate\n\n# 使用 pip 安装 Nikola\npip install -U pip setuptools wheel\npip install -U \"Nikola[extras]\"\n```\n\n官方文档推荐在安装时选择 Nikola[extras] 版本（可以体验一些额外的功能），但是你也可以选择安装 Nikola 版本。\n\n## 初始化博客\n\n在安装完 Nikola 之后，我们就可以使用 Nikola 提供的命令初始化博客了。\n\n```Bash\nnikola init --demo my_blog\n```\n\n这条命令会在当前目录下创建一个新的目录 `my_blog`，`--demo my_blog` 参数表示在初始化目录的时候创建一些 demo 文件（当然你也可以选择不创建 demo 文件，使用 `--quiet` 参数）。你会看到如下输出和提问：\n\n```Bash\nCreating Nikola Site\n====================\n\nThis is Nikola v8.2.1.  We will now ask you a few easy questions about your new site.\nIf you do not want to answer and want to go with the defaults instead, simply restart with the `-q` parameter.\n--- Questions about the site ---\nSite title [My Nikola Site]:\n```\n\n回答命令行中的提问：\n\n- Site title：网站名\n- Site author：网站作者\n- Site author's e-mail：联系邮箱\n- Site description：网站描述，生成网站的 [meta description](https://moz.com/learn/seo/meta-description)\n- Site URL：网页 URL\n- Enable pretty URLs (/page/ instead of /page.html) that don't need web server configuration? [Y/n]：是否开启 [pretty URLs](https://en.wikipedia.org/wiki/Clean_URL)\n- Language(s) to use [en]：选择网站显示语言\n- Time zone [Asia/Shanghai]：选择时区\n- Comment system：选择评论系统\n\n当你看到以下提示时，就说明博客初始化成功了。\n\n```Bash\nThat's it, Nikola is now configured.  Make sure to edit conf.py to your liking.\nIf you are looking for themes and addons, check out https://themes.getnikola.com/ and https://plugins.getnikola.com/.\nHave fun!\n[2022-04-29 16:09:00] INFO: init: A new site with example data has been created at my_blog.\n[2022-04-29 16:09:00] INFO: init: See README.txt in that folder for more information.\n```\n\n我们可以看一下 `my_blog` 目录，这是我们的博客根目录。\n\n```Bash\n.\n├── files\n├── galleries\n├── images  # 图片存放目录\n├── listings\n│   └── __pycache__\n├── pages  # 页面存放目录\n├── posts  # 文章存放目录\n└── templates  # 生成站点的模板文件存放目录\n```\n\n## 新建博客\n\n博客初始化完成之后，我们就可以添加第一篇博客了。\n\n### 添加第一篇博客\n\n如果你习惯使用命令行，可以使用命令 `nikola new_post -f markdown` 添加第一篇博客：\n\n```Bash\nCreating New Post\n-----------------\n\nTitle: First post\nScanning posts........done!\n[2022-04-29 20:50:04] INFO: new_post: Your post's text is at: posts/first-post.md\n```\n\n`-f` 参数指定文章格式，这里我们指定为 markdown 格式，该命令会在 posts 文件夹下新建一个 markdown 文件，你可以 `cd` 到 posts 目录下，继续编辑该博客。打开该博客，你会发现以下元信息：\n\n```Bash\n<!--\n.. title: First post\n.. slug: first-post\n.. date: 2022-12-30 19:30:43 UTC+08:00\n.. tags: \n.. category: \n.. link: \n.. description: \n.. type: text\n-->\n```\n\n- title：文章标题\n- [slug](https://www.semrush.com/blog/what-is-a-url-slug/)：固定链接地址，是 URL 最后一个反斜杠之后的那一部分。slug 如果不指定，Nikola 默认使用文章标题作为 slug。\n- date：文章创建时间\n- tags：文章标签\n- category：文章分类\n- link：Link to original source for content. May be displayed by some themes.（官方文档介绍，暂时没用过）\n- description：页面描述\n- type：文章类型\n\n除此之外，另一个常用的元信息字段是 `has_math`。如果文章中有 latex 公式，就需要添加该字段。一般常用的 metadata 字段就这些，如果你想深入了解，推荐[官方文档](https://getnikola.com/handbook.html#metadata-fields)。\n\n如果你不习惯使用命令行，也可以直接在 posts 目录下新建 markdown 文件，然后利用你喜欢的编辑器进行编辑，但需要手动添加元信息。除了 markdown，Nikola 也支持如下格式：\n\n> - reStructuredText (default and pre-configured)\n> - [Markdown](https://getnikola.com/handbook.html#markdown) (pre-configured since v7.8.7)\n> - [Jupyter Notebook](https://getnikola.com/handbook.html#jupyter-notebook)\n> - [HTML](https://getnikola.com/handbook.html#html)\n> - [PHP](https://getnikola.com/handbook.html#php)\n> - anything [Pandoc](https://getnikola.com/handbook.html#pandoc) supports (including Textile, DocBook, LaTeX, MediaWiki, TWiki, OPML, Emacs Org-Mode, txt2tags, Microsoft Word .docx, EPUB, Haddock markup)\n\n### 生成静态文件\n\n写完博客之后，下面我们使用命令 `nikola build` 生成静态文件。`nikola build` 会在博客根目录下新建一个 output 目录，这个目录就是你的站点资源目录，你的博客网站里所有显示的内容都来自于这个目录。我们来看下这个目录：\n\n```Bash\n.\n├── 2012  # 博客归档目录，Nikola demo 文件中有一篇是 2012 年写的\n├── archive.html  # 显示博客归档页面\n├── assets  # css js fonts img 等资源目录\n├── categories  # 博客分类\n├── favicon.ico\n├── galleries\n├── images\n├── index.html # 博客首页\n├── listings\n├── pages\n├── posts  # 博客目录\n├── robots.txt\n├── rss.xml\n├── sitemap.xml\n└── sitemapindex.xml\n```\n\n这里，我们需要关注 posts 目录，`nikola build` 命令会将我们写的 markdown 文件转化为 html 文件并保存在该目录下。\n\n### 本地调试\n\n使用命令 `nikola serve -b` 会打开默认浏览器，方便我们进行本地调试。这里，由于我是在 WSL2 中搭建博客，键入 `nikola serve -b` 命令之后，`http://0.0.0.0:8000/ ` 显示拒绝访问，Windows 和 Mac 应该不存在这个问题。\n\n解决方法是在 windows `C:\\Users\\Me` 目录下新建 `.wslconfig` 配置文件，并输入以下内容：\n\n```Bash\n[wsl2]\nlocalhostForwarding=true\n```\n\n## 让 Nikola 支持 Jupyter Notebook\n\n下面我们让 Nikola 支持 Jupyter Notebook，毕竟这是数据科学家的博客:)\n\n首先我们需要在 `COMPILERS` 中定义 `ipynb` 文件。打开站点配置文件 `conf.py`，搜索 `COMPILERS`，如下定义 `ipynb` 文件：\n\n```Python\nCOMPILERS = {                                                                               \n    \"rest\": ['.rst', '.txt'],\n    \"markdown\": ['.md', '.mdown', '.markdown'],\n    \"textile\": ['.textile'],\n    \"txt2tags\": ['.t2t'],\n    \"bbcode\": ['.bb'],\n    \"wiki\": ['.wiki'],\n    \"ipynb\": ['.ipynb'],\n    \"html\": ['.html', '.htm'],\n    \"php\": ['.php'],\n}\n```\n\n其次，我们需要在 `POSTS` 中定义 `.ipynb` 插件。编辑站点配置文件 `conf.py`，搜索 `POSTS`，如下定义 `.ipynb` 插件：\n\n```Python\n POSTS = (                                                                              \n     (\"posts/*.rst\", \"posts\", \"post.tmpl\"),\n     (\"posts/*.md\", \"posts\", \"post.tmpl\"),\n     (\"posts/*.txt\", \"posts\", \"post.tmpl\"),\n     (\"posts/*.html\", \"posts\", \"post.tmpl\"),\n     (\"posts/*.ipynb\", \"posts\", \"post.tmpl\"),\n )\n```\n\n使用 Jupyter Notebook 写博客与 markdown 类似，你可以在 posts 文件下新建 ipynb 文件，然后用 Jupyter Notebook 打开编辑。\n\n我们可以使用字典向 Jupyter Notebook 中添加博客文章必需的元信息，方法为打开 Jupyter Notebook，菜单栏选择 _Edit -> Edit Notebook Metadata_，添加如下格式信息：\n\n```json\n{\n  \"nikola\": {\n    \"title\": \"Example for Jupyter Notebook metadata configuration\",\n    \"slug\": \"example-for-jupyter-notebook-metadata-configuration\",\n    \"date\": \"2022-04-29 19:52:05 UTC\"\n  }\n}\n```\n\n## markdown 支持\n\nNikola 默认使用 [python-markdown](https://python-markdown.github.io/reference/) 解析 markdown，你也可以选择使用 pandoc，这篇[博客](https://www.brainsorting.com/posts/create-a-blog-with-nikola/#using-markdown-for-your-post)讲的非常清楚。\n\n另外，如果你喜欢使用 Pelican-style 风格添加博客元信息，需要添加 `markdown.extensions.meta` 插件。此外，你也可以使用 `markdown.extensions.toc` 插件自动解析文章目录。打开站点配置文件，编辑 markdown 插件配置选项：\n\n```Python\n MARKDOWN_EXTENSIONS = [\n     'markdown.extensions.meta',\n     'markdown.extensions.fenced_code',\n     'markdown.extensions.codehilite',\n     'markdown.extensions.extra',\n     'markdown.extensions.toc',  # 自动解析文章目录\n ]\n```\n\n## 数学公式支持\n\nNikola 默认使用 MathJax 显示数学公式，你可以使用 Katex。编辑站点配置文件，修改 `USE_KATEX=True`。Nikola 默认使用 `\\(...\\)` 渲染行内公式，使用 `\\[...\\]` 和 `$$...$$` 渲染行间公式。如果你习惯使用 `$...$` 渲染行内公式，需要修改配置文件，搜索 `KATEX_AUTO_RENDER` ，如下编辑：\n\n```Python\nKATEX_AUTO_RENDER = \"\"\"\ndelimiters: [\n    {left: \"$$\", right: \"$$\", display: true},\n    {left: \"\\\\\\\\[\", right: \"\\\\\\\\]\", display: true},\n    {left: \"\\\\\\\\begin{equation*}\", right: \"\\\\\\\\end{equation*}\", display: true},\n    {left: \"$\", right: \"$\", display: false},\n    {left: \"\\\\\\\\(\", right: \"\\\\\\\\)\", display: false}\n]\n\"\"\"\n```\n\n# 博客美化\n\n相比于 Jekyll、Hugo 和 Hexo，Nikola 的不足是好看的主题比较少。官方提供了一些[主题](https://themes.getnikola.com/)，这里我们以 [bootstrap4](https://themes.getnikola.com/v8/bootstrap4/) 来演示。\n\n## 更换主题\n\n首先，我们需要下载主题。利用 `nikola theme -i bootstrap4` 命令下载主题。然后我们编辑站点配置文件 `conf.py`，搜索 `THEME`，将主题修改为 `bootstrap4`。\n\n## 导航栏配置\n\n我们可以通过修改 `THEME_CONFIG` 来修改导航栏配色。bootstrap4 导航栏默认是暗底，也可以自定义背景颜色，配置文件如下：\n\n```Python\n THEME_CONFIG = {\n      DEFAULT_LANG: {\n          # Use a light navbar with dark text. Defaults to False.                                   \n          'navbar_light': False,\n          # Use a custom navbar color. If unset, 'navbar_light' sets text +\n          # background color. If set, navbar_light controls only background\n          # color. Supported values: bg-dark, bg-light, bg-primary, bg-secondary,\n          # bg-success, bg-danger, bg-warning, bg-info, bg-white, bg-transparent.\n          'navbar_custom_bg': '',\n      }\n }\n```\n\n导航栏默认有博客归档、分类和 RSS 订阅栏目，我们可以通过修改 `NAVIGATION_LINKS` 来自定义导航栏目。其默认配置如下：\n\n```Python\nNAVIGATION_LINKS = {\n    DEFAULT_LANG: (\n        (\"/archive.html\", \"Archive\"),\n        (\"/categories/\", \"Tags\"),\n        (\"/rss.xml\", \"RSS feed\"),\n    ),\n}\n```\n\n这里 `/` 代表站点资源根目录，即 output 目录。我们可以通过指定资源目录，自定义导航栏。比如在 `categories/` 目录下，Nikola 生成了 `cat_nikola`、`cat_python` 等类别目录，我们可以指定这两个目录，新建一个多级 TECH 导航栏目。\n\n```Python\nNAVIGATION_LINKS = {\n    DEFAULT_LANG: (\n        (\"/archive.html\", \"Archive\"),\n        (\"/categories/\", \"Tags\"),\n        (\"/rss.xml\", \"RSS feed\"),\n        (\n          (\n            (\"/categories/cat_nikola/\", \"Nikola\"),\n            (\"/categories/cat_python/\", \"Python\")\n          ),\n          \"TECH\"\n        ),\n    ),\n}\n```\n\n## 网页图标与 logo\n\n首先我们进入博客根目录中的 files 目录，新建 assets 目录，再新建 img 目录，然后将网页图标 favicon 和 logo 文件拷贝到 img 目录中。`nikola build` 在生成静态文件时会将 files 文件下的资源都复制到 output 目录。\n\n然后编辑站点配置文件 `conf.py` 搜索 `FAVICONS` 和 `LOGO`，如下配置：\n\n```Python\nFAVICONS = (\n    (\"icon\", \"/assets/img/favicon.ico\", \"16x16\"),\n)\n\nLOGO_URL = '/assets/img/logo.jpg'\n```\n\n## 代码显示风格\n\nNikola 使用 [Pygments](https://pygments.org/) 进行语法高亮，你可以在 [Pygments styles](https://pygments.org/styles/) 选择自己喜欢的配色风格。我比较喜欢 `zenburn`，编辑站点配置文件 `conf.py` ，搜索 `CODE_COLOR_SCHEME` ，如下配置：\n\n```Python\nCODE_COLOR_SCHEME = 'zenburn'\n```\n\n## 目录美化\n\n如果你使用了 `markdown.extensions.toc` 插件解析文章目录，你会发现这个目录比较丑。Nikola 使用 `post.tmpl` 模板文件来生成博客文章页面，我们可以修改这个模板文件，从而美化目录（这需要你懂一点前端和 Mako 模板引擎的知识:)\n\n首先，我们将 `post.tmpl` 文件复制到博客根目录，命令行输入 `nikola theme -c post.tmpl`，该命令会将 `post.tmpl` 文件复制 templates 目录下，然后我们编辑这个文件。因为我们只是希望美化博客文章页面的目录，所以可以使用内部样式表，在 `<style>` 标签中定义样式。比如，我是这样美化的：\n\n```CSS\n@media screen and (min-width: 1024px) {\n    .e-content {\n        display: grid;\n        grid-template-columns: 3fr 1fr;\n        column-gap: 30px;\n        position: relative;\n    }\n\n    .toc {\n        grid-column: 2 / 3;\n        grid-row: 1 / span 999;\n        align-self: start;\n        position: sticky;\n        top: 20px;\n    }\n        \n    .toc::before {\n        content: \"ON this page\";\n        background-color: #ffe70e;\n        color: #444;\n        font-size: 16px;\n        font-weight: bold;\n        font-style: italic;\n        padding: 5px 5px;\n        margin-left: 20px;\n    }\n}\n\n@media screen and (max-width: 767px) {\n    .e-content {\n        display: grid;\n        grid-template-columns: 1fr;\n    }\n            \n    .toc {\n        grid-column: 1 / 2;\n    }\n            \n    .toc::before {\n        content: \"ON this page\";\n        background-color: #ffe70e;\n        color: #444;\n        font-size: 16px;\n        font-weight: bold;\n        font-style: italic;\n        padding: 5px 5px;\n        margin-left: 20px;\n    }\n\n}\n```\n\n## 定制样式\n\nNikola 支持定制样式，我们可以通过在 `files/assets/css/` 目录下，新建 `custom.css` 文件来定制全局字体，行距等样式。如果你觉得我的样式不错，也可以选择复制[我的](/listings/custom.css.html):)\n\n## 个性化首页\n\nNikola 默认的首页是博客文章列表，并且是显示文章全部内容。我们可以通过修改配置文件 `INDEX_TEASERS=True`，然后在文章源文件中加入 `<!--- TEASER_END --->` 来选择显示部分内容。\n\n首页默认显示 10 篇文章，我们可以通过编辑站点配置文件中的 `INDEX_DISPLAY_POST_COUNT` 来选择首页显示的文章数量。\n\n此外，如果你希望定制首页，比如首页是一个 Greeting 页面，显示个人信息等等（像我这样:) 我强烈建议修改 `index.tmpl` 模板文件。如果你懂一点前端，可以在这里大显身手。使用命令 `nikola theme -c index.tmpl` 将模板文件复制到 templates 目录下，进行修改。\n\n# 部署到 Github\n\n- 在 Github 新建一个仓库，命名为 `[username].github.io`，username 就是你的 Github 账户名\n- 在博客根目录 `git init` 创建版本仓库\n- 添加远程仓库 `git remote add origin https://github.com/[username]/[username].github.io.git`\n- 创建 `.gitignore` 文件\n\n```Bash\ncache\n.doit.db*\n__pycache__\noutput\n.ipynb_checkpoints\n.DS_Store\n```\n\n- 使用 `nikola github_deploy` 一键部署到 Github\n\n解释一下 `nikola github_deploy`，这个[命令](https://getnikola.com/handbook.html#deploying-to-github)会创建一个 `src` 分支，用来保存博客目录的源文件，而 `master` 分支用来保存站点资源目录（即 output 目录）下的那些静态资源文件。这些配置也可以在站点配置文件 `conf.py` 中进行修改：\n\n```Python\nGITHUB_SOURCE_BRANCH = 'src'\nGITHUB_DEPLOY_BRANCH = 'master'\n\n# The name of the remote where you wish to push to, using github_deploy.\nGITHUB_REMOTE_NAME = 'origin'\n\n# Whether or not github_deploy should commit to the source branch automatically\n# before deploying.\nGITHUB_COMMIT_SOURCE = True\n```\n\n# 参考资料\n\n- [The Nikola Handbook](https://getnikola.com/handbook.html#)\n- https://randlow.github.io/posts/python/create-nikola-coding-blog/\n- https://www.brainsorting.com/posts/create-a-blog-with-nikola/\n- https://paulomarconi.github.io/blog/Nikola-guide/","srcMarkdownNoYaml":"\n\n一直希望搭建一个博客，一方面是希望能有一个地方记录整理自己学过的知识，另一方面也希望能交到一些志同道合的朋友（有人可以讨论真是太棒了！）在各种鼓捣之后，我选择了 [Nikola](https://getnikola.com/)，因为它原生支持 Jupyter notebook。至于为什么选择静态博客，Nikola 官网这篇[文章](https://getnikola.com/handbook.html#why-static)写的很好。\n\n关于如何使用 Nikola 搭建博客和个人网站，相关的中文资源比较少，这篇文章是我个人，来自一个非科班背景的踩坑经历。博客在 WSL2 上搭建，Windows 与 Mac 上搭建也类似，环境如下：\n\n```Bash\nWLS2 Ubuntu 20.04.3 LTS\nNikola Version: 8.2.1\nPython 3.8.10\npip 20.0.2\n```\n\n# Nikola 安装与博客搭建  \n\n这部分内容是对官方文档 [getting started](https://getnikola.com/getting-started.html) 的一个梳理。其实官方文档写的非常清晰，强烈建议大家去瞅一瞅。\n\n## Nikola 安装\n\n官方文档推荐使用虚拟环境来安装 Nikola，我们可以使用 Python 自带的 venv 模块来创建虚拟环境。\n\n```Bash\n# 首先新建一个博客目录\nmkdir myblog\n\n# 然后进入到 myblog 目录下，创建虚拟环境\ncd myblog\npython3 -m venv blog\n\n# 进入到虚拟环境目录，激活虚拟环境\ncd blog\nsource ./bin/activate\n\n# 使用 pip 安装 Nikola\npip install -U pip setuptools wheel\npip install -U \"Nikola[extras]\"\n```\n\n官方文档推荐在安装时选择 Nikola[extras] 版本（可以体验一些额外的功能），但是你也可以选择安装 Nikola 版本。\n\n## 初始化博客\n\n在安装完 Nikola 之后，我们就可以使用 Nikola 提供的命令初始化博客了。\n\n```Bash\nnikola init --demo my_blog\n```\n\n这条命令会在当前目录下创建一个新的目录 `my_blog`，`--demo my_blog` 参数表示在初始化目录的时候创建一些 demo 文件（当然你也可以选择不创建 demo 文件，使用 `--quiet` 参数）。你会看到如下输出和提问：\n\n```Bash\nCreating Nikola Site\n====================\n\nThis is Nikola v8.2.1.  We will now ask you a few easy questions about your new site.\nIf you do not want to answer and want to go with the defaults instead, simply restart with the `-q` parameter.\n--- Questions about the site ---\nSite title [My Nikola Site]:\n```\n\n回答命令行中的提问：\n\n- Site title：网站名\n- Site author：网站作者\n- Site author's e-mail：联系邮箱\n- Site description：网站描述，生成网站的 [meta description](https://moz.com/learn/seo/meta-description)\n- Site URL：网页 URL\n- Enable pretty URLs (/page/ instead of /page.html) that don't need web server configuration? [Y/n]：是否开启 [pretty URLs](https://en.wikipedia.org/wiki/Clean_URL)\n- Language(s) to use [en]：选择网站显示语言\n- Time zone [Asia/Shanghai]：选择时区\n- Comment system：选择评论系统\n\n当你看到以下提示时，就说明博客初始化成功了。\n\n```Bash\nThat's it, Nikola is now configured.  Make sure to edit conf.py to your liking.\nIf you are looking for themes and addons, check out https://themes.getnikola.com/ and https://plugins.getnikola.com/.\nHave fun!\n[2022-04-29 16:09:00] INFO: init: A new site with example data has been created at my_blog.\n[2022-04-29 16:09:00] INFO: init: See README.txt in that folder for more information.\n```\n\n我们可以看一下 `my_blog` 目录，这是我们的博客根目录。\n\n```Bash\n.\n├── files\n├── galleries\n├── images  # 图片存放目录\n├── listings\n│   └── __pycache__\n├── pages  # 页面存放目录\n├── posts  # 文章存放目录\n└── templates  # 生成站点的模板文件存放目录\n```\n\n## 新建博客\n\n博客初始化完成之后，我们就可以添加第一篇博客了。\n\n### 添加第一篇博客\n\n如果你习惯使用命令行，可以使用命令 `nikola new_post -f markdown` 添加第一篇博客：\n\n```Bash\nCreating New Post\n-----------------\n\nTitle: First post\nScanning posts........done!\n[2022-04-29 20:50:04] INFO: new_post: Your post's text is at: posts/first-post.md\n```\n\n`-f` 参数指定文章格式，这里我们指定为 markdown 格式，该命令会在 posts 文件夹下新建一个 markdown 文件，你可以 `cd` 到 posts 目录下，继续编辑该博客。打开该博客，你会发现以下元信息：\n\n```Bash\n<!--\n.. title: First post\n.. slug: first-post\n.. date: 2022-12-30 19:30:43 UTC+08:00\n.. tags: \n.. category: \n.. link: \n.. description: \n.. type: text\n-->\n```\n\n- title：文章标题\n- [slug](https://www.semrush.com/blog/what-is-a-url-slug/)：固定链接地址，是 URL 最后一个反斜杠之后的那一部分。slug 如果不指定，Nikola 默认使用文章标题作为 slug。\n- date：文章创建时间\n- tags：文章标签\n- category：文章分类\n- link：Link to original source for content. May be displayed by some themes.（官方文档介绍，暂时没用过）\n- description：页面描述\n- type：文章类型\n\n除此之外，另一个常用的元信息字段是 `has_math`。如果文章中有 latex 公式，就需要添加该字段。一般常用的 metadata 字段就这些，如果你想深入了解，推荐[官方文档](https://getnikola.com/handbook.html#metadata-fields)。\n\n如果你不习惯使用命令行，也可以直接在 posts 目录下新建 markdown 文件，然后利用你喜欢的编辑器进行编辑，但需要手动添加元信息。除了 markdown，Nikola 也支持如下格式：\n\n> - reStructuredText (default and pre-configured)\n> - [Markdown](https://getnikola.com/handbook.html#markdown) (pre-configured since v7.8.7)\n> - [Jupyter Notebook](https://getnikola.com/handbook.html#jupyter-notebook)\n> - [HTML](https://getnikola.com/handbook.html#html)\n> - [PHP](https://getnikola.com/handbook.html#php)\n> - anything [Pandoc](https://getnikola.com/handbook.html#pandoc) supports (including Textile, DocBook, LaTeX, MediaWiki, TWiki, OPML, Emacs Org-Mode, txt2tags, Microsoft Word .docx, EPUB, Haddock markup)\n\n### 生成静态文件\n\n写完博客之后，下面我们使用命令 `nikola build` 生成静态文件。`nikola build` 会在博客根目录下新建一个 output 目录，这个目录就是你的站点资源目录，你的博客网站里所有显示的内容都来自于这个目录。我们来看下这个目录：\n\n```Bash\n.\n├── 2012  # 博客归档目录，Nikola demo 文件中有一篇是 2012 年写的\n├── archive.html  # 显示博客归档页面\n├── assets  # css js fonts img 等资源目录\n├── categories  # 博客分类\n├── favicon.ico\n├── galleries\n├── images\n├── index.html # 博客首页\n├── listings\n├── pages\n├── posts  # 博客目录\n├── robots.txt\n├── rss.xml\n├── sitemap.xml\n└── sitemapindex.xml\n```\n\n这里，我们需要关注 posts 目录，`nikola build` 命令会将我们写的 markdown 文件转化为 html 文件并保存在该目录下。\n\n### 本地调试\n\n使用命令 `nikola serve -b` 会打开默认浏览器，方便我们进行本地调试。这里，由于我是在 WSL2 中搭建博客，键入 `nikola serve -b` 命令之后，`http://0.0.0.0:8000/ ` 显示拒绝访问，Windows 和 Mac 应该不存在这个问题。\n\n解决方法是在 windows `C:\\Users\\Me` 目录下新建 `.wslconfig` 配置文件，并输入以下内容：\n\n```Bash\n[wsl2]\nlocalhostForwarding=true\n```\n\n## 让 Nikola 支持 Jupyter Notebook\n\n下面我们让 Nikola 支持 Jupyter Notebook，毕竟这是数据科学家的博客:)\n\n首先我们需要在 `COMPILERS` 中定义 `ipynb` 文件。打开站点配置文件 `conf.py`，搜索 `COMPILERS`，如下定义 `ipynb` 文件：\n\n```Python\nCOMPILERS = {                                                                               \n    \"rest\": ['.rst', '.txt'],\n    \"markdown\": ['.md', '.mdown', '.markdown'],\n    \"textile\": ['.textile'],\n    \"txt2tags\": ['.t2t'],\n    \"bbcode\": ['.bb'],\n    \"wiki\": ['.wiki'],\n    \"ipynb\": ['.ipynb'],\n    \"html\": ['.html', '.htm'],\n    \"php\": ['.php'],\n}\n```\n\n其次，我们需要在 `POSTS` 中定义 `.ipynb` 插件。编辑站点配置文件 `conf.py`，搜索 `POSTS`，如下定义 `.ipynb` 插件：\n\n```Python\n POSTS = (                                                                              \n     (\"posts/*.rst\", \"posts\", \"post.tmpl\"),\n     (\"posts/*.md\", \"posts\", \"post.tmpl\"),\n     (\"posts/*.txt\", \"posts\", \"post.tmpl\"),\n     (\"posts/*.html\", \"posts\", \"post.tmpl\"),\n     (\"posts/*.ipynb\", \"posts\", \"post.tmpl\"),\n )\n```\n\n使用 Jupyter Notebook 写博客与 markdown 类似，你可以在 posts 文件下新建 ipynb 文件，然后用 Jupyter Notebook 打开编辑。\n\n我们可以使用字典向 Jupyter Notebook 中添加博客文章必需的元信息，方法为打开 Jupyter Notebook，菜单栏选择 _Edit -> Edit Notebook Metadata_，添加如下格式信息：\n\n```json\n{\n  \"nikola\": {\n    \"title\": \"Example for Jupyter Notebook metadata configuration\",\n    \"slug\": \"example-for-jupyter-notebook-metadata-configuration\",\n    \"date\": \"2022-04-29 19:52:05 UTC\"\n  }\n}\n```\n\n## markdown 支持\n\nNikola 默认使用 [python-markdown](https://python-markdown.github.io/reference/) 解析 markdown，你也可以选择使用 pandoc，这篇[博客](https://www.brainsorting.com/posts/create-a-blog-with-nikola/#using-markdown-for-your-post)讲的非常清楚。\n\n另外，如果你喜欢使用 Pelican-style 风格添加博客元信息，需要添加 `markdown.extensions.meta` 插件。此外，你也可以使用 `markdown.extensions.toc` 插件自动解析文章目录。打开站点配置文件，编辑 markdown 插件配置选项：\n\n```Python\n MARKDOWN_EXTENSIONS = [\n     'markdown.extensions.meta',\n     'markdown.extensions.fenced_code',\n     'markdown.extensions.codehilite',\n     'markdown.extensions.extra',\n     'markdown.extensions.toc',  # 自动解析文章目录\n ]\n```\n\n## 数学公式支持\n\nNikola 默认使用 MathJax 显示数学公式，你可以使用 Katex。编辑站点配置文件，修改 `USE_KATEX=True`。Nikola 默认使用 `\\(...\\)` 渲染行内公式，使用 `\\[...\\]` 和 `$$...$$` 渲染行间公式。如果你习惯使用 `$...$` 渲染行内公式，需要修改配置文件，搜索 `KATEX_AUTO_RENDER` ，如下编辑：\n\n```Python\nKATEX_AUTO_RENDER = \"\"\"\ndelimiters: [\n    {left: \"$$\", right: \"$$\", display: true},\n    {left: \"\\\\\\\\[\", right: \"\\\\\\\\]\", display: true},\n    {left: \"\\\\\\\\begin{equation*}\", right: \"\\\\\\\\end{equation*}\", display: true},\n    {left: \"$\", right: \"$\", display: false},\n    {left: \"\\\\\\\\(\", right: \"\\\\\\\\)\", display: false}\n]\n\"\"\"\n```\n\n# 博客美化\n\n相比于 Jekyll、Hugo 和 Hexo，Nikola 的不足是好看的主题比较少。官方提供了一些[主题](https://themes.getnikola.com/)，这里我们以 [bootstrap4](https://themes.getnikola.com/v8/bootstrap4/) 来演示。\n\n## 更换主题\n\n首先，我们需要下载主题。利用 `nikola theme -i bootstrap4` 命令下载主题。然后我们编辑站点配置文件 `conf.py`，搜索 `THEME`，将主题修改为 `bootstrap4`。\n\n## 导航栏配置\n\n我们可以通过修改 `THEME_CONFIG` 来修改导航栏配色。bootstrap4 导航栏默认是暗底，也可以自定义背景颜色，配置文件如下：\n\n```Python\n THEME_CONFIG = {\n      DEFAULT_LANG: {\n          # Use a light navbar with dark text. Defaults to False.                                   \n          'navbar_light': False,\n          # Use a custom navbar color. If unset, 'navbar_light' sets text +\n          # background color. If set, navbar_light controls only background\n          # color. Supported values: bg-dark, bg-light, bg-primary, bg-secondary,\n          # bg-success, bg-danger, bg-warning, bg-info, bg-white, bg-transparent.\n          'navbar_custom_bg': '',\n      }\n }\n```\n\n导航栏默认有博客归档、分类和 RSS 订阅栏目，我们可以通过修改 `NAVIGATION_LINKS` 来自定义导航栏目。其默认配置如下：\n\n```Python\nNAVIGATION_LINKS = {\n    DEFAULT_LANG: (\n        (\"/archive.html\", \"Archive\"),\n        (\"/categories/\", \"Tags\"),\n        (\"/rss.xml\", \"RSS feed\"),\n    ),\n}\n```\n\n这里 `/` 代表站点资源根目录，即 output 目录。我们可以通过指定资源目录，自定义导航栏。比如在 `categories/` 目录下，Nikola 生成了 `cat_nikola`、`cat_python` 等类别目录，我们可以指定这两个目录，新建一个多级 TECH 导航栏目。\n\n```Python\nNAVIGATION_LINKS = {\n    DEFAULT_LANG: (\n        (\"/archive.html\", \"Archive\"),\n        (\"/categories/\", \"Tags\"),\n        (\"/rss.xml\", \"RSS feed\"),\n        (\n          (\n            (\"/categories/cat_nikola/\", \"Nikola\"),\n            (\"/categories/cat_python/\", \"Python\")\n          ),\n          \"TECH\"\n        ),\n    ),\n}\n```\n\n## 网页图标与 logo\n\n首先我们进入博客根目录中的 files 目录，新建 assets 目录，再新建 img 目录，然后将网页图标 favicon 和 logo 文件拷贝到 img 目录中。`nikola build` 在生成静态文件时会将 files 文件下的资源都复制到 output 目录。\n\n然后编辑站点配置文件 `conf.py` 搜索 `FAVICONS` 和 `LOGO`，如下配置：\n\n```Python\nFAVICONS = (\n    (\"icon\", \"/assets/img/favicon.ico\", \"16x16\"),\n)\n\nLOGO_URL = '/assets/img/logo.jpg'\n```\n\n## 代码显示风格\n\nNikola 使用 [Pygments](https://pygments.org/) 进行语法高亮，你可以在 [Pygments styles](https://pygments.org/styles/) 选择自己喜欢的配色风格。我比较喜欢 `zenburn`，编辑站点配置文件 `conf.py` ，搜索 `CODE_COLOR_SCHEME` ，如下配置：\n\n```Python\nCODE_COLOR_SCHEME = 'zenburn'\n```\n\n## 目录美化\n\n如果你使用了 `markdown.extensions.toc` 插件解析文章目录，你会发现这个目录比较丑。Nikola 使用 `post.tmpl` 模板文件来生成博客文章页面，我们可以修改这个模板文件，从而美化目录（这需要你懂一点前端和 Mako 模板引擎的知识:)\n\n首先，我们将 `post.tmpl` 文件复制到博客根目录，命令行输入 `nikola theme -c post.tmpl`，该命令会将 `post.tmpl` 文件复制 templates 目录下，然后我们编辑这个文件。因为我们只是希望美化博客文章页面的目录，所以可以使用内部样式表，在 `<style>` 标签中定义样式。比如，我是这样美化的：\n\n```CSS\n@media screen and (min-width: 1024px) {\n    .e-content {\n        display: grid;\n        grid-template-columns: 3fr 1fr;\n        column-gap: 30px;\n        position: relative;\n    }\n\n    .toc {\n        grid-column: 2 / 3;\n        grid-row: 1 / span 999;\n        align-self: start;\n        position: sticky;\n        top: 20px;\n    }\n        \n    .toc::before {\n        content: \"ON this page\";\n        background-color: #ffe70e;\n        color: #444;\n        font-size: 16px;\n        font-weight: bold;\n        font-style: italic;\n        padding: 5px 5px;\n        margin-left: 20px;\n    }\n}\n\n@media screen and (max-width: 767px) {\n    .e-content {\n        display: grid;\n        grid-template-columns: 1fr;\n    }\n            \n    .toc {\n        grid-column: 1 / 2;\n    }\n            \n    .toc::before {\n        content: \"ON this page\";\n        background-color: #ffe70e;\n        color: #444;\n        font-size: 16px;\n        font-weight: bold;\n        font-style: italic;\n        padding: 5px 5px;\n        margin-left: 20px;\n    }\n\n}\n```\n\n## 定制样式\n\nNikola 支持定制样式，我们可以通过在 `files/assets/css/` 目录下，新建 `custom.css` 文件来定制全局字体，行距等样式。如果你觉得我的样式不错，也可以选择复制[我的](/listings/custom.css.html):)\n\n## 个性化首页\n\nNikola 默认的首页是博客文章列表，并且是显示文章全部内容。我们可以通过修改配置文件 `INDEX_TEASERS=True`，然后在文章源文件中加入 `<!--- TEASER_END --->` 来选择显示部分内容。\n\n首页默认显示 10 篇文章，我们可以通过编辑站点配置文件中的 `INDEX_DISPLAY_POST_COUNT` 来选择首页显示的文章数量。\n\n此外，如果你希望定制首页，比如首页是一个 Greeting 页面，显示个人信息等等（像我这样:) 我强烈建议修改 `index.tmpl` 模板文件。如果你懂一点前端，可以在这里大显身手。使用命令 `nikola theme -c index.tmpl` 将模板文件复制到 templates 目录下，进行修改。\n\n# 部署到 Github\n\n- 在 Github 新建一个仓库，命名为 `[username].github.io`，username 就是你的 Github 账户名\n- 在博客根目录 `git init` 创建版本仓库\n- 添加远程仓库 `git remote add origin https://github.com/[username]/[username].github.io.git`\n- 创建 `.gitignore` 文件\n\n```Bash\ncache\n.doit.db*\n__pycache__\noutput\n.ipynb_checkpoints\n.DS_Store\n```\n\n- 使用 `nikola github_deploy` 一键部署到 Github\n\n解释一下 `nikola github_deploy`，这个[命令](https://getnikola.com/handbook.html#deploying-to-github)会创建一个 `src` 分支，用来保存博客目录的源文件，而 `master` 分支用来保存站点资源目录（即 output 目录）下的那些静态资源文件。这些配置也可以在站点配置文件 `conf.py` 中进行修改：\n\n```Python\nGITHUB_SOURCE_BRANCH = 'src'\nGITHUB_DEPLOY_BRANCH = 'master'\n\n# The name of the remote where you wish to push to, using github_deploy.\nGITHUB_REMOTE_NAME = 'origin'\n\n# Whether or not github_deploy should commit to the source branch automatically\n# before deploying.\nGITHUB_COMMIT_SOURCE = True\n```\n\n# 参考资料\n\n- [The Nikola Handbook](https://getnikola.com/handbook.html#)\n- https://randlow.github.io/posts/python/create-nikola-coding-blog/\n- https://www.brainsorting.com/posts/create-a-blog-with-nikola/\n- https://paulomarconi.github.io/blog/Nikola-guide/"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"arrow","html-math-method":"katex","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.34","theme":["cosmo","../../theme.scss"],"title-block-banner":true,"title":"如何使用 Nikola 搭建个人博客","author":"Tom","date":"2022-04-29","code-block-bg":true,"categories":["网站博客"],"image":"nikola.jpg","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}